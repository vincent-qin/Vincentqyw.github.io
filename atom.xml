<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Vincent Qin</title>
  
  <subtitle>Keep Your Curiosity</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.vincentqin.tech/"/>
  <updated>2017-12-08T12:17:32.757Z</updated>
  <id>https://www.vincentqin.tech/</id>
  
  <author>
    <name>Vincent Qin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>深度学习在深度(视差)估计中的应用</title>
    <link href="https://www.vincentqin.tech/2017/12/06/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9C%A8%E6%B7%B1%E5%BA%A6(%E8%A7%86%E5%B7%AE)%E4%BC%B0%E8%AE%A1%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <id>https://www.vincentqin.tech/2017/12/06/深度学习在深度(视差)估计中的应用/</id>
    <published>2017-12-06T15:56:45.000Z</published>
    <updated>2017-12-08T12:17:32.757Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://oofx6tpf6.bkt.clouddn.com/17-12-7/11107720.jpg" alt="Kitti"></p><div class="note "><p>本文对KITTI stereo 2015 datasets 冠军之作<a href="http://openaccess.thecvf.com/content_ICCV_2017_workshops/papers/w17/Pang_Cascade_Residual_Learning_ICCV_2017_paper.pdf" target="_blank" rel="external">Cascade Residual Learning: A Two-stage Convolutional Neural Network for Stereo Matching</a>进行简要解读。</p></div><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>目前深度学习发展的如火如荼，利用CNN可以将图像对的<strong>匹配问题</strong>看成一个学习问题。但是如何能够得到高质量的深度图像仍然是一个普世的问题。本文作者提出了一种新型的层叠式（cascade）CNN结构（CRL:Cascade Residual Learning）去估计深度信息。深度估计的过程大致可以分成两个步骤：</p><ol><li>在现有的DispNet的基础上添加几个上卷积模块，目的是为了得到full resolution的初始的深度信息，同时能够学习到更多的细节信息；</li><li>第二步是对第一步中学习到的深度信息进行校准（rectify）；这一步利用到了第一步得到的多尺度的深度信息，然后并非是直接学习到优化后的深度信息，而是学习了每个尺度下的深度残差，然后结合第一步中得到的多尺度深度信息合成最终的深度图（这里有点类似于何凯明的residual的思想： It is easier to learn the residual than to learn the disparity directly）。</li></ol><h2 id="网络结构"><a href="#网络结构" class="headerlink" title="网络结构"></a>网络结构</h2><p>下面详细的介绍下这个网络的结构:<br><img src=" http://oofx6tpf6.bkt.clouddn.com/17-12-6/38104630.jpg" )="" width="120%/"></p><p>可以很清楚地在上图中看到这两个不同的阶段。对于第一个阶段，类似于文献[1]中提到的<strong>DispNetC</strong>结构（C是correlation层的意思），本文作者同样采取了沙漏形的网络结构。但是<strong>DispNetC</strong>网络的输出图像的分辨率只有原始尺寸的一半！CRL中的<strong>DispFulNet</strong>在<strong>DispNetC</strong>的基础上，在最后的两个卷积层增加了添加了上卷积模块，然后再串联左图；通过再次添加一个额外的卷积层，可以使得网络输出为全分辨率（和左右图大小一致）。注意：每个尺度（共6个尺度）上的临时输出与其对应的ground truth之间计算$l_1$损失。<br>总结一下就是，这个<strong>DispFulNet</strong>学习了这样一个网络：通过输入一对图片$I_L$和$I_R$，学习到了视差$d_1$，使得：</p><script type="math/tex; mode=display">\tilde{I}_L(x,y)=I_R(x+d_1(x,y),y)</script><p>上式中的$\tilde{I}_L$就是把右图根据视差移动后的结果，我们的目标就是$\tilde{I}_L$越来越接近$I_L$。</p><p>接下来就是第二阶段，将$I_L$,$I_R$,$\tilde{I}_L$,$d_1$以及$e_L=|I_L-\tilde{I}_L|$串联起来[2]作为<strong>dispResNet</strong>的输入。此优化网络最后学到的是多尺度的残差$ \{r_2^{(s)} \} _s^S$，其中s=0时表示全尺度残差。最后与<strong>DispFulNet</strong>输出的多尺度深度图$\{d_1^{(s)}\}_s^S$做和运算得到最后优化后的深度$\{d_2^{(s)}\}_s^S$：</p><script type="math/tex; mode=display">d_2^{(s)}=d_1^{(s)}+r_2^{(s)},0 \leq s \leq S</script><p>于是$d_2^{(0)}$就是最后的全尺度输出。</p><h2 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h2><p>以下是对其结果展示：<br><img src="http://oofx6tpf6.bkt.clouddn.com/17-12-6/68873144.jpg" alt=""></p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>[1]. N. Mayer, E. Ilg, P. Hausser, P. Fischer, D. Cremers, A. Dosovitskiy, and T. Brox. <a href="https://arxiv.org/abs/1512.02134" target="_blank" rel="external"><strong>A large dataset to train convolutional networks for disparity, optical flow, and scene flow estimation</strong></a>. In Proc. of the IEEE Conference on Computer Vision and Pattern Recognition, pages 4040–4048, 2016.<br>[2]. E. Ilg, N. Mayer, T. Saikia, M. Keuper, A. Dosovitskiy, and T. Brox. <a href="https://arxiv.org/abs/1612.01925" target="_blank" rel="external"><strong>Flownet 2.0: Evolution of optical flow estimation with deep networks</strong></a>. In Proc. of the IEEE Conference on Computer Vision and Pattern Recognition, pages 2462–2470, 2017.<br>[3]. <a href="http://www.cvlibs.net/datasets/kitti/eval_scene_flow.php?benchmark=stereo" target="_blank" rel="external">KITTI: Stereo Evaluation 2015</a><br>[4]. <a href="https://github.com/Artifineuro/crl" target="_blank" rel="external">code: Cascade Residual Learning (CRL)</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://oofx6tpf6.bkt.clouddn.com/17-12-7/11107720.jpg&quot; alt=&quot;Kitti&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;note &quot;&gt;&lt;p&gt;本文对KITTI stereo 2015 datasets 冠军之作&lt;a href=&quot;http://openaccess.thecvf.com/content_ICCV_2017_workshops/papers/w17/Pang_Cascade_Residual_Learning_ICCV_2017_paper.pdf&quot;&gt;Cascade Residual Learning: A Two-stage Convolutional Neural Network for Stereo Matching&lt;/a&gt;进行简要解读。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
    
      <category term="Deep Learning" scheme="https://www.vincentqin.tech/tags/Deep-Learning/"/>
    
      <category term="depth estimation" scheme="https://www.vincentqin.tech/tags/depth-estimation/"/>
    
      <category term="disparity" scheme="https://www.vincentqin.tech/tags/disparity/"/>
    
      <category term="DispNet" scheme="https://www.vincentqin.tech/tags/DispNet/"/>
    
  </entry>
  
  <entry>
    <title>Matlab Deep Learning学习笔记</title>
    <link href="https://www.vincentqin.tech/2017/11/19/Matlab-Deep-Learning%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://www.vincentqin.tech/2017/11/19/Matlab-Deep-Learning学习笔记/</id>
    <published>2017-11-18T17:22:40.000Z</published>
    <updated>2017-11-30T13:26:50.181Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://oofx6tpf6.bkt.clouddn.com/cifar10-fig.jpg" alt=""></p><div class="note "><p>最近对深度学习尤其着迷，是时候用万能的Matlab去践行我的DL学习之路了。之所以用Matlab，是因为Matlab真的太强大了！自从大学开始我就一直用这个神奇的软件，算是最熟悉的编程工具。加上最近mathworks公司一大波大佬的不懈努力，在今年下半年发行的R2017b版本中又加入了诸多新颖的<a href="https://cn.mathworks.com/products/new_products/latest_features.html?s_tid=hp_release_2017b&amp;from=timeline&amp;isappinstalled=0" target="_blank" rel="external">特性</a>，尤其在<a href="https://cn.mathworks.com/solutions/deep-learning.html" target="_blank" rel="external">DL</a>方面，可以发现：仅仅几条简单的代码，就能够实现复杂的功能。基于以上，我在本文列举了几个在Matlab上学习Deep Learning的例子：1. <a href="#example1">手写字符识别</a>；2. <a href="#example2">搭建网络对CIFAR10分类</a>；3.<a href="#example3">搭建一个Resnet</a>。务必保证主机已经安装Matlab 2017a及以上。</p></div><a id="more"></a><h2 id="手写字符识别"><a href="#手写字符识别" class="headerlink" title="手写字符识别"></a><span id="example1">手写字符识别</span></h2><p>利用CNN做数字分类实验。</p><p>接下来的实验会阐明如何进行：</p><ul><li>加载图像数据</li><li>设计网络结构</li><li>设置网络训练参数</li><li>训练网络</li><li>预测新数据的类别</li></ul><h3 id="加载图像数据"><a href="#加载图像数据" class="headerlink" title="加载图像数据"></a>加载图像数据</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">digitDatasetPath = fullfile(matlabroot,<span class="string">'toolbox'</span>,<span class="string">'nnet'</span>,<span class="string">'nndemos'</span>,...</div><div class="line">    <span class="string">'nndatasets'</span>,<span class="string">'DigitDataset'</span>);</div><div class="line"><span class="comment">% imageDatastore函数 能够通过文件夹名自动地把数据存储成ImageDatastore 对象</span></div><div class="line">digitData = imageDatastore(digitDatasetPath,...</div><div class="line">    <span class="string">'IncludeSubfolders'</span>,true,<span class="string">'LabelSource'</span>,<span class="string">'foldernames'</span>);</div><div class="line"></div><div class="line"><span class="comment">% Display some of the images in the datastore.</span></div><div class="line">figure;</div><div class="line">perm = randperm(<span class="number">10000</span>,<span class="number">25</span>);</div><div class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:<span class="number">25</span></div><div class="line">    subplot(<span class="number">5</span>,<span class="number">5</span>,<span class="built_in">i</span>);</div><div class="line">    imshow(digitData.Files&#123;perm(i)&#125;);</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure><p>以下是手写字符的部分数据：</p><p><img src="http://oofx6tpf6.bkt.clouddn.com/17-11-18/63361958.jpg" alt=""></p><h3 id="创建训练集与验证集"><a href="#创建训练集与验证集" class="headerlink" title="创建训练集与验证集"></a>创建训练集与验证集</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">trainNumFiles = <span class="number">750</span>;</div><div class="line">[trainDigitData,valDigitData] = splitEachLabel(digitData,<span class="number">750</span>,<span class="string">'randomize'</span>); </div><div class="line"><span class="comment">% 每类有1000个，选择其中的750类作为训练集，剩下的作为验证集；此处750可以换成一个比例：75%</span></div></pre></td></tr></table></figure><p>注意Matlab里面支持的<strong>层</strong>的类型，包括：<a href="https://cn.mathworks.com/help/nnet/ref/nnet.cnn.layer.layer.html?searchHighlight=softmaxlayer&amp;s_tid=doc_srchtitle" target="_blank" rel="external">CLICK THIS LINK</a>。如下所示：</p><div class="table-container"><table><thead><tr><th>Epoch</th><th>Iteration</th></tr></thead><tbody><tr><td>Layer Type</td><td>Function</td></tr><tr><td>Image input layer</td><td>imageInputLayer</td></tr><tr><td>Sequence input layer</td><td>sequenceInputLayer</td></tr><tr><td>2-D convolutional layer</td><td>convolution2dLayer</td></tr><tr><td>2-D transposed convolutional layer</td><td>transposedConv2dLayer</td></tr><tr><td>Fully connected layer</td><td>fullyConnectedLayer</td></tr><tr><td>Long short-term memory (LSTM) layer</td><td>LSTMLayer</td></tr><tr><td>Rectified linear unit (ReLU) layer</td><td>reluLayer</td></tr><tr><td>Leaky rectified linear unit (ReLU) layer</td><td>leakyReluLayer</td></tr><tr><td>Clipped rectified linear unit (ReLU) layer</td><td>clippedReluLayer</td></tr><tr><td>Batch normalization layer</td><td>batchNormalizationLayer</td></tr><tr><td>Channel-wise local response normalization (LRN) layer</td><td>crossChannelNormalizationLayer</td></tr><tr><td>Dropout layer</td><td>dropoutLayer</td></tr><tr><td>Addition layer</td><td>additionLayer</td></tr><tr><td>Depth concatenation layer</td><td>depthConcatenationLayer</td></tr><tr><td>Average pooling layer</td><td>averagePooling2dLayer</td></tr><tr><td>Max pooling layer</td><td>maxPooling2dLayer</td></tr><tr><td>Max unpooling layer</td><td>maxUnpooling2dLayer</td></tr><tr><td>Softmax layer</td><td>softmaxLayer</td></tr><tr><td>Classification layer</td><td>classificationLayer</td></tr><tr><td>Regression layer</td><td>regressionLayer</td></tr></tbody></table></div><h3 id="创建自己的网络结构"><a href="#创建自己的网络结构" class="headerlink" title="创建自己的网络结构"></a>创建自己的网络结构</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">%% Define Network Architecture</span></div><div class="line"><span class="comment">% Define the convolutional neural network architecture.</span></div><div class="line">layers = </div><div class="line">    [</div><div class="line">    imageInputLayer([<span class="number">28</span> <span class="number">28</span> <span class="number">1</span>])</div><div class="line">    convolution2dLayer(<span class="number">3</span>,<span class="number">16</span>,<span class="string">'Padding'</span>,<span class="number">1</span>)</div><div class="line">    batchNormalizationLayer()</div><div class="line">    reluLayer()</div><div class="line">    maxPooling2dLayer(<span class="number">2</span>,<span class="string">'Stride'</span>,<span class="number">2</span>)</div><div class="line">    </div><div class="line">    convolution2dLayer(<span class="number">3</span>,<span class="number">32</span>,<span class="string">'Padding'</span>,<span class="number">1</span>)</div><div class="line">    batchNormalizationLayer()</div><div class="line">    reluLayer()</div><div class="line">    </div><div class="line">    maxPooling2dLayer(<span class="number">2</span>,<span class="string">'Stride'</span>,<span class="number">2</span>)</div><div class="line">    </div><div class="line">    convolution2dLayer(<span class="number">3</span>,<span class="number">64</span>,<span class="string">'Padding'</span>,<span class="number">1</span>)</div><div class="line">    batchNormalizationLayer()</div><div class="line">    reluLayer()</div><div class="line">    </div><div class="line">    fullyConnectedLayer(<span class="number">10</span>)</div><div class="line">    softmaxLayer()</div><div class="line">    classificationLayer()</div><div class="line">    ];</div></pre></td></tr></table></figure><p>以下就是该网络结构及参数设置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"> <span class="number">1</span>   <span class="string">''</span>   Image Input             <span class="number">28</span>x28x1 images <span class="keyword">with</span> <span class="string">'zerocenter'</span> normalization</div><div class="line"> <span class="number">2</span>   <span class="string">''</span>   Convolution             <span class="number">16</span> <span class="number">3</span>x3 convolutions <span class="keyword">with</span> stride [<span class="number">1</span>  <span class="number">1</span>] and padding [<span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span>]</div><div class="line"> <span class="number">3</span>   <span class="string">''</span>   Batch Normalization     Batch normalization</div><div class="line"> <span class="number">4</span>   <span class="string">''</span>   ReLU                    ReLU</div><div class="line"> <span class="number">5</span>   <span class="string">''</span>   Max Pooling             <span class="number">2</span>x2 max pooling <span class="keyword">with</span> stride [<span class="number">2</span>  <span class="number">2</span>] and padding [<span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>]</div><div class="line"> <span class="number">6</span>   <span class="string">''</span>   Convolution             <span class="number">32</span> <span class="number">3</span>x3 convolutions <span class="keyword">with</span> stride [<span class="number">1</span>  <span class="number">1</span>] and padding [<span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span>]</div><div class="line"> <span class="number">7</span>   <span class="string">''</span>   Batch Normalization     Batch normalization</div><div class="line"> <span class="number">8</span>   <span class="string">''</span>   ReLU                    ReLU</div><div class="line"> <span class="number">9</span>   <span class="string">''</span>   Max Pooling             <span class="number">2</span>x2 max pooling <span class="keyword">with</span> stride [<span class="number">2</span>  <span class="number">2</span>] and padding [<span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>]</div><div class="line"><span class="number">10</span>   <span class="string">''</span>   Convolution             <span class="number">64</span> <span class="number">3</span>x3 convolutions <span class="keyword">with</span> stride [<span class="number">1</span>  <span class="number">1</span>] and padding [<span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span>]</div><div class="line"><span class="number">11</span>   <span class="string">''</span>   Batch Normalization     Batch normalization</div><div class="line"><span class="number">12</span>   <span class="string">''</span>   ReLU                    ReLU</div><div class="line"><span class="number">13</span>   <span class="string">''</span>   Fully Connected         <span class="number">10</span> fully connected layer</div><div class="line"><span class="number">14</span>   <span class="string">''</span>   Softmax                 softmax</div><div class="line"><span class="number">15</span>   <span class="string">''</span>   Classification Output   crossentropyex</div></pre></td></tr></table></figure><h3 id="网络训练参数设计"><a href="#网络训练参数设计" class="headerlink" title="网络训练参数设计"></a>网络训练参数设计</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> options = trainingOptions(<span class="string">'sgdm'</span>,...</div><div class="line"><span class="string">'MaxEpochs'</span>,<span class="number">3</span>, ...                 <span class="comment">% 训练最大轮回</span></div><div class="line"><span class="string">'ValidationData'</span>,valDigitData,...  <span class="comment">% 验证集</span></div><div class="line"><span class="string">'ValidationFrequency'</span>,<span class="number">30</span>,...</div><div class="line"><span class="string">'Verbose'</span>,false,...</div><div class="line"><span class="string">'Plots'</span>,<span class="string">'training-progress'</span>);</div></pre></td></tr></table></figure><h3 id="开始训练"><a href="#开始训练" class="headerlink" title="开始训练"></a>开始训练</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">net = trainNetwork(trainDigitData,layers,options);</div></pre></td></tr></table></figure><h3 id="测试新的数据"><a href="#测试新的数据" class="headerlink" title="测试新的数据"></a>测试新的数据</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">predictedLabels = classify(net,valDigitData);</div><div class="line">valLabels = valDigitData.Labels;</div><div class="line">accuracy = sum(predictedLabels == valLabels)/<span class="built_in">numel</span>(valLabels)</div></pre></td></tr></table></figure><h3 id="查看某层参数"><a href="#查看某层参数" class="headerlink" title="查看某层参数"></a>查看某层参数</h3><p>例如查看第2层的weight参数，输入以下命令：<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">montage(imresize(mat2gray(net.Layers(<span class="number">2</span>).Weights),[<span class="number">128</span> <span class="number">128</span>]));</div><div class="line">set(gcf,<span class="string">'color'</span>,[<span class="number">1</span> <span class="number">1</span> <span class="number">1</span>]); </div><div class="line">frame=getframe(gcf); <span class="comment">% get the frame</span></div><div class="line">image=frame.cdata;</div><div class="line">[image,map]     =  rgb2ind(image,<span class="number">256</span>);  </div><div class="line">imwrite(image,map,<span class="string">'weight-layer2.png'</span>);</div></pre></td></tr></table></figure></p><p>图像如下所示：<br><img src="http://oofx6tpf6.bkt.clouddn.com/weight-layer2.png" alt=""></p><p>再看一下第10层的参数：<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">[~,~,iter,~]=<span class="built_in">size</span>(net.Layers(<span class="number">10</span>).Weights);</div><div class="line">name=<span class="string">'weight.gif'</span>;</div><div class="line">dt=<span class="number">0.4</span>;</div><div class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:iter</div><div class="line">montage(imresize(mat2gray(net.Layers(<span class="number">10</span>).Weights(:,:,<span class="built_in">i</span>,:)),[<span class="number">128</span> <span class="number">128</span>]));</div><div class="line">    set(gcf,<span class="string">'color'</span>,[<span class="number">1</span> <span class="number">1</span> <span class="number">1</span>]); <span class="comment">%变白</span></div><div class="line">title([<span class="string">'Layer(10), Channel: '</span>,num2str(i)]);</div><div class="line">axis normal</div><div class="line">truesize</div><div class="line"><span class="comment">%Creat GIF</span></div><div class="line">frame(<span class="built_in">i</span>)=getframe(gcf); <span class="comment">% get the frame</span></div><div class="line">image=frame(<span class="built_in">i</span>).cdata;</div><div class="line">[image,map]     =  rgb2ind(image,<span class="number">256</span>);  </div><div class="line"><span class="keyword">if</span> <span class="built_in">i</span>==<span class="number">1</span></div><div class="line"> imwrite(image,map,name,<span class="string">'gif'</span>);</div><div class="line"><span class="keyword">else</span></div><div class="line"> imwrite(image,map,name,<span class="string">'gif'</span>,<span class="string">'WriteMode'</span>,<span class="string">'append'</span>,<span class="string">'DelayTime'</span>,dt);</div><div class="line">    <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></p><p><img src="http://oofx6tpf6.bkt.clouddn.com/weight-inf.gif" alt=""></p><h2 id="搭建网络对CIFAR10分类"><a href="#搭建网络对CIFAR10分类" class="headerlink" title="搭建网络对CIFAR10分类"></a><span id="example2">搭建网络对CIFAR10分类</span></h2><p>CIFAR10和CIFAR100是<a href="http://groups.csail.mit.edu/vision/TinyImages/" target="_blank" rel="external">80 million tiny images</a>的子集，是由Geoffrey Hinton的弟子们Alex Krizhevsky和Vinod Nair共同采集。</p><h3 id="CIFAR10"><a href="#CIFAR10" class="headerlink" title="CIFAR10"></a><a href="http://www.cs.toronto.edu/~kriz/cifar.html" target="_blank" rel="external">CIFAR10</a></h3><p>CIFAR10由60000张32*32的彩色图像组成，一种分成10类，平均每类图像6000张。共有50000张训练图像，10000张测试图像。这个数据集被分成了5个分支，其中每个分支10000张。测试集包含每类中随机选择的1000张图像。训练集就是剩下的那些图像。<br>对于每个分支的数据的大小是：10000*3072；其中3072=32*32*3。数据以行优先的顺序存储，所以前1024个数据是r通道的数据，接下来的1024个数据是g通道的数据，最后1024个数据是b通道的。<br>假如原始的数据是data，我们想要将其重新排列成我们需要的数据。首先对其进行转置，然后再用reshape函数对图像重组（可选：最后将图像前两维互换（转置），之所以这么做，可以更好的可视化）。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">XBatch = data';</div><div class="line">XBatch = <span class="built_in">reshape</span>(XBatch, <span class="number">32</span>,<span class="number">32</span>,<span class="number">3</span>,[]);</div><div class="line">XBatch = <span class="built_in">permute</span>(XBatch, [<span class="number">2</span> <span class="number">1</span> <span class="number">3</span> <span class="number">4</span>]);</div></pre></td></tr></table></figure><p>以下是cifar10的部分数据。<br><img src="http://oofx6tpf6.bkt.clouddn.com/cifar10-images.png" alt=""><br>共有10类，包括：airplane，automobile，bird，cat，deer，dog，frog，horse，ship，truck。</p><h3 id="Just-run-it"><a href="#Just-run-it" class="headerlink" title="Just run it"></a>Just run it</h3><p>接下来我们就开始运行以下代码，来训练我们的网络。闲话少说，我把代码放在了<a href="https://github.com/Vincentqyw/DeepLearning/blob/master/demo_cifar10.m" target="_blank" rel="external">Github</a>，欢迎$star$。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>   <span class="string">'imageinput'</span>    Image Input         <span class="number">28</span>x28x1 images <span class="keyword">with</span> <span class="string">'zerocenter'</span> normalization</div><div class="line"><span class="number">2</span>   <span class="string">'conv_1'</span>        Convolution         <span class="number">16</span> <span class="number">3</span>x3x1 convolutions <span class="keyword">with</span> stride [<span class="number">1</span>  <span class="number">1</span>] and padding [<span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span>]</div><div class="line"><span class="number">3</span>   <span class="string">'batchnorm_1'</span>   Batch Normalization Batch normalization <span class="keyword">with</span> <span class="number">16</span> channels</div><div class="line"><span class="number">4</span>   <span class="string">'relu_1'</span>        ReLU               ReLU</div><div class="line"><span class="number">5</span>   <span class="string">'maxpool_1'</span>     Max Pooling         <span class="number">2</span>x2 max pooling <span class="keyword">with</span> stride [<span class="number">2</span>  <span class="number">2</span>] and padding [<span class="number">0</span> <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>]</div><div class="line"><span class="number">6</span>   <span class="string">'conv_2'</span>        Convolution         <span class="number">32</span> <span class="number">3</span>x3x16 convolutions <span class="keyword">with</span> stride [<span class="number">1</span>  <span class="number">1</span>] and padding [<span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span>]</div><div class="line"><span class="number">7</span>   <span class="string">'batchnorm_2'</span>   Batch Normalization Batch normalization <span class="keyword">with</span> <span class="number">32</span> channels</div><div class="line"><span class="number">8</span>   <span class="string">'relu_2'</span>        ReLU                ReLU</div><div class="line"><span class="number">9</span>   <span class="string">'maxpool_2'</span>     Max Pooling         <span class="number">2</span>x2 max pooling <span class="keyword">with</span> stride [<span class="number">2</span>  <span class="number">2</span>] and padding [<span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span> <span class="number">0</span>]</div><div class="line"><span class="number">10</span>   <span class="string">'conv_3'</span>       Convolution         <span class="number">64</span> <span class="number">3</span>x3x32 convolutions <span class="keyword">with</span> stride [<span class="number">1</span>  <span class="number">1</span>] and padding [<span class="number">1</span> <span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span>]</div><div class="line"><span class="number">11</span>   <span class="string">'batchnorm_3'</span>  Batch Normalization Batch normalization <span class="keyword">with</span> <span class="number">64</span> channels</div><div class="line"><span class="number">12</span>   <span class="string">'relu_3'</span>       ReLUReLU</div><div class="line"><span class="number">13</span>   <span class="string">'fc'</span>           Fully Connected<span class="number">10</span> fully connected layer</div><div class="line"><span class="number">14</span>   <span class="string">'softmax'</span>      Softmaxsoftmax</div><div class="line"><span class="number">15</span>   <span class="string">'classoutput'</span>  Classification Outputcrossentropyex <span class="keyword">with</span> <span class="string">'0'</span>, <span class="string">'1'</span>, and <span class="number">8</span> other classes</div></pre></td></tr></table></figure><p>以下是训练过程输出：</p><div class="table-container"><table><thead><tr><th>Epoch</th><th>Iteration</th><th style="text-align:center">Time Elapsed (seconds)</th><th style="text-align:center">Mini-batch Loss</th><th style="text-align:center">Mini-batch Accuracy</th><th style="text-align:center">Base Learning Rate</th></tr></thead><tbody><tr><td>1</td><td>1</td><td style="text-align:center">0.06</td><td style="text-align:center">2.3026</td><td style="text-align:center">8.59%</td><td style="text-align:center">0.0020</td></tr><tr><td>1</td><td>50</td><td style="text-align:center">1.27</td><td style="text-align:center">2.3026</td><td style="text-align:center">14.06%</td><td style="text-align:center">0.0020</td></tr><tr><td>1</td><td>100</td><td style="text-align:center">2.52</td><td style="text-align:center">2.3024</td><td style="text-align:center">7.81%</td><td style="text-align:center">0.0020</td></tr><tr><td>1</td><td>150</td><td style="text-align:center">3.73</td><td style="text-align:center">2.2999</td><td style="text-align:center">20.31%</td><td style="text-align:center">0.0020</td></tr><tr><td>1</td><td>200</td><td style="text-align:center">5.01</td><td style="text-align:center">2.2740</td><td style="text-align:center">15.63%</td><td style="text-align:center">0.0020</td></tr><tr><td>1</td><td>250</td><td style="text-align:center">6.28</td><td style="text-align:center">2.1194</td><td style="text-align:center">21.09%</td><td style="text-align:center">0.0020</td></tr><tr><td>1</td><td>300</td><td style="text-align:center">7.58</td><td style="text-align:center">1.9100</td><td style="text-align:center">23.44%</td><td style="text-align:center">0.0020</td></tr><tr><td>1</td><td>350</td><td style="text-align:center">8.86</td><td style="text-align:center">1.8892</td><td style="text-align:center">28.13%</td><td style="text-align:center">0.0020</td></tr><tr><td>2</td><td>400</td><td style="text-align:center">10.08</td><td style="text-align:center">1.7490</td><td style="text-align:center">29.69%</td><td style="text-align:center">0.0020</td></tr><tr><td>2</td><td>450</td><td style="text-align:center">11.32</td><td style="text-align:center">1.8377</td><td style="text-align:center">31.25%</td><td style="text-align:center">0.0020</td></tr><tr><td>2</td><td>500</td><td style="text-align:center">12.57</td><td style="text-align:center">1.6073</td><td style="text-align:center">39.84%</td><td style="text-align:center">0.0020</td></tr><tr><td>…</td><td>…</td><td style="text-align:center">…</td><td style="text-align:center">…</td><td style="text-align:center">…</td><td style="text-align:center">…</td></tr><tr><td>20</td><td>7650</td><td style="text-align:center">407.74</td><td style="text-align:center">0.2858</td><td style="text-align:center">93.75%</td><td style="text-align:center">2.00e-05</td></tr><tr><td>20</td><td>7700</td><td style="text-align:center">409.06</td><td style="text-align:center">0.3127</td><td style="text-align:center">89.84%</td><td style="text-align:center">2.00e-05</td></tr><tr><td>20</td><td>7750</td><td style="text-align:center">410.38</td><td style="text-align:center">0.3254</td><td style="text-align:center">87.50%</td><td style="text-align:center">2.00e-05</td></tr><tr><td>20</td><td>7800</td><td style="text-align:center">411.64</td><td style="text-align:center">0.2456</td><td style="text-align:center">92.19%</td><td style="text-align:center">2.00e-05</td></tr></tbody></table></div><p>最后测试我们的模型的性能，accuracy=76%左右。但是训练时，我们的batch-accuracy已经达到了90%以上，说明我们的<strong>模型过拟合</strong>了。显然这不是我们想要的结果，进一步的调参将会在此补充。</p><h3 id="可视化某层的参数"><a href="#可视化某层的参数" class="headerlink" title="可视化某层的参数"></a>可视化某层的参数</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">% Extract the first convolutional layer weights</span></div><div class="line">w = cifar10Net.Layers(<span class="number">2</span>).Weights;</div><div class="line"></div><div class="line"><span class="comment">% rescale and resize the weights for better visualization</span></div><div class="line">w = mat2gray(w);</div><div class="line">w = imresize(w, [<span class="number">100</span> <span class="number">100</span>]);</div><div class="line"></div><div class="line">figure</div><div class="line">montage(w)</div><div class="line">name=<span class="string">'cifar10-weight-layer2'</span>;</div><div class="line">set(gcf,<span class="string">'color'</span>,[<span class="number">1</span> <span class="number">1</span> <span class="number">1</span>]);</div><div class="line">frame=getframe(gcf); <span class="comment">% get the frame</span></div><div class="line">image=frame.cdata;</div><div class="line">[image,map]     =  rgb2ind(image,<span class="number">256</span>);  </div><div class="line">imwrite(image,map,[name,<span class="string">'.png'</span>]);</div></pre></td></tr></table></figure><p><img src="http://oofx6tpf6.bkt.clouddn.com/cifar10-weight-layer2.png" alt=""></p><h2 id="搭建一个Resnet"><a href="#搭建一个Resnet" class="headerlink" title="搭建一个Resnet"></a><span id="example3">搭建一个Resnet</span></h2><p>接下来，为了验证下这个DL工具包的强大之处，我打算纯手工建一个Resnet。为方便起见，我搭了一个Resnet34（更深的网络敬请期待吧）。这里是它的<a href="./resnet34.prototxt">prototxt</a>，我们可以用<a href="http://ethereon.github.io/netscope/#/editor" target="_blank" rel="external">网络可视化工具</a>进行查看resnet34的结构。以下是Resnet34的一部分（太长了没有截下全部视图）。<br><img src="http://oofx6tpf6.bkt.clouddn.com/resnet34.png" alt=""></p><h3 id="定义每一层与连接层"><a href="#定义每一层与连接层" class="headerlink" title="定义每一层与连接层"></a>定义每一层与连接层</h3><p>以从pool1到res2a为例子建立网络。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">layers_example=[</div><div class="line">    % pool1 - res2a</div><div class="line">    maxPooling2dLayer(<span class="number">3</span>, <span class="string">'Stride'</span>, <span class="number">2</span>,<span class="string">'Name'</span>,<span class="string">'pool1'</span>);</div><div class="line">    %  branch2a </div><div class="line">    convolution2dLayer(<span class="number">3</span>,<span class="number">64</span>,<span class="string">'Stride'</span>, <span class="number">1</span>,<span class="string">'Padding'</span>, <span class="number">1</span>,<span class="string">'Name'</span>,<span class="string">'res2a_branch2a'</span>)</div><div class="line">    batchNormalizationLayer(<span class="string">'Name'</span>,<span class="string">'bn2a_branch2a'</span>)</div><div class="line">    reluLayer(<span class="string">'Name'</span>,<span class="string">'res2a_branch2a_relu'</span>)</div><div class="line"></div><div class="line">    %  branch2b</div><div class="line">    convolution2dLayer(<span class="number">3</span>,<span class="number">64</span>,<span class="string">'Stride'</span>, <span class="number">1</span>,<span class="string">'Padding'</span>, <span class="number">1</span>,<span class="string">'Name'</span>,<span class="string">'res2a_branch2b'</span>)</div><div class="line">    batchNormalizationLayer(<span class="string">'Name'</span>,<span class="string">'bn2a_branch2b'</span>)</div><div class="line"></div><div class="line">    % add together</div><div class="line">    additionLayer(<span class="number">2</span>,<span class="string">'Name'</span>,<span class="string">'res2a'</span>)</div><div class="line">    reluLayer(<span class="string">'Name'</span>,<span class="string">'res2a_relu'</span>)</div><div class="line">];</div></pre></td></tr></table></figure><p>上述过程仅仅完成了网络的一个小分支，记下来要完成<code>res2a_branch1</code>这部分的连接。这时候要用到<strong>DAG</strong>的<a href="https://cn.mathworks.com/help/nnet/ref/dagnetwork.html" target="_blank" rel="external">一些方法</a>。通过添加新层同时建立新的连接即可，方式如下。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">lgraph = layerGraph(layers_example);</div><div class="line">figure</div><div class="line">plot(lgraph)</div><div class="line"></div><div class="line"><span class="comment">%% add some connections (shortcut)</span></div><div class="line">layers_2a=[</div><div class="line">    convolution2dLayer(<span class="number">1</span>,<span class="number">64</span>,<span class="string">'Stride'</span>, <span class="number">1</span>,<span class="string">'Padding'</span>, <span class="number">0</span>,<span class="string">'Name'</span>,<span class="string">'res2a_branch1'</span>)</div><div class="line">    batchNormalizationLayer(<span class="string">'Name'</span>,<span class="string">'bn2a_branch1'</span>)</div><div class="line">];</div><div class="line">lgraph = addLayers(lgraph,layers_2a);</div><div class="line">lgraph = connectLayers(lgraph,<span class="string">'pool1'</span>,<span class="string">'res2a_branch1'</span>);</div><div class="line">lgraph = connectLayers(lgraph,<span class="string">'bn2a_branch1'</span>,<span class="string">'res2a/in2'</span>);</div><div class="line"><span class="comment">% show net</span></div><div class="line">plot(lgraph)</div></pre></td></tr></table></figure><p>其他部分的构建同上，经过一系列重复的工作，我们可以构建出这个不太深的Resnet34，全部代码见我的<a href="https://github.com/Vincentqyw/DeepLearning" target="_blank" rel="external">Github</a>。</p><h2 id="一些基本问题"><a href="#一些基本问题" class="headerlink" title="一些基本问题"></a>一些基本问题</h2><ul><li>参数的基本格式</li></ul><script type="math/tex; mode=display">Height \times Width \times (\#Channels) \times (\#Filters)</script><ul><li>SGD是什么？<br>可以参见好友写的一篇<a href="https://sttomato.github.io/2017/08/13/%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/#随机梯度下降" target="_blank" rel="external">博文</a>。</li><li>什么是epoch？<br>模型训练的时候一般采用stochastic gradient descent（SGD），一次迭代选取一个batch进行update。一个epoch的意思就是迭代次数*batch的数目 和训练数据的个数一样，就是一个epoch。</li><li>为什么要是用BN？<br>Batch normalization layers normalize the activations and gradients propagating through a network, making network training an easier optimization problem. Use batch normalization layers between convolutional layers and nonlinearities, such as ReLU layers, to speed up network training and reduce the sensitivity to network initialization.</li><li>RELU的作用？<br><em>Max-Pooling Layer</em> Convolutional layers (with activation functions) are sometimes followed by a down-sampling operation that reduces the spatial size of the feature map and removes redundant spatial information. Down-sampling makes it possible to increase the number of filters in deeper convolutional layers without increasing the required amount of computation per layer. One way of down-sampling is using a max pooling. The max pooling layer returns the maximum values of rectangular regions of inputs.</li><li><p><em>add more</em></p></li><li><p>Resnet中scale层是如何定义的？有什么用途？ </p></li><li><p>Resnet中为何残差$F(x)$比$H(x)$好学？ </p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://oofx6tpf6.bkt.clouddn.com/cifar10-fig.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;note &quot;&gt;&lt;p&gt;最近对深度学习尤其着迷，是时候用万能的Matlab去践行我的DL学习之路了。之所以用Matlab，是因为Matlab真的太强大了！自从大学开始我就一直用这个神奇的软件，算是最熟悉的编程工具。加上最近mathworks公司一大波大佬的不懈努力，在今年下半年发行的R2017b版本中又加入了诸多新颖的&lt;a href=&quot;https://cn.mathworks.com/products/new_products/latest_features.html?s_tid=hp_release_2017b&amp;amp;from=timeline&amp;amp;isappinstalled=0&quot;&gt;特性&lt;/a&gt;，尤其在&lt;a href=&quot;https://cn.mathworks.com/solutions/deep-learning.html&quot;&gt;DL&lt;/a&gt;方面，可以发现：仅仅几条简单的代码，就能够实现复杂的功能。基于以上，我在本文列举了几个在Matlab上学习Deep Learning的例子：1. &lt;a href=&quot;#example1&quot;&gt;手写字符识别&lt;/a&gt;；2. &lt;a href=&quot;#example2&quot;&gt;搭建网络对CIFAR10分类&lt;/a&gt;；3.&lt;a href=&quot;#example3&quot;&gt;搭建一个Resnet&lt;/a&gt;。务必保证主机已经安装Matlab 2017a及以上。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
    
      <category term="Matlab" scheme="https://www.vincentqin.tech/tags/Matlab/"/>
    
      <category term="CNN" scheme="https://www.vincentqin.tech/tags/CNN/"/>
    
      <category term="CIFAR10" scheme="https://www.vincentqin.tech/tags/CIFAR10/"/>
    
      <category term="Deep Learning" scheme="https://www.vincentqin.tech/tags/Deep-Learning/"/>
    
  </entry>
  
  <entry>
    <title>CNN框架(CNN Architectures)</title>
    <link href="https://www.vincentqin.tech/2017/11/07/CNN%E6%A1%86%E6%9E%B6-CNN-Architectures/"/>
    <id>https://www.vincentqin.tech/2017/11/07/CNN框架-CNN-Architectures/</id>
    <published>2017-11-06T16:24:45.000Z</published>
    <updated>2017-11-15T08:06:53.245Z</updated>
    
    <content type="html"><![CDATA[<center><img src="http://oofx6tpf6.bkt.clouddn.com/17-11-7/9721733.jpg" width="75%" dense-net=""></center><div class="note "><p>本文来自于CS231N（2017 Spring），将介绍几种较为常见的CNN结构。以下网络均是ImageNet比赛的冠军之作，我们将从网络结构，参数规模，运算量等来描述各个网络的特点。</p></div><a id="more"></a><ul><li>AlexNet</li><li>VGG</li><li>GoogLeNet</li><li>ResNet</li></ul><p>后续将补充以下几种网络：</p><ul><li>NiN(Network in Network)</li><li>wide ResNet</li><li>ResNeXT</li><li>stochastic Depth</li><li><a href="https://github.com/liuzhuang13/DenseNet" target="_blank" rel="external">DenseNet</a></li><li>FractalNet</li><li>SqueezeNet</li></ul><p>以下是正文。</p><h2 id="AlexNet"><a href="#AlexNet" class="headerlink" title="AlexNet"></a>AlexNet</h2><h3 id="网络结构"><a href="#网络结构" class="headerlink" title="网络结构"></a>网络结构</h3><p><img src="http://oofx6tpf6.bkt.clouddn.com/17-10-24/99013631.jpg" alt="AlexNet"><br>网络的输入大小为：227*227*3，每一层的结构以及参数设置如下：</p><div class="table-container"><table><thead><tr><th style="text-align:left">Layer Type</th><th style="text-align:left">#Filters</th><th style="text-align:left">Stride</th><th style="text-align:left">Pading</th><th style="text-align:left">OUTPUT SIZE</th><th style="text-align:left">Parameters</th></tr></thead><tbody><tr><td style="text-align:left">CONV1</td><td style="text-align:left">#96 @11*11</td><td style="text-align:left">4</td><td style="text-align:left">0</td><td style="text-align:left">55*55*96</td><td style="text-align:left">11*11*3*96</td></tr><tr><td style="text-align:left">MAXPOOL1</td><td style="text-align:left">3*3</td><td style="text-align:left">2</td><td style="text-align:left">0</td><td style="text-align:left">27*27*96</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">NORM1</td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left">27*27*96</td><td style="text-align:left">55*55*96</td></tr><tr><td style="text-align:left">CONV1</td><td style="text-align:left">#256 @5*5</td><td style="text-align:left">1</td><td style="text-align:left">2</td><td style="text-align:left">27*27*256</td><td style="text-align:left">55*55*96</td></tr><tr><td style="text-align:left">MAXPOOL2</td><td style="text-align:left">3*3</td><td style="text-align:left">2</td><td style="text-align:left">0</td><td style="text-align:left">13*13*256</td><td style="text-align:left">55*55*96</td></tr><tr><td style="text-align:left">NORM2</td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left">13*13*256</td><td style="text-align:left">55*55*96</td></tr><tr><td style="text-align:left">CONV3</td><td style="text-align:left">#384 @3*3</td><td style="text-align:left">1</td><td style="text-align:left">1</td><td style="text-align:left">13*13*384</td><td style="text-align:left">55*55*96</td></tr><tr><td style="text-align:left">CONV4</td><td style="text-align:left">#384 @3*3</td><td style="text-align:left">1</td><td style="text-align:left">1</td><td style="text-align:left">13*13*384</td><td style="text-align:left">55*55*96</td></tr><tr><td style="text-align:left">CONV5</td><td style="text-align:left">#256 @3*3</td><td style="text-align:left">1</td><td style="text-align:left">1</td><td style="text-align:left">13*13*256</td><td style="text-align:left">55*55*96</td></tr><tr><td style="text-align:left">MAXPOOL3</td><td style="text-align:left">3*3</td><td style="text-align:left">2</td><td style="text-align:left">0</td><td style="text-align:left">6*6*256</td><td style="text-align:left">55*55*96</td></tr><tr><td style="text-align:left">FC6</td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left">4096</td><td style="text-align:left">55*55*96</td></tr><tr><td style="text-align:left">FC7</td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left">4096</td><td style="text-align:left">55*55*96</td></tr><tr><td style="text-align:left">FC8</td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left">1000</td><td style="text-align:left">55*55*96</td></tr></tbody></table></div><p>The size of output image is $\frac{N-Conv+2\times Pading}{stride}+1$</p><p><img src="http://oofx6tpf6.bkt.clouddn.com/17-10-24/33818113.jpg" alt="AlexNet-details"></p><p><em>后续将使用<a href="https://cn.mathworks.com/help/nnet/examples.html?s_cid=doc_flyout#bvljehw" target="_blank" rel="external">Matlab DL 工具包</a>补充Alexnet实验…</em></p><h2 id="VGGNet"><a href="#VGGNet" class="headerlink" title="VGGNet"></a>VGGNet</h2><p>The winner of ImageNet Large Scale Visual Recognition Challenge (ILSVRC) 2014.</p><h3 id="网络结构-1"><a href="#网络结构-1" class="headerlink" title="网络结构"></a>网络结构</h3><p><strong>small filters, deeper networks</strong>。<br>将原来8层的AlexNet扩展到了16&amp;19层。卷积层的大小仅仅有3*3，stride=1，pad=1；池化层仅仅有stride=2的2*2的MAXPOOL。以下是其与AlexNet的结构对比图。<br><img src="http://oofx6tpf6.bkt.clouddn.com/17-11-6/89475867.jpg" alt="VGG"></p><p>更加具体的，VGG16的网络的参数个数以及内存消耗如下：<br><img src="http://oofx6tpf6.bkt.clouddn.com/17-11-6/31257061.jpg" alt="VGG-details"></p><p>Q：为何采用更小的CONV？<br>A：几个3*3的CONV叠加后的接受域和一个7*7大小的CONV的接受域一致，但是与此同时，<strong>网络层数变深，引入了更多的非线性，参数数量更少</strong>。（Stack of three 3x3 conv (stride 1) layers has same effective receptive field as one 7x7 conv layer，But deeper, more non-linearities. And fewer parameters: $3\times3^2C^2$ vs. $7^2C^2$ for C channels per layer）</p><h3 id="更多细节"><a href="#更多细节" class="headerlink" title="更多细节"></a>更多细节</h3><ul><li>ILSVRC’14 2nd in classification, 1st in localization Similar training</li><li>procedure as Krizhevsky 2012 No Local Response Normalisation (LRN)</li><li>Use VGG16 or VGG19 (VGG19 only slightly better, more memory) </li><li>Use ensembles for best results </li><li>FC7 features generalize well to other tasks</li></ul><h2 id="GoogLeNet"><a href="#GoogLeNet" class="headerlink" title="GoogLeNet"></a>GoogLeNet</h2><p>论文地址：<a href="https://arxiv.org/pdf/1409.4842.pdf" target="_blank" rel="external">https://arxiv.org/pdf/1409.4842.pdf</a><br>代码地址：NULL<br><strong>Deeper networks, with computational efficiency</strong>。GoogLeNet是ILSVRC’14的图像分类冠军网络，它加入了<strong>Inception</strong>模块，并且去除了全连接层，大大减少了参数的个数。</p><ul><li>22 layers (with weights)</li><li>Efficient “Inception” module</li><li>No FC layers</li><li>Only 5 million parameters! 12x less than AlexNet</li><li>ILSVRC’14 classification winner (6.7% top 5 error)</li></ul><h3 id="“Inception-module”"><a href="#“Inception-module”" class="headerlink" title="“Inception module”"></a>“Inception module”</h3><p>精心设计了一个局部网络模块，并且将这些模块叠加构成GoolgeNet。这种经过精心设计的模块就是Inception。（design a good local network topology (network within a network) and then stack these modules on top of each other）。<br>Inception包含几个接受域不同的CONV核（1*1，3*3，5*5）以及池化操作（3*3）；最终将这些操作后的输出在depth方向串联。以下是两种两种不同的实现方式，左图时原始的inception模块，右图是改进版的inception模块。<br><img src="http://oofx6tpf6.bkt.clouddn.com/17-11-6/33298717.jpg" alt="inception"><br>对于naive inception而言，它面临这运算量巨大的问题。由于池化层的输出会保留原始输入的depth，所以经过CONV&amp;MAXPOOL过后的输出的feature map势必比原始输入的depth更深。<br><img src="http://oofx6tpf6.bkt.clouddn.com/17-11-6/53626485.jpg" alt="inception-naive"><br>那么如何去解决以上问题呢，一个通常的方式就是降维。我们在每个CONV前加上1*1的CONV（“bottleneck” layers）来减少feature map的维度。所谓的1*1CONV就是在保持输入的空间分辨率不变的情况下来减小depth维度，即通过将不同depth上的feature map进行组合，从而将输入的feature map映射到更低的depth维度上。经过以上操作就可以将运算的操作次数大大降低。<br><img src="http://oofx6tpf6.bkt.clouddn.com/17-11-6/95592762.jpg" alt="inception-improve"></p><p>于是GoogLeNet的全貌如下：<br><img src="http://oofx6tpf6.bkt.clouddn.com/17-11-6/75689322.jpg" alt="googlenet"></p><h2 id="ResNet"><a href="#ResNet" class="headerlink" title="ResNet"></a>ResNet</h2><p>利用<strong>残差</strong>连接成的超级深网络。<br>这里有一个何凯明在ICML2016的Tutorial，内容比较详细。<a href="http://kaiminghe.com/icml16tutorial/index.html" target="_blank" rel="external">ICML 2016 Tutorial on Deep Residual Networks</a><br>代码在这里<a href="https://github.com/KaimingHe/deep-residual-networks" target="_blank" rel="external">Code: deep-residual-networks</a></p><h3 id="概况"><a href="#概况" class="headerlink" title="概况"></a>概况</h3><ul><li>152-layer model for ImageNet</li><li>ILSVRC’ 15 classification winner (3.57% top 5 error)</li><li>Swept all classification and detection competitions in ILSVRC’ 15 and COCO’ 15!</li></ul><h3 id="深度增加带来的问题"><a href="#深度增加带来的问题" class="headerlink" title="深度增加带来的问题"></a>深度增加带来的问题</h3><p><img src="http://oofx6tpf6.bkt.clouddn.com/17-11-6/22279699.jpg" alt="deeper-nets-problems"><br>从上图可以发现，当网络层数增加时，训练误差和测试误差都有所下降。这并不符合以往的经验，我们会想，既然网络层数增加了，那么模型参数势必增多，此时会造成过拟合。然而过拟合的表现是：训练误差减小，测试误差增大。但是事实和分析并不吻合。<br>何凯明认为：<strong>The problem is an optimization problem, deeper models are harder to optimize</strong>。这是一个优化问题，更深的网络更难优化。并且，更深的网络应该至少比浅层网络不差，这是因为我们可以通过拷贝浅层网络+identity mapping（恒等映射）来构造一个更深的网络，这个结构化的方案表明深层网络可以达到和浅层网络一致的性能。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p><img src="http://oofx6tpf6.bkt.clouddn.com/17-11-6/63404628.jpg" alt="resnet-layer"><br>Use network layers to fit a residual mapping instead of directly trying to fit a desired underlying mapping.<br>作者假设：<strong>相较于最优化最初的无参照映射（残差函数以输入x作为参照），最优化残差映射是更容易的</strong>。利用网络去拟合残差$F(x)$，并非直接拟合$H(x)$。</p><h3 id="整个ResNet框架"><a href="#整个ResNet框架" class="headerlink" title="整个ResNet框架"></a>整个ResNet框架</h3><p><img src="http://oofx6tpf6.bkt.clouddn.com/17-11-6/82101608.jpg" alt="resnet-structure"></p><ul><li>Stack residual blocks</li><li>Every residual block has two 3x3 conv layers</li><li>Periodically, double # of filters and downsample spatially using stride 2 (/2 in each dimension)</li><li>Additional conv layer at the beginning</li><li>No FC layers at the end (only FC 1000 to output classes)</li></ul><p>对于ImageNet比赛而言，ResNet设置的网络深度有34、50、101以及152层。对于层数较多的网络，利用“bottleneck”（类似于GoogLeNet的1*1卷积操作）来提高效率。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>论文<a href="https://arxiv.org/pdf/1605.07678.pdf" target="_blank" rel="external">An Analysis of Deep Neural Network Models for Practical Applications</a> 比较了2016年以来的一些神经网络的规模、运算量、能耗以及精度等项目。<br><img src="http://oofx6tpf6.bkt.clouddn.com/17-11-6/40479799.jpg" alt="complexity-compare"><br>可以从上图总结出以下几点：</p><ul><li>GoogLeNet: most efficient</li><li>VGG: Highest memory, most operations</li><li>AlexNet: Smaller compute, still memory heavy, lower accuracy</li><li>ResNet: Moderate efficiency depending on model, highest accuracy</li></ul><h2 id="其他网络变体"><a href="#其他网络变体" class="headerlink" title="其他网络变体"></a>其他网络变体</h2><p>后续补充。</p><h2 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h2><ul><li><strong><font color="red">ResNet为何能够使网络层数更深，应如何正确理解残差网络？He是受何启发从而发明了这种结构？</font></strong></li><li>more questions will be added…</li></ul><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol><li><a href="http://deeplearning.net/" target="_blank" rel="external">DeepLearning.net</a></li><li><a href="http://deeplearning.net/reading-list/" target="_blank" rel="external">Reading List</a></li><li><a href="http://papers.nips.cc/paper/4824-imagenet-classification-with-deep-convolutional-neural-networks.pdf" target="_blank" rel="external">ImageNet Classification with Deep Convolutional Neural Networks</a></li><li><a href="https://zhuanlan.zhihu.com/p/28124810" target="_blank" rel="external">为什么ResNet和DenseNet可以这么深？一文详解残差块为何有助于解决梯度弥散问题</a></li><li><a href="https://arxiv.org/pdf/1605.07678.pdf" target="_blank" rel="external">An Analysis of Deep Neural Network Models for Practical Applications</a></li><li><a href="http://cs231n.stanford.edu/" target="_blank" rel="external">CS231n: Convolutional Neural Networks for Visual Recognition</a></li><li><a href="https://arxiv.org/pdf/1608.06993.pdf" target="_blank" rel="external">Densely Connected Convolutional Networks</a></li><li><a href="http://kaiminghe.com/icml16tutorial/icml2016_tutorial_deep_residual_networks_kaiminghe.pdf" target="_blank" rel="external">Deep Residual Networks (Deep Learning Gets Way Deeper)</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;&lt;img src=&quot;http://oofx6tpf6.bkt.clouddn.com/17-11-7/9721733.jpg&quot; width=&quot;75%&quot; Dense-Net&gt;&lt;/center&gt;

&lt;div class=&quot;note &quot;&gt;&lt;p&gt;本文来自于CS231N（2017 Spring），将介绍几种较为常见的CNN结构。以下网络均是ImageNet比赛的冠军之作，我们将从网络结构，参数规模，运算量等来描述各个网络的特点。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
    
      <category term="AlexNet" scheme="https://www.vincentqin.tech/tags/AlexNet/"/>
    
      <category term="VGG" scheme="https://www.vincentqin.tech/tags/VGG/"/>
    
      <category term="GoogLeNet" scheme="https://www.vincentqin.tech/tags/GoogLeNet/"/>
    
      <category term="ResNet" scheme="https://www.vincentqin.tech/tags/ResNet/"/>
    
  </entry>
  
  <entry>
    <title>理解LSTM网络【译】</title>
    <link href="https://www.vincentqin.tech/2017/10/23/%E7%90%86%E8%A7%A3LSTM%E7%BD%91%E7%BB%9C%E3%80%90%E8%AF%91%E3%80%91/"/>
    <id>https://www.vincentqin.tech/2017/10/23/理解LSTM网络【译】/</id>
    <published>2017-10-23T13:26:20.000Z</published>
    <updated>2017-10-30T16:22:17.303Z</updated>
    
    <content type="html"><![CDATA[<center><img src="/2017/10/23/理解LSTM网络【译】/LSTM3-chain.png" alt="LSTM" title="LSTM"></center><p>本文是我对大神<a href="http://colah.github.io/about.html" target="_blank" rel="external">Christopher Olah</a>的<a href="http://colah.github.io/posts/2015-08-Understanding-LSTMs/" target="_blank" rel="external">Understanding LSTM Networks</a>的译文。<br><a id="more"></a></p><h2 id="循环神经网络（Recurrent-Neural-Networks）"><a href="#循环神经网络（Recurrent-Neural-Networks）" class="headerlink" title="循环神经网络（Recurrent Neural Networks）"></a>循环神经网络（Recurrent Neural Networks）</h2><p>人们并非每时每刻都在大脑一片空白时开始思考。当我们读这篇文章的时候，我们会根据之前学习的知识来理解当前你在阅读的内容。我们不是把原来的知识丢的一干二净来重新学习，我们的记忆有一定的<strong>持久性</strong>。<br>传统的神经网络做不到这些，这是它的一大缺陷。比如说，可以想象有这样一种情况，我们想知道一部电影的每一帧画面正在发生什么。使用传统的神经网络很难通过理解电影之前的画面来推断以后将要发生的事件。（传统的神经网络不能处理带有时序的样本）<br>循环神经网络（Recurrent Neural Networks）尝试解决了以上问题。这种网络是一种带有循环结构的网络，可以使得信息得以持久保持。</p><center><img src="RNN-rolled.png" width="15%" rnn有循环结构=""></center><p>上图是一个RNN模块，$A$读取输入$x_i$，同时输出$h_t$，$A$这个循环允许信息从网络的当前步骤传递到下一步骤。<br>上述过程把RNN的过程讲的有些神秘感。但是，如果我们仔细想想，这也不比一个正常的神经网络难以理解。一个RNN可以看成是多个相同网络的拷贝，每一个拷贝都会向后续网络传递信息，下图我们把RNN展开。<br><img src="RNN-unrolled.png" alt="展开RNN"><br>这种链式的特性揭示了RNN与序列和列表有关，RNN是对这些数据最自然的表达。RNN目前已经被广泛使用！在过去的几年间，RNN在很多领域都有着出色的表现：语音识别，语言建模，翻译，图像描述…推荐大家阅读大神Andrej Karpathy的博文<a href="http://karpathy.github.io/2015/05/21/rnn-effectiveness/" target="_blank" rel="external"> The Unreasonable Effectiveness of Recurrent Neural Networks</a>，来领略下RNN的诸多应用，这简直不能太棒！<br>以上的成功案例离不开使用<strong>长短期记忆</strong>（LSTM: Long Short Term Memory）网络，这是一种特殊的RNN网络并且能够应对更多任务，相比于标准的RNN网络，它具有更为出色的表现。几乎所有的RNN都是基于LSTM来实现的，接下来我们讨论下LSTM的奥义。</p><h2 id="长期依赖（Long-Term-Dependencies）问题"><a href="#长期依赖（Long-Term-Dependencies）问题" class="headerlink" title="长期依赖（Long-Term Dependencies）问题"></a>长期依赖（Long-Term Dependencies）问题</h2><p>RNNs的要求之一就是它能够连接之前的信息到当前的任务之上，例如利用之前的视频帧来理解当前帧的内容。如果RNNs能够做到这一点的话，它将会超级有用。但是它真的可以吗？看情况而定。<br>有时，我们仅仅需要离当前任务最近的几个任务信息。例如，我们有一个<strong>语言模型</strong>，它的目标是根据当前已有的词语去预测接下来将要出现的词语。如果我们尝试去预测“the clouds are in the sky”中的最后一个单词，我们不需要任何更多的语料，很明显最后一个单词将会是“sky”。在这种情况下，相关信息和当前需要预测词的位置的间隔是非常小的，这时RNNs可以去利用过去的信息。<br><img src="RNN-shorttermdepdencies.png" alt="短期记忆"><br>但是也有一种情况是，我们需要更多的信息才能够做预测。例如我们的<strong>语言模型</strong>需要预测下面句子的最后一个单词“I grew up in France… I speak fluent French.”。从相邻近的几个单词可以推断最后一个单词可能是一种语言，但如果我们想要知道到底是哪种语言的话，我们需要句子最前面的一个单词“France”。这会使得相关信息以及需要预测词的位置的间隔变得很大。<br>遗憾的是，随着间隔的逐渐增大，RNNs不能够去关联有用的信息。<br><img src="RNN-longtermdependencies.png" alt="长期记忆"><br>在理论上，RNNs能够解决长期依赖的问题。人们可以通过仔细选取参数来解决这类问题。但是实际上RNNs并不能去解决这个问题。<a href="http://people.idsia.ch/~juergen/SeppHochreiter1991ThesisAdvisorSchmidhuber.pdf" target="_blank" rel="external"> Hochreiter (1991) [German] and Bengio(1994)</a>等人深入研究了该问题为何如此艰难。<br>阿弥陀佛，LSTMs并没有上述问题。</p><h2 id="LSTM网络"><a href="#LSTM网络" class="headerlink" title="LSTM网络"></a>LSTM网络</h2><p>长短期记忆网络——经常被叫做“LSTM”——是RNN的这一种特殊的形式，它能够解决长期依赖的问题。LSTM是由<a href="https://www.researchgate.net/publication/13853244_Long_Short-term_Memory" target="_blank" rel="external">Hochreiter &amp; Schmidhuber (1997)</a>提出，并由很多后来者完善以及推广。LSTM能够在很多问题上取得优秀的结果，现如今被广泛引用。<br>LSTM被设计成防止长期依赖问题的发生。在实践中，LSTM的长期记忆是默认行为，而并非艰苦习得！所有的RNN都有链式重复的神经网络模块。在标准的RNN中，这些重复的模块仅仅有简单的结构，例如$tanh$层。<br><img src="LSTM3-SimpleRNN.png" alt="标准RNN中重复的简单模块"><br>当然，LSTM中也存在这样的链式结构，但是其中的重复模块就大为不同了。LSTM的重复的模块中包含4种不同的层，它们以一种特殊的结构交错着。<br><img src="LSTM3-chain.png" alt="LSTM中重复的模块中包含4种不同层"><br>看不懂，不用担心，细节即将展开。接下来，我们会一步步来讲解LSTM的网络结构。首先我们先明确几个会经常用到的表示方法。<br><img src="LSTM2-notation.png" alt=""><br>在以上的图示中，每条实线传输着整个向量，从一个节点的输出到其他节点的输入。粉红色的圆圈表示的是<strong>逐点操作</strong>，例如向量的加法，黄色的方形表示已经学习了的网络层。汇集的线表示<strong>串联</strong>，分叉的线表示<strong>复制</strong>操作，这些复制的内容流向不同的位置。</p><h2 id="LSTM背后的核心技术"><a href="#LSTM背后的核心技术" class="headerlink" title="LSTM背后的核心技术"></a>LSTM背后的核心技术</h2><p>LSTM的关键技术在于细胞（cell）状态，也就是图表中最上方水平穿行的直线。细胞状态可以理解成是一种传送带。它仅仅以少量的线性相交，贯穿整个链式结构上方。信息沿着这条传动带很容易保持不变。<br><img src="LSTM3-C-line.png" alt=""><br>LSTM有一种能向细胞增加或者移除信息的能力，这种经过精心设计的结构称作<strong>门</strong>（gates）。所谓的门就是一种让信息选择性通过的方法。它是由一个$sigmoid$层和一个逐点乘法单元构成。如下图：</p><center><img src="LSTM3-gate.png" width="15%" rnn有循环结构=""></center><p>$sigmoid$层的输出是$0$-$1$之间的数字，它描述了每个部分可以有多少量能够通过。$0$代表“啥都不能通过”，$1$代表“啥都能通过”！一个LSTM有三种这样的门结构，用来保证以及控制细胞状态。</p><h2 id="逐步理解LSTM"><a href="#逐步理解LSTM" class="headerlink" title="逐步理解LSTM"></a>逐步理解LSTM</h2><p>LSTM的第一步是来决定<strong>啥信息将要从细胞状态中丢弃</strong>。这个决定是由一个叫做“遗忘门”（“forget gate layer”）的$sigmoid$层来决定。它的输入是$h_{t-1}$和$x_t$，输出是一个介于$0$到$1$之间数值，给每个在状态$C_{t-1}$的数值。$1$表示“完全保留”，$0$表示“完全丢弃”。<br>让我们回到之前的的语言模型的例子中，我们还是基于以前的词语来预测后续的单词。在这样一个问题中，细胞状态可能会包含当前主语的性别信息，所以正确的<strong>介词</strong>将会被使用。当我们看到一个新的主语时，我们要遗忘掉旧的的主语。<br><img src="LSTM3-focus-f.png" alt=""></p><p>下一步就是决定<strong>啥新信息将要存储在细胞状态中</strong>。这包括两个方面。第一，一个叫做“输入门层”的$sigmoid$层来决定哪些值我们要更新；第二，一个$tanh$层创造了新的候选值$\tilde{C}_t$，这个值将会加入到新的状态中去。进一步，我们要把上述两个方面结合起来来更新细胞状态。<br>在我们的语言模型中，我们想要在新的主语对应的细胞状态中加入性别信息，去代替我们遗忘掉的那个旧主语状态。<br><img src="LSTM3-focus-i.png" alt=""></p><p>我们现在更新旧的细胞状态，从状态$C_{t-1}$到状态$C_{t}$。上述步骤已经详述了具体如何操作，我们现在就开始更新！<br>我们将旧的细胞状态乘以$f_t$，目的是忘记我们要忘记的旧状态。然后我们加上$i_t*\tilde{C}_t$，这就是我们创造新的候选值，这个值根据我们想要更新每个状态值的程度进行伸缩变化（这就是$i_t$的意义）。<br>在我们的语言模型中，这就是我们根据最开始确定的目标，丢弃旧主语性别以及增加新主语信息的地方。<br><img src="LSTM3-focus-C.png" alt=""></p><p>最后一步我们要决定到底输出什么信息。这个输出信息会基于细胞状态，但将会是一个经过过滤后的结果。首先，我们用一个$sigmoid$层去决定细胞状态的哪一部分将会被输出。然后，我们将细胞状态通过$tanh$（将其值规范到$-1$到$1$之间）。最后我们将这个值与$sigmoid$输出相乘，这样我们仅仅输出我们想要输出的部分。<br>还是对于之前提到的语言模型，因为它只看到了一个主语，它可能会输出一个与动词相关的信息。例如，可能输出这个主语是单数还是复数，所以我们会知道紧跟的动词是何种形式。<br><img src="LSTM3-focus-o.png" alt=""><br>至此，基本的LSTM介绍完毕。</p><h2 id="LSTM的变体"><a href="#LSTM的变体" class="headerlink" title="LSTM的变体"></a>LSTM的变体</h2><p>我们以上描述的均是最为普通的LSTM。但是并不是所有的LSTM都是以上那个样子。事实上，似乎每一篇涉及LSTMs的论文均对其做了细微的修改。其中的差别不大，以下列举几种LSTM的变体。</p><p>其中之一就是一种特别流行的LSTM变体，它由<a href="ftp://ftp.idsia.ch/pub/juergen/TimeCount-IJCNN2000.pdf" target="_blank" rel="external"> Gers &amp; Schmidhuber (2000)</a>提出，加入一种<strong>窥视孔连接</strong>（peephole connections）的结构。这使得细胞状态可以作为门层（译者：gete layers:$sigmoid$ layers &amp; $tanh$ layer）输入。<br><img src="LSTM3-var-peepholes.png" alt=""><br>以上的图示为每个门层加入了窥视孔连接，但是也有一些论文并不是所有的门层都加。</p><p>另外一种变体是加入了双遗忘门（coupled forget）以及输入门。我们同时考虑了何时遗忘以及应该加入何种新信息，而并非分别考虑。我们仅仅在我们需要就地输入信息的时候才会遗忘，同时我们仅仅在遗忘掉旧的信息的时候才会加入新的信息（译者：此时$f_t=0$，表示遗忘旧的细胞状态，同时加入新的输入$\tilde{C}_t$）。<br><img src="LSTM3-var-tied.png" alt=""></p><p>另外一种改动较大的变体是门控循环单元（Gated Recurrent Unit）即GRU。这个算法由<a href="http://arxiv.org/pdf/1406.1078v3.pdf" target="_blank" rel="external">Cho,et al.(2014)</a>提出，它把遗忘门和输入门结合起来构成一个“更新门”（update gate）。与此同时，它还将细胞状态和隐含状态合并起来，当然还有一些其他变化在此不一一赘述。最终的变体比标准的LSTM简单，这使得它很受欢迎。<br><img src="LSTM3-var-GRU.png" alt=""></p><p>以上均是最近比较劲爆的LSTM变体。当然也有很多其他形式的变体，如<a href="http://arxiv.org/pdf/1508.03790v2.pdf" target="_blank" rel="external">Yao,et al. (2015)</a>提出的<strong>深度门RNN</strong>（Depth Gated RNNs）。还有一些变体用完全不同的方式来解决长期依赖问题，例如<a href="http://arxiv.org/pdf/1402.3511v1.pdf" target="_blank" rel="external">Koutnik,et al.(2014)</a>提出的<strong>时钟频率驱动RNN</strong>（Clockwork RNNs ）。</p><p>列举了诸多LSTM变体，那么到底哪一种变体是最好的呢？其中的差异真的很重要吗？<a href="http://arxiv.org/pdf/1503.04069.pdf" target="_blank" rel="external">Greff, et al.(2015)</a>做了一个非常棒了比较，发现这些变体几乎都是一样一样的。<a href="http://jmlr.org/proceedings/papers/v37/jozefowicz15.pdf" target="_blank" rel="external">Jozefowicz,et al.(2015)</a>测试了上万种RNN框架，发现了一些框架在特定任务上会比LSTM表现出色。（译者：没有一种算法一统江湖）</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>以上，我提到了人们利用RNNs得到了很多优秀的结果。在本质上说，几乎所有的RNNs都使用了LSTMs。LSTMs在诸多任务上表现优异。<br>在介绍LSTMs的过程中写了很多公式，这让它看起来很吓人。幸运的是，我们在文中通过一步步地探索，让LSTM看起来平易近人。<br>LSTMs是我们完成RNNs的重大成果。我们很自然地想：还有没有其他的重大成果？研究员们的共识是：当然有！下一个重大成果就是——<strong>注意力</strong>。这个观点是让RNNs的每一步都能够从更大的数据集中挑选信息。例如，如果你想利用RNNs去给一幅图像创造标题来描述它，这就可能会选择图像的一部分作为输入，然后根据这些输入来得到每个单词。事实上，<a href="http://arxiv.org/pdf/1502.03044v2.pdf" target="_blank" rel="external">Xu,et al.(2015)</a>就是这么做的——这可能你探究<strong>注意力</strong>这个领域的起点。还有诸多使用<strong>注意力</strong>取得的令人激动的研究结果，看起来还有更多需要探索。<br><strong>注意力</strong>并非RNN唯一令人激动的研究方向。例如，<a href="http://arxiv.org/pdf/1507.01526v1.pdf" target="_blank" rel="external">Kalchbrenner, et al. (2015)</a>提出的网格LSTM（Grid LSTMs）看似非常有前景。<a href="http://arxiv.org/pdf/1502.04623.pdf" target="_blank" rel="external">Gregor, et al.(2015)</a>，<a href="http://arxiv.org/pdf/1506.02216v3.pdf" target="_blank" rel="external">Chung, et al.(2015)</a>和<a href="http://arxiv.org/pdf/1411.7610v3.pdf" target="_blank" rel="external"> Bayer &amp; Osendorfer (2015)</a>等人的研究工作是在生成模型中使用RNNs，这些工作都看起来非常有趣。过去几年是RNNs异常火爆的时期，未来也会有更多更加有意义的成果出现。</p><h2 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h2><p>我非常感谢那些帮助我去理解LSTMs的大佬们，同时感谢对可视化进行评论并在这篇博文提供反馈的网友们。非常感激谷歌同事们的反馈，尤其感谢<a href="http://research.google.com/pubs/OriolVinyals.html" target="_blank" rel="external">Oriol Vinyals</a>，<a href="http://research.google.com/pubs/GregCorrado.html" target="_blank" rel="external">Greg Corrado</a>，<a href="http://research.google.com/pubs/JonathonShlens.html" target="_blank" rel="external">Jon Shlens</a>，<a href="http://people.cs.umass.edu/~luke/" target="_blank" rel="external">Luke Vilnis</a>以及<a href="http://www.cs.toronto.edu/~ilya/" target="_blank" rel="external">Ilya Sutskever</a>。我也由衷感谢很多同事朋友的帮助，包括<a href="https://www.linkedin.com/pub/dario-amodei/4/493/393" target="_blank" rel="external">Dario Amodei</a>和<a href="http://cs.stanford.edu/~jsteinhardt/" target="_blank" rel="external">Jacob Steinhardt</a>。值得特别感谢还有<a href="http://www.kyunghyuncho.me/" target="_blank" rel="external">Kyunghyun Cho</a>，这哥们对图表的绘制给了我极大的帮助。<br>在写这篇博文之前，我尝试在我讲授的神经网络课程中利用两系列研讨会的时间来解释LSTMs。感谢每一位参与者，感觉大家的反馈。</p>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;&lt;img src=&quot;/2017/10/23/理解LSTM网络【译】/LSTM3-chain.png&quot; alt=&quot;LSTM&quot; title=&quot;LSTM&quot;&gt;&lt;/center&gt;

&lt;p&gt;本文是我对大神&lt;a href=&quot;http://colah.github.io/about.html&quot;&gt;Christopher Olah&lt;/a&gt;的&lt;a href=&quot;http://colah.github.io/posts/2015-08-Understanding-LSTMs/&quot;&gt;Understanding LSTM Networks&lt;/a&gt;的译文。&lt;br&gt;
    
    </summary>
    
      <category term="LSTM" scheme="https://www.vincentqin.tech/categories/LSTM/"/>
    
    
      <category term="CNN" scheme="https://www.vincentqin.tech/tags/CNN/"/>
    
      <category term="LSTM" scheme="https://www.vincentqin.tech/tags/LSTM/"/>
    
      <category term="RNN" scheme="https://www.vincentqin.tech/tags/RNN/"/>
    
  </entry>
  
  <entry>
    <title>降维之PCA主成分分析原理</title>
    <link href="https://www.vincentqin.tech/2017/10/02/%E9%99%8D%E7%BB%B4%E4%B9%8BPCA%E4%B8%BB%E6%88%90%E5%88%86%E5%88%86%E6%9E%90%E5%8E%9F%E7%90%86/"/>
    <id>https://www.vincentqin.tech/2017/10/02/降维之PCA主成分分析原理/</id>
    <published>2017-10-02T05:22:25.000Z</published>
    <updated>2017-10-30T16:22:17.350Z</updated>
    
    <content type="html"><![CDATA[<center><img src="/2017/10/02/降维之PCA主成分分析原理/logo.png" alt="PCA" title="PCA"></center><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在许多领域的研究与应用中，往往需要对反映事物的多个变量进行大量的观测，收集大量数据以便进行分析寻找规律。多变量大样本无疑会为研究和应用提供了丰富的信息，但也在一定程度上增加了数据采集的工作量，更重要的是在多数情况下，许多变量之间可能存在相关性，从而增加了问题分析的复杂性，同时对分析带来不便。如果分别对每个指标进行分析，分析往往是孤立的，而不是综合的。盲目减少指标会损失很多信息，容易产生错误的结论。<br>因此需要找到一个合理的方法，在减少需要分析的指标同时，尽量减少原指标包含信息的损失，以达到对所收集数据进行全面分析的目的。由于各变量间存在一定的相关关系，因此有可能用较少的综合指标分别综合存在于各变量中的各类信息。主成分分析与因子分析就属于这类降维的方法。</p><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>PCA（Principal Component Analysis）是一种常用的数据分析方法。PCA通过线性变换将原始数据变换为一组各维度线性无关的表示，可用于提取数据的主要特征分量，常用于高维数据的降维。能够对高维数据降维的算法包括：</p><ul><li>LASSO</li><li>主成分分析法</li><li>聚类分析</li><li>小波分析法</li><li>线性判别法</li><li>拉普拉斯特征映射</li></ul><h2 id="降维有什么作用"><a href="#降维有什么作用" class="headerlink" title="降维有什么作用"></a>降维有什么作用</h2><p>降维有什么作用呢？</p><ul><li>数据在低维下更容易处理、更容易使用</li><li>相关特征，特别是重要特征更能在数据中明确的显示出来；如果只有两维或者三维的话，更便于可视化展示</li><li>去除数据噪声</li><li>降低算法开销</li></ul><p>常见的降维算法有主成分分析（principal component analysis,PCA）、因子分析（Factor Analysis）和独立成分分析（Independent Component Analysis，ICA）。</p><center></center><h2 id="优化目标"><a href="#优化目标" class="headerlink" title="优化目标"></a>优化目标</h2><p>将一组N维向量降为K维（K大于0，小于N），其目标是选择K个单位（模为1）正交基，使得原始数据变换到这组基上后，各字段两两间协方差为0，而字段的方差则尽可能大（在正交的约束下，取最大的K个方差）。<br>注意：PCA的变换矩阵是协方差矩阵，K-L变换的变换矩阵可以有很多种（二阶矩阵、协方差矩阵、总类内离散度矩阵等等）。当K-L变换矩阵为协方差矩阵时，等同于PCA。</p><h2 id="PCA原理"><a href="#PCA原理" class="headerlink" title="PCA原理"></a>PCA原理</h2><center><img src="/2017/10/02/降维之PCA主成分分析原理/projection.png" alt="projection.png" title=""></center><p>最大化样本点在基上的投影，使得数据点尽量的分离。令第一主成分的方向是<script type="math/tex">u_1</script>，我们的目标就是将样本点在该方向上的投影最大化，即：</p><script type="math/tex; mode=display">\max \frac{1}{n}\sum_{i=1}^n<u_1,x_i>^2</script><script type="math/tex; mode=display"> \frac{1}{n}\sum_{i=1}^n<u_1,x_i> \rightarrow \frac{1}{n}\sum_{i=1}^n(x_1^Tu_1)^2=\frac{1}{n}\sum_{i=1}^n(x_1^Tu_1)^T(x_1^Tu_1)</script><script type="math/tex; mode=display">=\frac{1}{n}\sum_{i=1}^n(u_1^Tx_1x_1^Tu_1)=\frac{1}{n}u_1^T\left(\sum_{i=1}^nx_1x_1^T\right)u_1=\frac{1}{n}u_1^T\left(XX^T\right)u_1</script><p>其中的<script type="math/tex">X=[x_1,x_2,...,x_n]^T,x_i\in R^{m}</script>。那么优化函数就变成了：</p><script type="math/tex; mode=display">\max u_1^T\left(XX^T\right)u_1</script><p>以上式子是个二次型，可以证明<script type="math/tex">XX^T</script>是半正定矩阵，所以上式必然有最大值。</p><script type="math/tex; mode=display">\max u_1^T\left(XX^T\right)u_1=\max ||X^Tu_1||_2^2</script><h2 id="优化函数"><a href="#优化函数" class="headerlink" title="优化函数"></a>优化函数</h2><script type="math/tex; mode=display">max||Wx||_2</script><script type="math/tex; mode=display">s.t.  W^TW=I</script><p>解释：<strong>最大化方差同时最小化协方差</strong>（PCA本质上是将方差最大的方向作为主要特征，并且在各个正交方向上将数据“离相关”）。最大化方差意味着，使得每个样本点在每个维度上与均值有很大差异，就是说非常有个性，有个性才能分辨出来；同时协方差越小的话表明样本之间的互相影响就非常小，如果协方差是0的话，表示两个字段完全独立。</p><center><img src="/2017/10/02/降维之PCA主成分分析原理/explain.gif" alt="explain.gif" title=""></center><p>寻找协方差矩阵的特征向量和特征值就等价于拟合一条能保留最大方差的直线或主成分。因为特征向量追踪到了主成分的方向，而最大方差和协方差的轴线表明了数据最容易改变的方向。根据上述推导，我们发现达到优化目标就等价于将协方差矩阵对角化：即除对角线外的其它元素化为0，并且在对角线上将特征值按大小从上到下排列。协方差矩阵作为实对称矩阵，其主要性质之一就是可以正交对角化，因此就一定可以分解为特征向量和特征值。</p><h2 id="具体实施步骤"><a href="#具体实施步骤" class="headerlink" title="具体实施步骤"></a>具体实施步骤</h2><p>总结一下PCA的算法步骤，设有<script type="math/tex">m</script>条<script type="math/tex">n</script>维(字段数)数据，我们采用以下步骤对数据降维。</p><ol><li>将原始数据按列组成<script type="math/tex">n</script>行<script type="math/tex">m</script>列矩阵X. (行数代表字段数目，一个字段就是取每个样本的该维度的数值；列数代表样本数目)</li><li>将<script type="math/tex">X</script>的每一行（代表一个属性字段）进行零均值化，即减去这一行的均值</li><li>求出协方差矩阵<script type="math/tex">C=\frac{1}{m}XX^T</script></li><li>求出协方差矩阵的特征值及对应的特征向量</li><li>将特征向量按对应特征值大小从上到下按行排列成矩阵，取前k行组成矩阵P</li><li><script type="math/tex">Y=PX</script>即为降维到k维后的数据</li></ol><h2 id="去均值化的目的"><a href="#去均值化的目的" class="headerlink" title="去均值化的目的"></a>去均值化的目的</h2><p>下面两幅图是数据做中心化（centering）前后的对比，可以看到其实就是一个平移的过程，平移后所有数据的中心是<script type="math/tex">(0,0)</script>.</p><center><img src="/2017/10/02/降维之PCA主成分分析原理/centering_1.jpg" alt="centering_1.jpg" title=""></center><p>在做PCA的时候，我们需要找出矩阵的特征向量，也就是主成分（PC）。比如说找到的第一个特征向量是a = [1, 2]，a在坐标平面上就是从原点出发到点（1，2）的一个向量。如果没有对数据做中心化，那算出来的第一主成分的方向可能就不是一个可以“描述”（或者说“概括”）数据的方向了。还是看图比较清楚。</p><center><img src="/2017/10/02/降维之PCA主成分分析原理/centering_2.jpg" alt="centering_2.jpg" title=""></center><p>黑色线就是第一主成分的方向。只有中心化数据之后，计算得到的方向才能比较好的“概括”原来的数据。</p><h2 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h2><p>PCA虽可以很好的解除线性相关，但是对于高阶相关性就没有办法了，对于存在高阶相关性的数据，可以考虑Kernel PCA，通过Kernel函数将非线性相关转为线性相关。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="http://blog.codinglabs.org/articles/pca-tutorial.html" target="_blank" rel="external">PCA的数学原理 </a></li><li><a href="http://blog.csdn.net/oldmonkeyyu_s/article/details/45766543" target="_blank" rel="external"> K-L变换和PCA的区别</a></li><li><a href="http://blog.csdn.net/Dark_Scope/article/details/53150883" target="_blank" rel="external">从PCA和SVD的关系拾遗</a></li><li><a href="https://www.zhihu.com/question/37069477/answer/132387124" target="_blank" rel="external">数据什么时候需要做中心化和标准化处理</a></li><li><a href="http://blog.jobbole.com/109015/" target="_blank" rel="external">主成分分析（PCA）原理详解</a></li></ol><p>附上最近比较火的一首歌<strong><font color="red">Time</font></strong></p><center><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="45" height="86" src="//music.163.com/outchain/player?type=2&id=33035611&auto=0&height=66"></iframe></center>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;&lt;img src=&quot;/2017/10/02/降维之PCA主成分分析原理/logo.png&quot; alt=&quot;PCA&quot; title=&quot;PCA&quot;&gt;&lt;/center&gt;
    
    </summary>
    
      <category term="机器学习" scheme="https://www.vincentqin.tech/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="https://www.vincentqin.tech/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="PCA" scheme="https://www.vincentqin.tech/tags/PCA/"/>
    
      <category term="LDA" scheme="https://www.vincentqin.tech/tags/LDA/"/>
    
      <category term="降维" scheme="https://www.vincentqin.tech/tags/%E9%99%8D%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>SIFT和SURF特性提取总结</title>
    <link href="https://www.vincentqin.tech/2017/10/01/SIFT%E5%92%8CSURF%E7%89%B9%E6%80%A7%E6%8F%90%E5%8F%96%E6%80%BB%E7%BB%93/"/>
    <id>https://www.vincentqin.tech/2017/10/01/SIFT和SURF特性提取总结/</id>
    <published>2017-10-01T02:18:01.000Z</published>
    <updated>2017-10-30T16:22:15.874Z</updated>
    
    <content type="html"><![CDATA[<center><img src="/2017/10/01/SIFT和SURF特性提取总结/match_before_v2.png" alt="Lane+One Punch Man" title="Lane+One Punch Man"></center><blockquote><p>SIFT（Scale-invariant feature transform）是一种检测局部特征的算法，该算法通过求一幅图中的特征点（interest points,or corner points）及其有关<strong>scale</strong> 和 <strong>orientation</strong> 的描述子得到特征并进行图像特征点匹配</p></blockquote><a id="more"></a><h2 id="什么是SIFT"><a href="#什么是SIFT" class="headerlink" title="什么是SIFT"></a>什么是SIFT</h2><p>先看看上图利用sift进行匹配的结果：</p><center><img src="/2017/10/01/SIFT和SURF特性提取总结/matches_adjust_contrast.png" alt="Lane+One Punch Man Matches Result" title="Lane+One Punch Man Matches Result"></center><p>这个结果应该可以很好的解释sift的尺度、旋转以及光照不变性。接下来就介绍一下这个神奇的算法的奥义。我把代码放在了<a href="https://github.com/Vincentqyw/siftDemo" target="_blank" rel="external">Github</a>，感兴趣的同学自己下载下来试试。</p><h3 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h3><p>SIFT特征具有尺度不变性，旋转不变性，光照不变性。</p><h3 id="实现流程"><a href="#实现流程" class="headerlink" title="实现流程"></a>实现流程</h3><h4 id="构建尺度空间"><a href="#构建尺度空间" class="headerlink" title="构建尺度空间"></a>构建尺度空间</h4><p>尺度空间的目的是模拟图像的多尺度特性。<br><strong>高斯卷积核是实现尺度变换的唯一线性核</strong>，于是 一副二维图像的尺度空间定义为：</p><script type="math/tex; mode=display">L(x,y,\sigma)=G(x,y,\sigma)*I(x,y)</script><p>其中的<script type="math/tex">G(x,y,\sigma)</script>是尺度可以发生变化的高斯函数<script type="math/tex">G(x,y,\sigma)=\frac{1}{2\pi{\sigma}^2}e^{-\frac{x^2+y^2}{2{\sigma}^2}}</script>。<script type="math/tex">(x,y)</script>表示空间坐标，<script type="math/tex">\sigma</script>是尺度系数，描述了图像的模糊程度。<br>为了能够更为有效的提取出特征点，提出了DOG（高斯差分尺度空间）的概念。通过不同尺度下的高斯差分核与图像卷积形成：</p><script type="math/tex; mode=display">D(x,y,\sigma)=(G(x,y,k\sigma)-G(x,y,\sigma))*I(x,y) =L(x,y,k\sigma)-L(x,y,\sigma)</script><center><img src="/2017/10/01/SIFT和SURF特性提取总结/scale_space.png" alt="scale space" title="scale space"></center><p>图像金字塔的建立：为了实现尺度不变特性，对于每一幅图像<script type="math/tex">I(x,y)</script>，分成<strong>子八度（octave）</strong>，第一个子八度的scale为原图大小，后面每个octave为上一个octave降采样的结果，即原图size的1/4（长宽分别减半），构成下一个子八度（高一层金字塔）。此时要强烈注意size和尺度空间的概念。size是图像大小，而尺度空间表示不同<script type="math/tex">\sigma</script>的图像的集合。那么尺度空间的集合是：</p><script type="math/tex; mode=display">2^{i-1}(\sigma, k*\sigma,k^2*\sigma,k^3*\sigma,...,k^{n-1}*\sigma)</script><p>其中的 <script type="math/tex">k=2^{1/S}</script>，<script type="math/tex">S</script>表示尺度金字塔每个octave的层数，<script type="math/tex">n</script>表示尺度金字塔的总层数，<script type="math/tex">i</script>表示的是在某个octave的第<script type="math/tex">i</script>层，<script type="math/tex">i\in[1,2,3,...n]</script>。</p><center><img src="/2017/10/01/SIFT和SURF特性提取总结/DoG.jpg" alt="DoG" title="DoG"></center><p>由图片size决定建几个塔，每塔几层图像(S一般为3-5层)。0塔的第0层是原始图像(或你double后的图像)，往上每一层是对其下一层进行Laplacian变换（高斯卷积，其中σ值渐大，例如可以是σ, k*σ, k*k*σ…），直观上看来越往上图片越模糊。塔间的图片是降采样关系，例如1塔的第0层可以由0塔的第3层down sample得到，然后进行与0塔类似的高斯卷积操作。</p><h4 id="在DoG空间找到关键点"><a href="#在DoG空间找到关键点" class="headerlink" title="在DoG空间找到关键点"></a>在DoG空间找到关键点</h4><p>为了寻找尺度空间的极值点，每一个采样点要和它所有的相邻点比较，看其是否比它的图像域和尺度域的相邻点大或者小。如图所示，中间的检测点和它同尺度的8个相邻点和上下相邻尺度对应的9×2个点共26个点比较，以确保在尺度空间和二维图像空间都检测到极值点。 一个点如果在DOG尺度空间本层以及上下两层的26个领域中是最大或最小值时，就认为该点是图像在该尺度下的一个特征点,如图所示。使用Laplacian of Gaussian能够很好地找到找到图像中的兴趣点，但是需要大量的计算量，所以使用Difference of Gaussian图像的极大极小值近似寻找特征点.DOG算子计算简单，是尺度归一化的LoG算子的近似。</p><center><img src="/2017/10/01/SIFT和SURF特性提取总结/DoG_Space.jpg" alt="DoG Space" title="DoG Space"></center><h4 id="去除不好的点"><a href="#去除不好的点" class="headerlink" title="去除不好的点"></a>去除不好的点</h4><blockquote><p>这一步本质上要去掉DoG局部曲率非常不对称的像素。通过拟和三维二次函数以精确确定关键点的位置和尺度（达到亚像素精度），同时去除低对比度的关键点和不稳定的边缘响应点(因为DoG算子会产生较强的边缘响应)，以增强匹配稳定性、提高抗噪声能力，在这里使用近似Harris Corner检测器。</p></blockquote><h4 id="给特征点赋值一个128维方向参数并描述"><a href="#给特征点赋值一个128维方向参数并描述" class="headerlink" title="给特征点赋值一个128维方向参数并描述"></a>给特征点赋值一个128维方向参数并描述</h4><p>前面的几个步骤确定了特征点到底在哪里，此步骤是为了<strong>描述特征点</strong>。<br>(x,y)处梯度的模值和方向公式为：</p><script type="math/tex; mode=display">m(x,y)=\sqrt{(L(x+1,y)-L(x-1,y))^2+(L(x,y+1)-L(x,y-1))^2}</script><script type="math/tex; mode=display">\theta(x,y)=tan^{-1}\left(\frac{L(x,y+1)-L(x,y-1)}{L(x+1,y)-L(x-1,y)}\right)</script><blockquote><p>利用关键点邻域像素的梯度方向分布特性为每个关键点指定方向参数，使算子具备旋转不变性。</p></blockquote><p>其中L所用的尺度为每个关键点各自所在的尺度。至此，图像的关键点已经检测完毕，每个关键点有三个信息：<strong>位置，所处尺度、方向</strong>，由此可以确定一个SIFT特征区域。</p><p>在实际计算时，我们在以关键点为中心的邻域窗口内采样，并用直方图统计邻域像素的梯度方向。梯度直方图的范围是0～360度，其中每45度一个柱，总共8个柱, 或者每10度一个柱，总共36个柱。Lowe论文中还提到要使用高斯函数对直方图进行平滑，减少突变的影响。直方图的峰值则代表了该关键点处邻域梯度的主方向，即作为该关键点的方向。直方图中的峰值就是主方向，其他的达到最大值80%的方向可作为辅助方向。</p><p>计算keypoint周围的16*16的window中每一个像素的梯度，而且使用高斯下降函数降低远离中心的权重。图左部分的中央为当前关键点的位置，每个小格代表关键点邻域所在尺度空间的一个像素，利用公式求得每个像素的梯度幅值与梯度方向，箭头方向代表该像素的梯度方向，箭头长度代表梯度模值，然后用高斯窗口对其进行加权运算。</p><center><img src="/2017/10/01/SIFT和SURF特性提取总结/keypoints.jpg" alt="keypoints" title="keypoints"></center><p>该图是8*8的区域计算得到2*2描述子向量的过程。但是在实际中使用的是在16*16的区域计算得到4*4的特征描述子，如下图：</p><center><img src="/2017/10/01/SIFT和SURF特性提取总结/descriptor.jpg" alt="descriptor" title="descriptor"></center><p>这样就可以对每个feature形成一个4*4*8=128维的描述子，每一维都可以表示4*4个格子中一个的scale/orientation。将这个<strong>向量归一化之后，就进一步去除了光照的影响</strong>。</p><h3 id="sift的缺点"><a href="#sift的缺点" class="headerlink" title="sift的缺点"></a>sift的缺点</h3><p>SIFT在图像的不变特征提取方面拥有无与伦比的优势，但并不完美，仍然存在：</p><ol><li>实时性不高。</li><li>有时特征点较少。</li><li>对边缘光滑的目标无法准确提取特征点。</li></ol><p>PS: 论文见这里：<a href="http://www.cs.ubc.ca/~lowe/papers/ijcv04.pdf" target="_blank" rel="external">Distinctive Image Features from Scale-Invariant Keypoints</a><br>这里是<a href="http://www.cs.ubc.ca/~lowe/home.html" target="_blank" rel="external">David Lowe大神</a>做的一个<a href="http://www.cs.ubc.ca/~lowe/keypoints/" target="_blank" rel="external">Demo Software: SIFT Keypoint Detector</a>.</p><h2 id="SURF-简介"><a href="#SURF-简介" class="headerlink" title="SURF 简介"></a>SURF 简介</h2><p>参考了好友整理的一篇文章<a href="http://simtalk.cn/2017/08/18/%E7%89%B9%E5%BE%81%E4%B8%8E%E5%8C%B9%E9%85%8D/#ORB" target="_blank" rel="external">特征与匹配</a></p><ol><li>整体的思路就是将计算DOG的一整套东西来检测关键点的理论替换成了利用hessian矩阵来检测关键点，因为当Hessian矩阵的判别式取得局部极大值时，判定当前点是比周围邻域内其他点更亮或更暗的点，由此来定位关键点的位置。<br>上述过程要进行Hessian判别式的计算，可以采用box filter的方式进行加速。</li><li>构建尺度金字塔的方式不同，具体见下图：<center><img src="/2017/10/01/SIFT和SURF特性提取总结/diff.png" alt="differences" title="differences"></center></li><li>Sift特征点方向分配是采用在特征点邻域内统计其梯度直方图，取直方图bin值最大的以及超过最大bin值80%的那些方向作为特征点的主方向。而在Surf中，采用的是统计特征点圆形邻域内的harr小波特征。即在特征点的圆形邻域内，统计60度扇形内所有点的水平、垂直harr小波特征总和，然后扇形以0.2弧度大小的间隔进行旋转并再次统计该区域内harr小波特征值之后，最后将值最大的那个扇形的方向作为该特征点的主方向。该过程示意图如下：<center><img src="/2017/10/01/SIFT和SURF特性提取总结/direction.jpg" alt="direction" title="direction"></center></li><li>生成特征点描述子: 在Sift中，是取特征点周围4*4个区域块，统计每小块内8个梯度方向，用着4*4*8=128维向量作为Sift特征的描述子。surf算法中，也是在特征点周围取一个4*4的矩形区域块，但是所取得矩形区域方向是沿着特征点的主方向。每个子区域统计25个像素的水平方向和垂直方向的haar小波特征，这里的水平和垂直方向都是相对主方向而言的。该haar小波特征为水平方向值之后、垂直方向值之后、水平方向绝对值之后以及垂直方向绝对值之和4个方向。<br>把这4个值作为每个子块区域的特征向量，所以一共有4*4*4=64维向量作为Surf特征的描述子，比Sift特征的描述子减少了2倍。<center><img src="/2017/10/01/SIFT和SURF特性提取总结/diff_more.jpg" alt="more differences" title="more differences"></center></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://blog.csdn.net/abcjennifer/article/details/7639681/" target="_blank" rel="external">SIFT特征提取分析</a></li><li><a href="http://blog.csdn.net/luoshixian099/article/details/47807103" target="_blank" rel="external">特征匹配-SURF原理与源码解析（一）</a></li><li><a href="http://simtalk.cn/2017/08/18/%E7%89%B9%E5%BE%81%E4%B8%8E%E5%8C%B9%E9%85%8D/#ORB" target="_blank" rel="external">特征与匹配</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;&lt;img src=&quot;/2017/10/01/SIFT和SURF特性提取总结/match_before_v2.png&quot; alt=&quot;Lane+One Punch Man&quot; title=&quot;Lane+One Punch Man&quot;&gt;&lt;/center&gt;

&lt;blockquote&gt;
&lt;p&gt;SIFT（Scale-invariant feature transform）是一种检测局部特征的算法，该算法通过求一幅图中的特征点（interest points,or corner points）及其有关&lt;strong&gt;scale&lt;/strong&gt; 和 &lt;strong&gt;orientation&lt;/strong&gt; 的描述子得到特征并进行图像特征点匹配&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="计算机视觉" scheme="https://www.vincentqin.tech/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
    
      <category term="sift" scheme="https://www.vincentqin.tech/tags/sift/"/>
    
      <category term="surf" scheme="https://www.vincentqin.tech/tags/surf/"/>
    
      <category term="特征提取" scheme="https://www.vincentqin.tech/tags/%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96/"/>
    
  </entry>
  
  <entry>
    <title>统计学习方法总结</title>
    <link href="https://www.vincentqin.tech/2017/09/23/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>https://www.vincentqin.tech/2017/09/23/统计学习方法总结/</id>
    <published>2017-09-23T11:47:38.000Z</published>
    <updated>2017-10-30T16:22:17.350Z</updated>
    
    <content type="html"><![CDATA[<center><img src="/2017/09/23/统计学习方法总结/cover.jpg" alt="machine learning" title="machine learning"></center><p>本文主要研究监督学习，所谓的监督学习就是在给定的，有限的，用于学习的训练数据集合（training data）出发，假设数据是独立同分布产生的；并且假设要学习的模型属于某个集合，即<strong>假设空间</strong>；我们根据一定的评价准则，从假设空间中选取一个最优的模型，使它对已知的训练数据以及未知的测试数据在给定评价准则下有最优的预测，最优模型的选取由<strong>算法</strong>实现。<br>所以统计学习方法有三个要素：<strong>模型</strong>、<strong>策略</strong>、<strong>算法</strong>。</p><a id="more"></a><h2 id="统计学习"><a href="#统计学习" class="headerlink" title="统计学习"></a>统计学习</h2><ul><li>监督学习</li><li>半监督学习</li><li>无监督学习</li><li>强化学习</li></ul><h2 id="输入空间、特征空间与输出空间"><a href="#输入空间、特征空间与输出空间" class="headerlink" title="输入空间、特征空间与输出空间"></a>输入空间、特征空间与输出空间</h2><ol><li>输入变量&amp;输出变量均连续-&gt; 回归问题</li><li>输出空间为有限个离散变量的预测问题-&gt; 分类问题</li><li>输入与输出均为变量序列的预测问题-&gt; 标注问题</li></ol><h2 id="风险函数"><a href="#风险函数" class="headerlink" title="风险函数"></a>风险函数</h2><ul><li>期望风险：模型关于联合分布的期望损失</li><li>经验风险：模型关于训练样本的平均损失<br>按照大数定律，当样本数据量区域无穷时，经验风险趋近于期望风险；<br>但是当样本容量很小时，经验风险的效果就不会太好，此时容易出现过拟合现象。<br>此时，结构风险就被提出。结构风险是在经验风险的基础上添加上表示模型复杂度的正则化项/罚项。<br>极大似然估计是经验风险最小化的一个特例。<br>最大后验概率估计是结构风险最小化的一个特例；</li></ul><h2 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h2><p>监督学习里要学习的模型就是<strong>决策函数或者条件概率分布</strong>。</p><p>此时不得不提到生成方法以及判别方法。</p><ul><li>生成方法，由数据学习联合概率分布$P(X,Y)$，然后求出条件概率分布模型，即生成模型：<script type="math/tex; mode=display">P(Y|X)=\frac{P(X,Y)}{P(X)}</script></li><li>判别方法是由数据直接学习决策函数或者条件概率分布作为预测模型，即判别模型。</li></ul><h3 id="生成模型与判别模型"><a href="#生成模型与判别模型" class="headerlink" title="生成模型与判别模型"></a>生成模型与判别模型</h3><ul><li>生成模型常见的主要有：</li></ul><ol><li>高斯混合模型</li><li>朴素贝叶斯</li><li>混合高斯模型GMM</li><li>隐马尔可夫模型HMM</li><li>马尔可夫的随机场</li><li>KNN</li></ol><ul><li>常见的判别模型有：</li></ul><ol><li>支持向量机</li><li>传统的神经网络</li><li>线性判别分析</li><li>线性回归</li><li>条件随机场</li><li>最大熵模型</li><li>逻辑斯特回归</li></ol><p><img src="https://uploadfiles.nowcoder.com/images/20170902/1124449_1504333555806_99A61EED5E6F79CC20E4E8CFDA6B5AF4" alt=""></p><h2 id="策略"><a href="#策略" class="headerlink" title="策略"></a>策略</h2><p>指定策略的目的就是为了挑选出假设空间中到底哪个模型才是我们真正需要的。此时会用到损失函数以及风险函数的概念。</p><ul><li><p>0-1 损失函数</p><script type="math/tex; mode=display">L(Y,f(X))=\left\{\begin{aligned}1,    && Y \neq f(X)\\0,    &&Y = f(X) \end{aligned}\right.</script></li><li><p>平法损失函数</p><script type="math/tex; mode=display">L(Y,f(X))=(Y-f(X)^2</script></li><li><p>绝对值损失函数</p></li></ul><script type="math/tex; mode=display">L(Y,f(X))=|Y-f(X)|</script><ul><li>对数损失函数<script type="math/tex; mode=display">L(Y,P(Y|X))=-logP(Y|X)</script></li></ul><p>损失函数越小的话代表模型越好。$(X,Y)$是随机变量符合联合分布概率$P(X,Y)$，所以损失函数的期望被定义为：</p><script type="math/tex; mode=display">R_{ref}(f)=E_p[L(Y,f(X))]=\int_{\mathcal{X} \times \mathcal{Y}}L(y,f(x))P(x,y)dxdy</script><p>以上是模型$f(X)$关于联合分布$P(X,Y)$的平均意义下的损失，称为风险函数或者<strong>期望损失</strong>（expected loss）。<br>但是呢，期望损失不易求解，我们一般用<strong>模型关于训练数据集的平均损失</strong>来逼近期望损失，即：</p><script type="math/tex; mode=display">R_{emp}(f)=E_p[L(Y,f(X))]=\frac{1}{N} \sum_{i=1}^NL(y_i,f(x_i))</script><p><strong>经验风险最小化</strong>的策略认为，经验风险最小的模型就是最优的模型，于是按照这种定义，我们有：</p><script type="math/tex; mode=display">f^*={argmin}_{f \in \mathcal{F} } R_{emp}</script><p>其中的$\mathcal{F}$是假设空间。<br>最大似然估计就是经验风险最小化的一个例子：当模型为条件概率，损失函数是对数损失时，经验风险最小化就等价于极大似然估计。<br>根据大数定理可知，当样本容量N趋近于无限时，经验风险趋近于期望风险。但是如果样本数量是有限时，此时会出现过拟合现象，那么这时候需要结构风险的帮助。<br>结构风险是为了防止过拟合而提出的策略，结构风险最小化等价于正则化（regularization）。其定义是</p><script type="math/tex; mode=display">R_{srm}(f)=\frac{1}{N} \sum_{i=1}^NL(y_i,f(x_i))+\lambda J(f)</script><p>其中的$J(f)$是衡量模型复杂度的项，也叫罚项。当模型越复杂时，$J(f)$越大；模型越简单时，$J(f)$越小。<br>最大后验概率估计（MAP）就是结构风险最小化的一个例子：当模型时条件概率，损失函数是对数损失函数，模型复杂度由先验概率表示时，结构风险最小化就等价于MAP。</p><p>监督学习的模型可以分为概率模型与非概率模型，由条件概率分布$P(Y|X)$或者决策函数$Y=f(X)$表示。</p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>算法是指学习模型的具体计算方法： <strong>find global optimization solution efficiently</strong>.</p><h2 id="模型选择"><a href="#模型选择" class="headerlink" title="模型选择"></a>模型选择</h2><p><strong>模型选择的主要方式有：正则化与交叉验证</strong>。</p><p>在经验风险最小化时已经了解到正则化的由来，正则化就是针对过拟合现象提出的解决策略。</p><p><strong>过拟合</strong>是指学习模型时选择的模型包含的参数过多，以致于这一模型对已知数据的预测很好，而对未知数据的预测能力变得很差。 以下介绍两种正则化的范数：$L_1$ and $L_2$</p><h3 id="正则化"><a href="#正则化" class="headerlink" title="正则化"></a>正则化</h3><h4 id="L2范数正则"><a href="#L2范数正则" class="headerlink" title="L2范数正则"></a>L2范数正则</h4><script type="math/tex; mode=display">C=C_0+ \frac{\alpha}{2n}\sum_ww^2</script><p>对$w$以及$b$求导如下：</p><script type="math/tex; mode=display"> \frac{\partial C}{\partial w}= \frac{\partial C_0}{\partial w}+\frac{\lambda}{n}w \frac{\partial C}{\partial b}= \frac{\partial C_0}{\partial b}</script><p>由梯度下降法可知：</p><script type="math/tex; mode=display">w \rightarrow w-\eta\frac{\partial C}{\partial w}=\left(1-\frac{\eta\lambda}{n} \right)w-\eta\frac{\partial C_0}{\partial w}</script><p>系数$\left(1-\frac{\eta\lambda}{n} \right)$是小于1的，相比于原来的系数等于一，此时的效果相当于就是权值衰减（weight decay）。</p><p>注意到<strong>过拟合</strong>的时候，我们的假设函数要顾及到每一个数据点，模型就会尝试对所有数据点进行拟合，包括一些异常点；此时形成的拟合函数的波动性会非常大，可以看到此时的拟合参数会异常大。通过L2正则化处理可以使这些参数变小，解释如下：</p><blockquote><p>更小的权重，表示网络的复杂组更低，对数据拟合的刚刚好（奥卡姆剃须刀原理）</p></blockquote><h4 id="L1范数正则"><a href="#L1范数正则" class="headerlink" title="L1范数正则"></a>L1范数正则</h4><p>L1正则假设参数的先验分布是Laplace分布，可以保证模型的稀疏性，也就是某些参数等于0；<br>L2正则假设参数的先验分布是Gaussian分布，可以保证模型的稳定性，也就是参数的值不会太大或太小</p><p><img src="https://gss0.baidu.com/-fo3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/359b033b5bb5c9ea238f2f6cdd39b6003bf3b3c4.jpg" alt="两种正则化的对比"></p><h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p><a href="http://freemind.pluskid.org/machine-learning/sparsity-and-some-basics-of-l1-regularization/#ed61992b37932e208ae114be75e42a3e6dc34cb3" target="_blank" rel="external">lasso and ridge regularization</a></p><h3 id="交叉验证"><a href="#交叉验证" class="headerlink" title="交叉验证"></a>交叉验证</h3><p>就是将整个数据集切分成三个部分，分别是训练集、验证集和测试集。训练集用来训练模型，验证集用于模型 的选择，而测试集用于对学习方法的评估。</p><p>但是一般情况下，训练数据是不足的，那么此时可以重复的利用数据，进行反复训练以得到最优模型。</p><p>常见的方法有：</p><ul><li>S折交叉验证（S-fold cross validation）</li><li>留一交叉验证（S=N，当S为数据集的容量时，S折交叉验证就变成了留一交叉验证）</li></ul><h2 id="极大似然估计"><a href="#极大似然估计" class="headerlink" title="极大似然估计"></a>极大似然估计</h2><p>最大似然估计提供了一种给定观察数据来评估模型参数的方法，即：“模型已定，参数未知”</p><blockquote><p>举个别人博客中的例子，假如有一个罐子，里面有黑白两种颜色的球，数目多少不知，两种颜色的比例也不知。我 们想知道罐中白球和黑球的比例，但我们不能把罐中的球全部拿出来数。现在我们可以每次任意从已经摇匀的罐中拿一个球出来，记录球的颜色，然后把拿出来的球 再放回罐中。这个过程可以重复，我们可以用记录的球的颜色来估计罐中黑白球的比例。假如在前面的一百次重复记录中，有七十次是白球，请问罐中白球所占的比例最有可能是多少？很多人马上就有答案了：70%。而其后的理论支撑是什么呢？</p></blockquote><p>我们假设罐中白球的比例是$p$，那么黑球的比例就是$1-p$。因为每抽一个球出来，在记录颜色之后，我们把抽出的球放回了罐中并摇匀，所以每次抽出来的球的颜 色服从同一独立分布。这里我们把一次抽出来球的颜色称为一次抽样。题目中在一百次抽样中，七十次是白球的概率$P(Data|M)$，这里Data是所有的数据，M是所给出的模型，表示每次抽出来的球是白色的概率为$p$。如果第一抽样的结果记为<script type="math/tex">x_1</script>，第二抽样的结果记为<script type="math/tex">x_2</script>… 那么<script type="math/tex">Data = (x_1,x_2,...,x_{100})</script>。这样，</p><script type="math/tex; mode=display">P(Data|M)= P(x_1,x_2,...,x_{100}|M)= P(x_1|M)P(x_2|M)...P(x_{100}|M)= p^{70}(1-p)^{30}</script><p>那么p在取什么值的时候，$P(Data|M)$的值最大呢？将$p^{70}(1-p)^{30}$对$p$求导，并其等于零。</p><script type="math/tex; mode=display">70p^{69}(1-p)^{30}-p^{70}*30(1-p)^{29}=0</script><p>解方程可以得到<script type="math/tex">p=0.7</script>。　　　　</p><h3 id="最大熵原理"><a href="#最大熵原理" class="headerlink" title="最大熵原理"></a>最大熵原理</h3><p>最大熵原理使概率学习中的一个准则。学习概率模型时，在所有的可能概率模型（分布）中，熵最大的模型是最好的模型。最大熵原理也可以理解成在满足约束条件的模型中选择熵最大的模型！</p><script type="math/tex; mode=display">H(p)=-\sum_x{log(P(x))P(x)}</script><p>其中$X$服从的概率分布为$P(X)$，$X$服从均匀分布时，熵最大。当没有其他已知的约束时，$\Sigma{P(x)}=1$，此时按照最大熵原理，当$P(x_1)=P(x_2)=…=P(x_n)$时，熵最大；此时等概论，等概论意味着对事实的无知，因为没有更多可能的信息，所以此时的判断也是合情合理的。</p><h3 id="线性分类器"><a href="#线性分类器" class="headerlink" title="线性分类器"></a>线性分类器</h3><p>线性分类器有三大类：感知器准则函数、$SVM$、$Fisher$准则，而贝叶斯分类器不是线性分类器。</p><ul><li>感知器准则函数：代价函数$J=-(W*X+w_0)$，分类的准则是最小化代价函数。感知器是神经网络（$NN$）的基础，网上有很多介绍。</li><li>$SVM$：支持向量机也是很经典的算法，优化目标是最大化间隔（margin），又称最大间隔分类器，是一种典型的线性分类器。（使用核函数可解决非线性问题）</li><li>$Fisher$准则：更广泛的称呼是线性判别分析（$LDA$），将所有样本投影到一条远点出发的直线，使得同类样本距离尽可能小，不同类样本距离尽可能大，具体为最大化“广义瑞利商”。</li></ul><h3 id="评价指标"><a href="#评价指标" class="headerlink" title="评价指标"></a>评价指标</h3><ul><li>召回率就是有多少正确的被你找回来了；准确率就是你找到的有多少是正确的；(一般情况下召回率和准确率呈负相关，所以可以用F值衡量整体效果)</li><li>TP(True Positive)是你判断为正确的，实际就是正确的；</li><li>FP(False Positive)是你判断是错误的，实际也是错误的；</li><li>TN(True Negative)是你判断为正确的，但实际是错误的；</li><li>FN(False Negative)是你判断是错误的，但实际是正确的；</li></ul><h2 id="朴素贝叶斯-Naive-Bayes"><a href="#朴素贝叶斯-Naive-Bayes" class="headerlink" title="朴素贝叶斯 Naive Bayes"></a>朴素贝叶斯 <script type="math/tex">Naive Bayes</script></h2><h3 id="基本方法"><a href="#基本方法" class="headerlink" title="基本方法"></a>基本方法</h3><p>朴素贝叶斯是基于贝叶斯定理与特征条件独立假设的分类方法。NB的核心在于它假设向量的所有分量之间是独立的。在贝叶斯理论系统中，都有一个重要的条件独立性假设：假设所有特征之间相互独立，这样才能将联合概率拆分。<br>对于由$P(X,Y)$独立产生的训练集$T={(x_1,y_1),(x_2,y_2),…, (x_N,y_N),}$而言通过朴素贝叶斯的方法学习这个联合概率分布。大致分两步：</p><ol><li>计算先验分布：<script type="math/tex; mode=display">P(Y=c_k),k=1,2...,K</script></li><li>条件概率分布：<script type="math/tex; mode=display">P(X=x|Y=c_k)=P(X^{(1)}=x^{(1)},X^{(2)}=x^{(2)},...,X^{(n)}=x^{(n)}|Y=c_k),k=1,2...,K</script>其中的$x \in  R^{n}$，$n$表示这个样本的维度。</li></ol><p>但是在计算条件概率时因为朴素贝叶斯做了条件独立性假设，那么该条件概率分布可以写成：</p><script type="math/tex; mode=display">P(X=x|Y=c_k)=P(X^{(1)}=x^{(1)},X^{(2)}=x^{(2)},...,X^{(n)}=x^{(n)}|Y=c_k)\\=\prod_{j=1}^nP(X^{(j)}=x^{(j)}|Y=c_k)</script><p>在实际分类时，对于给定的输入x，通过学习到的模型估计后验概率$P(Y=c_k|X=x)$将后验概率最大的类作为x的类的输出。</p><script type="math/tex; mode=display">P(Y=c_k|X=x)=\frac{P(X=x|Y=c_k)P(Y=c_k)}{\sum_{k}P(X=x|Y=c_k)P(Y=c_k)}\=\frac{P(Y=c_k)\prod_{j=1}^nP(X^{(j)}=x^{(j)}|Y=c_k)}{\sum_{k}P(Y=c_k)\prod_{j=1}^nP(X^{(j)}=x^{(j)}|Y=c_k)}</script><p>因为分母就是$P(X=x)$的概率，这是不变的。因此我们仅需要知道分子哪个大就可以，也就是：</p><script type="math/tex; mode=display">y={argmax}_{c_k} P(Y=c_k)\prod_{j=1}^nP(X^{(j)}=x^{(j)}|Y=c_k)</script><p>上式的意思是求解到底是哪些类别<script type="math/tex">c_k</script>能够让最大后验概率最大化。</p><h3 id="参数估计"><a href="#参数估计" class="headerlink" title="参数估计"></a>参数估计</h3><h4 id="极大似然估计-1"><a href="#极大似然估计-1" class="headerlink" title="极大似然估计"></a>极大似然估计</h4><ol><li><p>计算先验概率</p><script type="math/tex; mode=display">P(Y=c_k)=\frac{\sum_{i=1}^NI(y_i=c_k)}{N}</script></li><li><p>计算条件概率</p><script type="math/tex; mode=display">P(X=a_{jl}|Y=c_k)=\frac{\sum_{i=1}^NI(x_i^{(j)}=a_{jl},y_i=c_k)}{\sum_{i=1}^NI(y_i=c_k)}</script><p>其中</p><script type="math/tex; mode=display">j=1,2...n;l=1,2...S_j;k=1,2...K</script></li><li><p>对于给定的实例x，计算</p><script type="math/tex; mode=display">P(Y=c_k)\prod_{j=1}^nP(X^{(j)}=x^{(j)}|Y=c_k)</script></li><li><p>确定实例的类别</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;&lt;img src=&quot;/2017/09/23/统计学习方法总结/cover.jpg&quot; alt=&quot;machine learning&quot; title=&quot;machine learning&quot;&gt;&lt;/center&gt;

&lt;p&gt;本文主要研究监督学习，所谓的监督学习就是在给定的，有限的，用于学习的训练数据集合（training data）出发，假设数据是独立同分布产生的；并且假设要学习的模型属于某个集合，即&lt;strong&gt;假设空间&lt;/strong&gt;；我们根据一定的评价准则，从假设空间中选取一个最优的模型，使它对已知的训练数据以及未知的测试数据在给定评价准则下有最优的预测，最优模型的选取由&lt;strong&gt;算法&lt;/strong&gt;实现。&lt;br&gt;所以统计学习方法有三个要素：&lt;strong&gt;模型&lt;/strong&gt;、&lt;strong&gt;策略&lt;/strong&gt;、&lt;strong&gt;算法&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="机器学习" scheme="https://www.vincentqin.tech/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="https://www.vincentqin.tech/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="统计学习方法" scheme="https://www.vincentqin.tech/tags/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/"/>
    
      <category term="概率论" scheme="https://www.vincentqin.tech/tags/%E6%A6%82%E7%8E%87%E8%AE%BA/"/>
    
      <category term="SVM" scheme="https://www.vincentqin.tech/tags/SVM/"/>
    
      <category term="过拟合" scheme="https://www.vincentqin.tech/tags/%E8%BF%87%E6%8B%9F%E5%90%88/"/>
    
      <category term="朴素贝叶斯" scheme="https://www.vincentqin.tech/tags/%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu上使用Git以及GitHub</title>
    <link href="https://www.vincentqin.tech/2017/05/30/Ubuntu%E4%B8%8A%E4%BD%BF%E7%94%A8Git%E4%BB%A5%E5%8F%8AGitHub/"/>
    <id>https://www.vincentqin.tech/2017/05/30/Ubuntu上使用Git以及GitHub/</id>
    <published>2017-05-30T14:40:20.000Z</published>
    <updated>2017-10-30T16:22:16.077Z</updated>
    
    <content type="html"><![CDATA[<center><img src="/2017/05/30/Ubuntu上使用Git以及GitHub/github.jpg" alt="github" title="github"></center><a id="more"></a><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p>在Ubuntu上安装Git的命令为:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install git</div></pre></td></tr></table></figure><h2 id="配置GitHub"><a href="#配置GitHub" class="headerlink" title="配置GitHub"></a>配置GitHub</h2><p>安装git结束之后就是配置github用户资料，如下：<br>将其中的 “user_name”替换成自己 GitHub的用户名并且将”email_id” 换成你创建GitHub账号所用的邮箱.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git config --global user.name &quot;user_name&quot;</div><div class="line"></div><div class="line">git config --global user.email &quot;email_id&quot;</div></pre></td></tr></table></figure></p><h2 id="建立本地仓库（repository）"><a href="#建立本地仓库（repository）" class="headerlink" title="建立本地仓库（repository）"></a>建立本地仓库（repository）</h2><p>在自己的电脑上建立本地仓库，这个仓库将会在后续推送到GitHub上，语句如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git init Mytest</div></pre></td></tr></table></figure></p><p>如果初始化成功，你将会得到以下提示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Initialized empty Git repository in /home/user_name/Mytest/.git/</div></pre></td></tr></table></figure><p>其中的user_name为本地计算机用户名，因人而异。<br>Mytest是”init”创建的文件夹，然后进入该文件所在目录：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd Mytest</div></pre></td></tr></table></figure></p><h2 id="创建README来描述这个仓库"><a href="#创建README来描述这个仓库" class="headerlink" title="创建README来描述这个仓库"></a>创建README来描述这个仓库</h2><p>该步骤可有可无，但是作为一个优秀的工程师还是写点东西比较好。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gedit README</div></pre></td></tr></table></figure><p>然后输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">This is a git repo</div></pre></td></tr></table></figure></p><h2 id="将仓库文件加入index（缓存）"><a href="#将仓库文件加入index（缓存）" class="headerlink" title="将仓库文件加入index（缓存）"></a>将仓库文件加入index（缓存）</h2><p>这一步尤其重要，我们将需要上载到GitHub的文件们添加到index。这些文件可以是文本文档，m/c/c++/PDF/jpg…几乎任何类型文件，一般而言我们可以把需要上载的文件拷贝到这个文件夹内，然后再用一个语句来把需要上传到文件添加到index，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git add file1.txt</div><div class="line">git add file2.c</div><div class="line">git and file3.m</div><div class="line">...</div></pre></td></tr></table></figure></p><h2 id="提交到本地仓库"><a href="#提交到本地仓库" class="headerlink" title="提交到本地仓库"></a>提交到本地仓库</h2><p>当我们已经把文件添加／修改到index后，就可以进行提交了；利用如下语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git commit -m &quot;some_message&quot;</div></pre></td></tr></table></figure><p>其中some_message可以是任何字符，例如：”my first commit” 或者”edit in readme”等。上面代码的-m参数，就是用来指定这个mesage 的。</p><p>注意：git是分为三部分，一部分是文件，另外一个是缓存区，最后一个是本地库。当你修改了自己的文件后，你会git add xx将修改保存到缓存区，然后再用commit推送修改到本地库中。git push 将本地仓库修改推送到服务器上的仓库中commit是将本地修改保存到本地仓库中。</p><h2 id="在GitHub创建仓库"><a href="#在GitHub创建仓库" class="headerlink" title="在GitHub创建仓库"></a>在GitHub创建仓库</h2><p>这个仓库的名字要和本地的一致，该部分不做展开。然后连接到远程仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git remote add origin https://github.com/user_name/Mytest.git</div></pre></td></tr></table></figure><p>其中user_name就是自己的GitHub的用户名。</p><h2 id="推送到远程仓库"><a href="#推送到远程仓库" class="headerlink" title="推送到远程仓库"></a>推送到远程仓库</h2><p>最后的一步就是提交到远程仓库，用以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push origin master</div></pre></td></tr></table></figure></p><p><a href="https://www.howtoforge.com/tutorial/install-git-and-github-on-ubuntu-14.04/" target="_blank" rel="external">原文地址</a></p>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;&lt;img src=&quot;/2017/05/30/Ubuntu上使用Git以及GitHub/github.jpg&quot; alt=&quot;github&quot; title=&quot;github&quot;&gt;&lt;/center&gt;
    
    </summary>
    
      <category term="Git" scheme="https://www.vincentqin.tech/categories/Git/"/>
    
    
      <category term="Linux" scheme="https://www.vincentqin.tech/tags/Linux/"/>
    
      <category term="Ubuntu" scheme="https://www.vincentqin.tech/tags/Ubuntu/"/>
    
      <category term="GitHub" scheme="https://www.vincentqin.tech/tags/GitHub/"/>
    
      <category term="Git" scheme="https://www.vincentqin.tech/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>机器学习修炼手册</title>
    <link href="https://www.vincentqin.tech/2017/05/07/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%BF%AE%E7%82%BC%E6%89%8B%E5%86%8C/"/>
    <id>https://www.vincentqin.tech/2017/05/07/机器学习修炼手册/</id>
    <published>2017-05-07T12:02:56.000Z</published>
    <updated>2017-10-30T16:22:17.225Z</updated>
    
    <content type="html"><![CDATA[<center><img src="/2017/05/07/机器学习修炼手册/ML.jpg" alt="机器学习" title="机器学习"></center><p id="div-border-left-green">对机器学习的学习我开始于二年级的《数据挖掘》课，当时袁老师对数据挖掘中的常用的算法做了一些介绍，但是这仅仅是个入门教学，我并没有深入了解的其中的原理。到现在我才深刻的意识到ML的重要性，我就抽空看了一些这方面的资料，整理了这一份文档。</p><a id="more"></a><p>机器学习算法包括，<span id="inline-red">监督学习</span>(回归、分类)以及<span id="inline-red">非监督学习</span>(聚类)。</p><h2 id="梯度下降"><a href="#梯度下降" class="headerlink" title="梯度下降"></a>梯度下降</h2><script type="math/tex; mode=display">\bbox[5px,border:2px solid red]{    \theta_j:=\theta_j-\alpha\frac{\partial}{\partial \theta}J(\theta)}</script><p>其中$\alpha$为学习率一般为很小的数字(0.001-0.1)，$\theta$为我们需要求解的参数，$J(\theta)$为能量函数或者为损失函数，通过上述公式可知，梯度下降是沿着损失函数梯度的反方向寻找迭代寻找最优值的过程。梯度下降容易陷入局部最极小点，所以我们要采取一定的措施来阻止这种现象的发生。</p><h2 id="过拟合（Overfitting）"><a href="#过拟合（Overfitting）" class="headerlink" title="过拟合（Overfitting）"></a>过拟合（Overfitting）</h2><p></p><p id="div-border-left-red">如果训练样本的特征过多，我们学习的假设可能在训练集上表现地很好，但是在验证集上表现地就不尽人意</p><p></p><h3 id="避免过拟合"><a href="#避免过拟合" class="headerlink" title="避免过拟合"></a>避免过拟合</h3><ul><li>减少特征的大小</li><li>正则化<ul><li>在保证所有特征都保留的情况下，限制$\theta$的大小，即Small values for parameters $ \theta_0,\theta_1,\theta_2…\theta_n$</li><li>当特征量很多时，该方式仍然表现的很好</li></ul></li><li>交叉验证(Cross Validation)</li></ul><h3 id="正则化"><a href="#正则化" class="headerlink" title="正则化"></a>正则化</h3><h4 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h4><p>对于线性回归而言，其损失函数形式如下：</p><script type="math/tex; mode=display">    J(\theta)=\frac{1}{2m}\sum_{i=1}^{m}\left(h_{\theta}(x^{(i)})-y^{(i)}\right)^2</script><p>引入正则化之后的损失函数的形式为：</p><script type="math/tex; mode=display">    J(\theta)=\frac{1}{2m}\left(\sum_{i=1}^{m}(h_{\theta}(x^{(i)})-y^{(i)})^2+\lambda\sum_{j=1}^{n}\theta_{j}^2\right)</script><h5 id="GD迭代求解参数"><a href="#GD迭代求解参数" class="headerlink" title="GD迭代求解参数"></a>GD迭代求解参数</h5><p><strong>Repeat</strong>{</p><script type="math/tex; mode=display">    \theta_0:=\theta_0-\alpha\frac{1}{m}\sum_{i=1}^{m}\left(h_{\theta}(x^{(i)})-y^{(i)}\right)x_0^{(i)}</script><script type="math/tex; mode=display">    \theta_j:=\theta_j-\alpha\frac{1}{m}\left(\sum_{i=1}^{m}(h_{\theta}(x^{(i)})-y^{(i)})x_j^{(i)}+\lambda\theta_j\right)</script><p>}<br>梯度下降法的学习率$\alpha$需要提前指定，并且还要制定收敛标准。</p><h5 id="Normal-Equation"><a href="#Normal-Equation" class="headerlink" title="Normal Equation"></a>Normal Equation</h5><script type="math/tex; mode=display">\theta=\left(x^Tx+\lambda\begin{bmatrix}{0}&{0}&{\cdots}&{0}\\{0}&{1}&{\cdots}&{0}\\{\vdots}&{\vdots}&{\ddots}&{\vdots}\\{0}&{0}&{\cdots}&{1}\\\end{bmatrix}_{(n+1)(n+1)}\right)^{-1}x^Ty</script><p>上式是对线性回归正则化后的矩阵解。可以证明的是当$\lambda&gt;0$时，求逆符号内部的式子总是可逆的。</p><h4 id="逻辑回归"><a href="#逻辑回归" class="headerlink" title="逻辑回归"></a>逻辑回归</h4><p>在没有加入正则化之前，逻辑回归的损失函数的形式是这样的：</p><script type="math/tex; mode=display">J(\theta)=-\frac{1}{m}\sum_{i=1}^{m}\left(y^{(i)}\log\left(h_{\theta}(x^{(i)})\right)+(1-y^{(i)})\log\left(1-h_{\theta}(x^{(i)})\right)\right)</script><p>加入正则项之后的形式为：</p><script type="math/tex; mode=display">J(\theta)=-\frac{1}{m}\sum_{i=1}^{m}\left(y^{(i)}\log\left(h_{\theta}(x^{(i)})\right)+(1-y^{(i)})\log\left(1-h_{\theta}(x^{(i)})\right)\right)+\frac{\lambda}{2m}\sum_{j=1}^{n}\theta_j^2</script><h5 id="GD迭代求解参数-1"><a href="#GD迭代求解参数-1" class="headerlink" title="GD迭代求解参数"></a>GD迭代求解参数</h5><p><strong>Repeat</strong>{</p><script type="math/tex; mode=display">\theta_0:=\theta_0-\alpha\frac{1}{m}\sum_{i=1}^{m}\left(h_{\theta}(x^{(i)})-y^{(i)}\right)x_0^{(i)}</script><script type="math/tex; mode=display">\theta_j:=\theta_j-\alpha\frac{1}{m}\left(\sum_{i=1}^{m}(h_{\theta}(x^{(i)})-y^{(i)})x_j^{(i)}+\lambda\theta_j\right)</script><p>}</p><h2 id="SVM支持向量机"><a href="#SVM支持向量机" class="headerlink" title="SVM支持向量机"></a>SVM支持向量机</h2><p>支持向量机又被称作最大间距（Large Margin）分类器，损失函数的形式是：</p><script type="math/tex; mode=display">J(\theta)=C\sum_{i=1}^{m}\left(y^{(i)}cost_1\left(h_{\theta}(x^{(i)})\right)+(1-y^{(i)})cost_0\left(h_{\theta}(x^{(i)})\right)\right)+\frac{1}{2}\sum_{j=1}^{n}\theta_j^2</script><p>其中：$h_{\theta}(x^{(i)})=\theta^Tx^{i}$，$cost_1$以及$cost_0$的形式如下图所示：</p><script type="math/tex; mode=display">\begin{cases}\text{we want } \theta^Tx\ge1,  & \text{if $y$ =1} \\[2ex]\text{we want } \theta^Tx\le-1,  & \text{if $y$ =0}\end{cases}</script><p>在考虑到soft margin时的损失函数是hinge损失，<a href="http://breezedeus.github.io/2015/07/12/breezedeus-svm-is-hingeloss-with-l2regularization.html" target="_blank" rel="external">SVM就等价于Hinge损失函数+L2正则</a>。此时损失函数为0时候就对应着非支持向量样本的作用，“从而所有的普通样本都不参与最终超平面的决定，这才是支持向量机最大的优势所在，对训练样本数目的依赖大大减少，而且提高了训练效率”。<br>以下是七月在线大神July写的一篇关于SVM的介绍，个人觉得不错。分享下：<a href="https://coding.net/s/f03e79be-8200-46bb-b714-7bb4ef70c391" target="_blank" rel="external">支持向量机通俗导论（理解SVM的三层境界）</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;&lt;img src=&quot;/2017/05/07/机器学习修炼手册/ML.jpg&quot; alt=&quot;机器学习&quot; title=&quot;机器学习&quot;&gt;&lt;/center&gt;

&lt;p id=&quot;div-border-left-green&quot;&gt;对机器学习的学习我开始于二年级的《数据挖掘》课，当时袁老师对数据挖掘中的常用的算法做了一些介绍，但是这仅仅是个入门教学，我并没有深入了解的其中的原理。到现在我才深刻的意识到ML的重要性，我就抽空看了一些这方面的资料，整理了这一份文档。&lt;/p&gt;
    
    </summary>
    
      <category term="机器学习" scheme="https://www.vincentqin.tech/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="https://www.vincentqin.tech/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Machine Learning" scheme="https://www.vincentqin.tech/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Linux指令学习笔记</title>
    <link href="https://www.vincentqin.tech/2017/05/06/Linux%E6%8C%87%E4%BB%A4%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://www.vincentqin.tech/2017/05/06/Linux指令学习笔记/</id>
    <published>2017-05-06T09:04:20.000Z</published>
    <updated>2017-10-30T16:22:15.824Z</updated>
    
    <content type="html"><![CDATA[<center><img src="/2017/05/06/Linux指令学习笔记/ubuntu2.jpg" alt="Ubuntu" title="Ubuntu"></center><p>今天看了基本的<span id="inline-purple">Linux</span>指令以及<span id="inline-red">makefile</span>的写法，大体总结了一下。<br><a id="more"></a></p><h2 id="常用指令及意义"><a href="#常用指令及意义" class="headerlink" title="常用指令及意义"></a>常用指令及意义</h2><ul><li><strong>root</strong> 表示根目录</li><li><strong>cd</strong> path 切换到path目录， cd / 切换到根目录</li><li><strong>cat</strong> file.txt 查看file.txt中的内容</li><li><strong>pwd</strong>查看当前所在目录</li><li><strong>rmdir</strong>删除目录</li><li><strong>rm</strong> 删除文件</li><li><strong>ls</strong> 列出文件名字， ls -l 列出文件列表</li><li><strong>cp</strong> 复制文件 cp file1.txt file2.txt (复制file1并重命名为file2)</li><li><strong>head</strong> file.txt -n 7 查看file.txt的头7行</li><li><strong>tail</strong> file.txt -n 7 查看file.txt的末尾7行</li><li><strong>wc</strong> file.txt 统计file.txt文件中字符数，返回3个数字：row_size, word_number, character_number; <blockquote><p>-l 统计行数。即 wc -l file.txt<br>-m 统计字符数。这个标志不能与 -c 标志一起使用。<br>-w 统计字数。一个字被定义为由空白、跳格或换行字符分隔的字符串。<br>-L 打印最长行的长度。</p></blockquote></li><li><p><strong>mv</strong> 命令有2中功能</p><ul><li>移动文件夹：mv file.txt file</li><li>修改文件名: mv file1.txt file2.txt</li></ul></li><li><p><strong>chmod</strong> 修改用户权限，有3种用户，分别是：</p></li></ul><div class="table-container"><table><thead><tr><th>解释</th><th>u</th><th>g</th><th>o</th></tr></thead><tbody><tr><td>用户</td><td>user 作者</td><td>group小组</td><td>other其他 </td></tr><tr><td>读写运行</td><td>r w x</td><td>r w x</td><td>r w x </td></tr><tr><td>二进制</td><td>1 0 0</td><td>1 0 0</td><td>1 0 0 </td></tr><tr><td>十进制</td><td>4</td><td>4</td><td>4</td></tr></tbody></table></div><p>假如取消作者的写的权限则：<code>chmod u-w file.txt</code>，其中减号表示“去除”<br>假如添加作者的写的权限则：<code>chmod u+w file.txt</code>，其中减号表示“添加”<br>假如除了作者以外的人都没有读写权限：<code>chmod go-rfile.txt</code><br>同样可以用二进制设置权限 <code>chmod 444 file.txt</code>，表示：u,g,o都只有读的权限。</p><h2 id="脚本语言"><a href="#脚本语言" class="headerlink" title="脚本语言"></a>脚本语言</h2><p>就是将Linux命令集中在一起，组成一个文件，例如有一个test.sh脚本文件<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ls</div><div class="line">date</div><div class="line">cal</div></pre></td></tr></table></figure></p><ul><li>后缀名 .sh</li><li>运行 sh test.sh</li><li>变量赋值不用加空格, b=1, a=$b</li><li>输出 echo</li><li>字符串写不写双引号一样效果，但是还是推荐写双引号</li><li>大于号 -gt</li><li>小于号 -lt</li><li>等于号 -eq</li><li>大于等于 -ge</li><li>小于等于 -le</li><li>不等于 -ne</li></ul><h3 id="判断语句"><a href="#判断语句" class="headerlink" title="判断语句"></a>判断语句</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> [ expr ]</div><div class="line"><span class="keyword">then</span></div><div class="line">...</div><div class="line"><span class="keyword">else</span></div><div class="line">...</div><div class="line"><span class="keyword">fi</span></div></pre></td></tr></table></figure><h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> 1 2 3 4 5 6</div><div class="line"><span class="keyword">do</span></div><div class="line"> <span class="built_in">echo</span> <span class="variable">$x</span></div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>例如：arr=(1 2 3 5 6 3 4)<br>注意在运行时候不能继续用sh (1979脚本)；应该改用bash (后期脚本，有数组的时候就用bash)。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">arr=(1 2 5 9 8 6 5 4 3 2)</div><div class="line">max=<span class="variable">$&#123;arr[0]&#125;</span></div><div class="line"><span class="keyword">for</span> i = <span class="variable">$&#123;arr[@]&#125;</span></div><div class="line"><span class="keyword">do</span> </div><div class="line">    <span class="keyword">if</span> [ <span class="variable">$i</span> <span class="_">-gt</span> <span class="variable">$max</span> ]</div><div class="line">    <span class="keyword">then</span> </div><div class="line">        max=<span class="variable">$i</span></div><div class="line">    <span class="keyword">fi</span></div><div class="line"><span class="keyword">done</span></div><div class="line"><span class="built_in">echo</span> max= <span class="variable">$max</span></div></pre></td></tr></table></figure><h2 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h2><ul><li>$USER</li><li>$HOME   可以用 ~ 代替</li><li>环境变量 $PATH,将一个路径加入这个全局变量:<br><code>PATH=$PATH:/home/vincent/tutorial</code> (注意所有的路径都是用冒号间隔开的，)</li></ul><h2 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h2><h3 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h3><ul><li>把几个文件打包成file.zip, <code>zip file.zip *</code> (星号的意思是打包所有的文档)</li><li>把全部的子文件夹都递归打包 <code>zip file.zip -r files/*</code></li><li>利用tar命令： <code>tar -zcvf file.tar.gz files/</code></li></ul><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><ul><li>利用tar命令： <code>tar -zxvf file.tar.gz</code></li></ul><h3 id="下载命令"><a href="#下载命令" class="headerlink" title="下载命令"></a>下载命令</h3><ul><li>wget</li><li>下载后重命名 <code>wget web_address -O file.tar.gz</code> 注意用<code>-O</code></li></ul><h2 id="makefile的写法"><a href="#makefile的写法" class="headerlink" title="makefile的写法"></a>makefile的写法</h2><p>当编译代码的时候，如果有很多子文件，gcc 后面的语句非常长，我们可以选择使用makefile来对其进行处理以加速编译速度并加强可读性。基本的语句是如下所示的格式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Target: dependencies</div><div class="line">(tab键) command</div></pre></td></tr></table></figure></p><ul><li>其中Target表示目标，例如最后想把所有的.c .o 文件们打包成main,那么Target就是main</li><li>dependencies表示依赖项们，即所有的.c .h .o</li><li>command为命令即如：gcc test.c -o test</li></ul><p><strong>例如我们想把tool.c 和main.c 打包成main.o的目标文件</strong>, 则makefile的写法为：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">main: main.c tool.o</div><div class="line">    gcc main.c tool.o -o main</div></pre></td></tr></table></figure></p><p>但是我们发现并没有tool.o文件所以，还要把tool.o怎么来的说明一下：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">tool.o: tool.c</div><div class="line">    gcc -c tool.c</div></pre></td></tr></table></figure></p><p><strong>注意</strong>：<code>gcc -c</code>表示直接把tool.c编译成目标文件tool.o<br>最后呢，如果代码开源的话一般不需要保留.o文件以及main，所以最后还需要把所有的.o以及main文件删除，我们需要在makefile文件的最后添加如下代码：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">clean: </div><div class="line">    rm *.o main</div></pre></td></tr></table></figure></p><p>最后这个makefile可以写成：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">main: main.c tool.o</div><div class="line">    gcc main.c tool.o -o main</div><div class="line">tool.o: tool.c</div><div class="line">    gcc -c tool.c</div><div class="line">clean: </div><div class="line">    rm *.o main</div></pre></td></tr></table></figure></p><p>如果编译器不是gcc，而是其他的编译器，这时候我们有必要做一下代换来提高代码的可移植性。令：CC=gcc， 在引用的时候 $(CC)<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">CC=gcc</div><div class="line">main: main.c tool.o</div><div class="line">    $(CC) main.c tool.o -o main</div><div class="line">tool.o: tool.c</div><div class="line">    $(CC) -c tool.c</div><div class="line">clean: </div><div class="line">    rm *.o main</div></pre></td></tr></table></figure></p><p>例如有test1.c，test2.c，它们分别实现了查找最大值和最小值的功能；然后我们把这两个函数的声明分别放在Max.h和Min.h里面，最后我们在主函数main.c里面包含这两个头文件，然后调用这个两个求最大最小值的函数。 </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">CC=gcc</div><div class="line">main: main.c Max.o Min.o</div><div class="line">    $(CC) main.c Max.o Min.o -o main</div><div class="line">Max.o: <span class="built_in">test</span>1.c</div><div class="line">    $(CC) <span class="built_in">test</span>1.c -o Max</div><div class="line">Min.o: <span class="built_in">test</span>2.c</div><div class="line">    $(CC) <span class="built_in">test</span>2.c -o M<span class="keyword">in</span></div><div class="line">clean: </div><div class="line">    rm *.o main</div></pre></td></tr></table></figure><p>如果还有第三方的库文件，我们如何链接呢？<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">CC=gcc</div><div class="line">CFLAGS=-lm -Wall -g</div><div class="line">main: main.c Max.o Min.o</div><div class="line">    $(CC) $(CFLAGS) main.c Max.o Min.o -o main</div><div class="line">Max.o: <span class="built_in">test</span>1.c</div><div class="line">    $(CC) $(CFLAGS) <span class="built_in">test</span>1.c -o Max</div><div class="line">Min.o: <span class="built_in">test</span>2.c</div><div class="line">    $(CC) $(CFLAGS) <span class="built_in">test</span>2.c -o M<span class="keyword">in</span></div><div class="line">clean: </div><div class="line">    rm *.o main</div></pre></td></tr></table></figure></p><p>未完待续，需要学习的知识太多了，深深地感觉到了自己的无知:(</p>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;&lt;img src=&quot;/2017/05/06/Linux指令学习笔记/ubuntu2.jpg&quot; alt=&quot;Ubuntu&quot; title=&quot;Ubuntu&quot;&gt;&lt;/center&gt;

&lt;p&gt;今天看了基本的&lt;span id=&quot;inline-purple&quot;&gt;Linux&lt;/span&gt;指令以及&lt;span id=&quot;inline-red&quot;&gt;makefile&lt;/span&gt;的写法，大体总结了一下。&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://www.vincentqin.tech/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://www.vincentqin.tech/tags/Linux/"/>
    
      <category term="Shell脚本" scheme="https://www.vincentqin.tech/tags/Shell%E8%84%9A%E6%9C%AC/"/>
    
      <category term="makefile" scheme="https://www.vincentqin.tech/tags/makefile/"/>
    
  </entry>
  
  <entry>
    <title>初试HCI光场数据集</title>
    <link href="https://www.vincentqin.tech/2017/04/30/%E5%88%9D%E8%AF%95HCI%E5%85%89%E5%9C%BA%E6%95%B0%E6%8D%AE%E9%9B%86/"/>
    <id>https://www.vincentqin.tech/2017/04/30/初试HCI光场数据集/</id>
    <published>2017-04-30T06:22:20.000Z</published>
    <updated>2017-10-30T16:22:16.445Z</updated>
    
    <content type="html"><![CDATA[<center><img src="/2017/04/30/初试HCI光场数据集/buddha2.gif" alt="Buddha2" title="Buddha2"></center><p id="div-border-left-green"> 好的数据集是做出漂亮实验的必要条件</p><a id="more"></a><p><span id="inline-red">声明</span>：一切理解都是本人观点，如有错误，还望指出。如需转载请与本人联系，谢谢合作！邮箱：<a href="mailto:qin123yw@163.com" target="_blank" rel="external">qin123yw@163.com</a></p><h2 id="Wanner光场数据集"><a href="#Wanner光场数据集" class="headerlink" title="Wanner光场数据集"></a>Wanner光场数据集</h2><p>目前光场数据集有如下几种主流的数据集：</p><ol><li><a href="http://lightfield.stanford.edu/lfs.html" target="_blank" rel="external">斯坦福大学光场数据集</a></li><li><a href="http://lightfieldgroup.iwr.uni-heidelberg.de/?page_id=713" target="_blank" rel="external">Wanner(HCI)数据集</a>(Old 4D Light Field Benchmark)</li><li><a href="http://hci-lightfield.iwr.uni-heidelberg.de/" target="_blank" rel="external">4D Light Field Dataset</a>(Konstanz大学与Heidelberg大学的HCI合作,New 4D Light Field Benchmark)</li></ol><p>下面对Wanner数据集进行讨论。学习光场的同学应该很熟悉Wanner提供的数据集共有<strong>10</strong>个场景，分别是：</p><ol><li>Buddha</li><li>Buddha2</li><li>Couple</li><li>Cube</li><li>Mona</li><li>Medieval</li><li>Papillon</li><li>StillLife</li><li>Horses</li><li>rx_watch</li></ol><p>其中，1-8为仿真场景，9-10是由Raytrix拍摄的场景。他们的文件后缀为 .h5, 格式是HDF5，这是一种文件组织格式，可以很好的将数据组织在一起，具体不做展开。MATLAB 提供了一系列相应的读取该文件的函数，如：h5disp，hdf5info(新版本用h5info)，hdf5read等函数，如利用h5disp就可以得到HDF5文件的内容信息，如下图：</p><center><img src="/2017/04/30/初试HCI光场数据集/Buddha2Hd5.gif" alt="Buddha2" title="Buddha2"></center><p>以下给出解码HDF5文件得到子孔径图像以及重排图像的代码：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">input_file       = <span class="string">'Buddha2.h5'</span>; <span class="comment">% file name</span></div><div class="line">input_folder     = <span class="string">''</span>;           <span class="comment">% your datasets folder</span></div><div class="line"></div><div class="line">[pathstr,name,ext] = fileparts([input_folder <span class="string">'/'</span> input_file]);</div><div class="line">file_path=[pathstr,name,ext];</div><div class="line"></div><div class="line">hinfo_data = hdf5info(file_path);</div><div class="line"><span class="keyword">if</span> strcmp(file_path,<span class="string">'Cube'</span>) || strcmp(file_path,<span class="string">'Couple'</span>)</div><div class="line">data = hdf5read(hinfo_data.GroupHierarchy.Datasets(<span class="number">3</span>));</div><div class="line"><span class="keyword">else</span></div><div class="line">data = hdf5read(hinfo_data.GroupHierarchy.Datasets(<span class="number">2</span>));</div><div class="line"><span class="keyword">end</span></div><div class="line">data = <span class="built_in">permute</span>(data, [<span class="number">3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">5</span> <span class="number">4</span>]);</div><div class="line">data = im2double(data(:, :, :, :, <span class="keyword">end</span>:<span class="number">-1</span>:<span class="number">1</span>));</div><div class="line"><span class="comment">% parameters from input</span></div><div class="line">UV_diameter = <span class="built_in">size</span>(data, <span class="number">4</span>);                   <span class="comment">% angular resolution</span></div><div class="line">UV_radius    = <span class="built_in">floor</span>(UV_diameter/<span class="number">2</span>);           <span class="comment">% half angular resolution</span></div><div class="line">h                  = <span class="built_in">size</span>(data, <span class="number">1</span>);            <span class="comment">% spatial image height</span></div><div class="line">w                  = <span class="built_in">size</span>(data, <span class="number">2</span>);            <span class="comment">% spatial image width</span></div><div class="line">y_size=h;</div><div class="line">x_size=w;</div><div class="line">UV_size=UV_diameter^<span class="number">2</span>;</div><div class="line">LF_y_size   = h * UV_diameter;                 <span class="comment">% total image height</span></div><div class="line">LF_x_size   = w * UV_diameter;                 <span class="comment">% total image width</span></div><div class="line">LF_Remap    = <span class="built_in">reshape</span>(<span class="built_in">permute</span>(data, ...</div><div class="line">   [<span class="number">4</span> <span class="number">1</span> <span class="number">5</span> <span class="number">2</span> <span class="number">3</span>]), [LF_y_size LF_x_size <span class="number">3</span>]); <span class="comment">% the remap image</span></div><div class="line">IM_Pinhole = data(:,:,:,UV_radius+<span class="number">1</span>,UV_radius+<span class="number">1</span>); <span class="comment">% the pinhole image</span></div></pre></td></tr></table></figure><p>经过以上步骤可以得到相应的中心视角图像以及Remap（重排）之后的图像，从而进一步方便接下来的工作，例如基于该数据集的深度图像估计算法估计。</p><h2 id="HCI-4D光场数据集-4D-Light-Field-Benchmark"><a href="#HCI-4D光场数据集-4D-Light-Field-Benchmark" class="headerlink" title="HCI 4D光场数据集(4D Light Field Benchmark)"></a>HCI 4D光场数据集(4D Light Field Benchmark)</h2><p id="div-border-left-red">The 4D Light Field Benchmark was jointly created by the University of Konstanz and the HCI at Heidelberg University.</p><p>上周整理上一篇博客的时候，想再次查看HCI数据集是否更新，结果惊喜地看到它竟然更新了！激动之余，就连夜把数据以及代码下载了下来，看看这个数据集的庐山真面目。</p><h3 id="数据集概况"><a href="#数据集概况" class="headerlink" title="数据集概况"></a>数据集概况</h3><p>这个数据集共有4大类：</p><ul><li>Stratified（4）</li><li>training（4）</li><li>test（4）</li><li>additional（16）<center><img src="/2017/04/30/初试HCI光场数据集/scenes.png" alt="数据集们" title="数据集们"></center></li></ul><p>总结而言这个4D光场数据集提供了如下信息：</p><ul><li>9x9x512x512x3 light fields as individual PNGs（角度分辨率：9×9，空间分辨率：512×512）</li><li>Config files with camera settings and disparity ranges（相机配置文件以及视差范围）</li><li>Per center view (except for the 4 test scenes):（除了测试类外每类的中心视角图像）<ul><li>512×512 and 5120×5120 depth and disparity maps as PFMs（深度图像以及视差图：512×512低分辨率，以及5120×5120高分辨率）</li><li>512×512 and 5120×5120 evaluation masks as PNGs（png格式的评价掩膜：512×512低分辨率，以及5120×5120高分辨率）</li></ul></li><li>16组additional的每个视角的Ground Truth Depth图像（pfm格式）</li></ul><h3 id="数据集下载"><a href="#数据集下载" class="headerlink" title="数据集下载"></a>数据集下载</h3><p>开始下载吧！在<a href="http://hci-lightfield.iwr.uni-heidelberg.de/" target="_blank" rel="external">该页面</a>的<code>get the data</code>处填写自己的邮箱，然后点击<code>request download links</code>。接下来你的邮箱里就会出现这个数据集的下载链接，链接有点多，你可以选择性的下载或者全部下载。方便起见，我把邮件中提供的链接贴在了下面：</p><ul><li><p><a href="http://lightfield-analysis.net/benchmark/downloads/benchmark.zip" target="_blank" rel="external">Benchmark package with the 12 benchmark scenes</a></p></li><li><p><a href="http://lightfield-analysis.net/benchmark/downloads/full_data.zip" target="_blank" rel="external"><strong>Full package with all 28 scenes</strong></a>(这是全部的场景，共28类；注意不包含深度图像)</p></li></ul><ul><li>Packages per category:<ul><li><a href="http://lightfield-analysis.net/benchmark/downloads/stratified.zip" target="_blank" rel="external">stratified</a></li><li><a href="http://lightfield-analysis.net/benchmark/downloads/test.zip" target="_blank" rel="external">test</a></li><li><a href="http://lightfield-analysis.net/benchmark/downloads/training.zip" target="_blank" rel="external">training</a></li><li><a href="http://lightfield-analysis.net/benchmark/downloads/additional.zip" target="_blank" rel="external">additional</a></li></ul></li></ul><ul><li>Stratified scenes:<ul><li><a href="http://lightfield-analysis.net/benchmark/downloads/backgammon.zip" target="_blank" rel="external">backgammon</a></li><li><a href="http://lightfield-analysis.net/benchmark/downloads/dots.zip" target="_blank" rel="external">dots</a></li><li><a href="http://lightfield-analysis.net/benchmark/downloads/pyramids.zip" target="_blank" rel="external">pyramids</a></li><li><a href="http://lightfield-analysis.net/benchmark/downloads/stripes.zip" target="_blank" rel="external">stripes</a></li></ul></li></ul><ul><li>Test scenes:<ul><li><a href="http://lightfield-analysis.net/benchmark/downloads/bedroom.zip" target="_blank" rel="external">bedroom</a></li><li><a href="http://lightfield-analysis.net/benchmark/downloads/bicycle.zip" target="_blank" rel="external">bicycle</a></li><li><a href="http://lightfield-analysis.net/benchmark/downloads/herbs.zip" target="_blank" rel="external">herbs</a></li><li><a href="http://lightfield-analysis.net/benchmark/downloads/origami.zip" target="_blank" rel="external">origami</a></li></ul></li></ul><ul><li>Training scenes:<ul><li><a href="http://lightfield-analysis.net/benchmark/downloads/boxes.zip" target="_blank" rel="external">boxes</a></li><li><a href="http://lightfield-analysis.net/benchmark/downloads/cotton.zip" target="_blank" rel="external">cotton</a></li><li><a href="http://lightfield-analysis.net/benchmark/downloads/dino.zip" target="_blank" rel="external">dino</a></li><li><a href="http://lightfield-analysis.net/benchmark/downloads/sideboard.zip" target="_blank" rel="external">sideboard</a></li></ul></li></ul><ul><li><p>Additional scenes:</p><ul><li><a href="http://lightfield-analysis.net/benchmark/downloads/antinous.zip" target="_blank" rel="external">antinous</a></li><li><a href="http://lightfield-analysis.net/benchmark/downloads/boardgames.zip" target="_blank" rel="external">boardgames</a></li><li><a href="http://lightfield-analysis.net/benchmark/downloads/dishes.zip" target="_blank" rel="external">dishes</a></li><li><a href="http://lightfield-analysis.net/benchmark/downloads/greek.zip" target="_blank" rel="external">greek</a></li><li><a href="http://lightfield-analysis.net/benchmark/downloads/kitchen.zip" target="_blank" rel="external">kitchen</a></li><li><a href="http://lightfield-analysis.net/benchmark/downloads/medieval2.zip" target="_blank" rel="external">medieval2</a></li><li><a href="http://lightfield-analysis.net/benchmark/downloads/museum.zip" target="_blank" rel="external">museum</a></li><li><a href="http://lightfield-analysis.net/benchmark/downloads/pens.zip" target="_blank" rel="external">pens</a></li><li><a href="http://lightfield-analysis.net/benchmark/downloads/pillows.zip" target="_blank" rel="external">pillows</a></li><li><a href="http://lightfield-analysis.net/benchmark/downloads/platonic.zip" target="_blank" rel="external">platonic</a></li><li><a href="http://lightfield-analysis.net/benchmark/downloads/rosemary.zip" target="_blank" rel="external">rosemary</a></li><li><a href="http://lightfield-analysis.net/benchmark/downloads/table.zip" target="_blank" rel="external">table</a></li><li><a href="http://lightfield-analysis.net/benchmark/downloads/tomb.zip" target="_blank" rel="external">tomb</a></li><li><a href="http://lightfield-analysis.net/benchmark/downloads/tower.zip" target="_blank" rel="external">tower</a></li><li><a href="http://lightfield-analysis.net/benchmark/downloads/town.zip" target="_blank" rel="external">town</a></li><li><a href="http://lightfield-analysis.net/benchmark/downloads/vinyl.zip" target="_blank" rel="external">vinyl</a></li></ul></li></ul><ul><li><a href="http://lightfield-analysis.net/benchmark/downloads/additional_depth_disp_all_views.zip" target="_blank" rel="external">Depth and disparity maps for all views of the additional scenes</a></li></ul><h3 id="数据集初体验"><a href="#数据集初体验" class="headerlink" title="数据集初体验"></a>数据集初体验</h3><h4 id="测试代码下载"><a href="#测试代码下载" class="headerlink" title="测试代码下载"></a>测试代码下载</h4><p>在其官方给出的<a href="https://github.com/lightfield-analysis/matlab-tools" target="_blank" rel="external">代码页面</a>下载测试程序，下载完毕后将convert*.m以及lib文件夹其放置在与上述数据集同级目录。例如：TEST目录下同时包括：convert.m 以及 lib/， 同样也包含 additional/, stratified/, test/, 以及 training/。</p><h4 id="生成LF-mat"><a href="#生成LF-mat" class="headerlink" title="生成LF.mat"></a>生成LF.mat</h4><ul><li>convertAll. 对于每一个场景都声称一个<code>LF.mat</code>文件</li></ul><p>如果我们仅仅下载了几个场景我们可以利用如下函数得到相应的<code>LF.mat</code></p><ul><li>convertBlenderTo5D(‘FOLDER’)</li></ul><p>这个LF.mat中包含该场景的光场信息诸如：</p><ul><li>光场数据 (LF.LF)</li><li>真实值 (LF.depth/disp_high/lowres)</li><li>评价掩膜（mask）</li><li>中心视角图像</li></ul><p><span id="inline-red">注意</span>：生成LF.mat的过程用到的参数通过加载相应文件夹下parameters.cfg得到，并将其存储在了LF.parameters中；H变换矩阵存储在了LF.H中（可以参考论文<a href="http://www-personal.acfr.usyd.edu.au/ddan1654/PlenCal.pdf" target="_blank" rel="external">“Decoding, Calibration and Rectification for Lenselet-Based Plenoptic Cameras” </a>）；两个平面的距离存储在LF.f, 单位 [mm]； 相机焦距：LF.parameters.intrinsics.focal_length_mm.</p><h4 id="生成点云（Point-Cloud）"><a href="#生成点云（Point-Cloud）" class="headerlink" title="生成点云（Point Cloud）"></a>生成点云（Point Cloud）</h4><p>接下来我以<strong>additional</strong>文件下的<strong><code>antinous</code></strong>为例子展示如何利用深度图像（官方利用视差）与纹理图像生成点云。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">filename=<span class="string">'antinous'</span>;</div><div class="line">addpath(<span class="string">'lib'</span>);</div><div class="line"><span class="comment">% 得到antinous的LF.mat</span></div><div class="line">convertBlenderTo5D([<span class="string">'additional/'</span>,filename])</div><div class="line">load([<span class="string">'additional/'</span>,filename,<span class="string">'/LF.mat'</span>]);</div><div class="line"></div><div class="line">img=LF.LF(<span class="number">5</span>,<span class="number">5</span>,:,:,:); <span class="comment">%中心视角，用于着色</span></div><div class="line">r=img(:,:,<span class="number">1</span>);</div><div class="line">g=img(:,:,<span class="number">2</span>);</div><div class="line">b=img(:,:,<span class="number">3</span>);</div><div class="line"></div><div class="line"><span class="comment">% 深度图读取</span></div><div class="line">d=pfmread([<span class="string">'additional_depth_disp_all_views\',filename,'</span>\gt_disp_lowres_Cam025.pfm<span class="string">']);</span></div><div class="line">d=mat2gray(d);</div><div class="line"></div><div class="line">mkdir(['PointClouds-color/<span class="string">',filename]);建立一个文件夹存储图片</span></div><div class="line"></div><div class="line">[ X,Y,Z ] = getPointcloud(LF,'disp<span class="string">',d);</span></div><div class="line">ptCloud1 = pointCloud([X(:),Y(:),Z(:)],'color<span class="string">',[r(:) g(:) b(:)]);</span></div><div class="line"></div><div class="line">h1=figure(1);</div><div class="line">pcshow(ptCloud1);</div><div class="line"></div><div class="line">axis off</div><div class="line">set(gcf,'color<span class="string">',[1 1 1])</span></div><div class="line">set(gcf,'Position<span class="string">',[800,300,600,600], '</span>color<span class="string">','</span>w<span class="string">')</span></div><div class="line">view(90.6338,  88.5605);</div><div class="line">zoom(1.2)</div></pre></td></tr></table></figure><p>结果如下所示：</p><center><img src="/2017/04/30/初试HCI光场数据集/PCs.gif" alt="点云" title="点云"></center><p><span id="inline-red">注意</span>：生成点云这一步，低版本的MATLAB（如R2014a）由于没有加入相应的函数所以不能够生成点云，高版本（R2016b）可以正常生成。</p>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;&lt;img src=&quot;/2017/04/30/初试HCI光场数据集/buddha2.gif&quot; alt=&quot;Buddha2&quot; title=&quot;Buddha2&quot;&gt;&lt;/center&gt;

&lt;p id=&quot;div-border-left-green&quot;&gt; 好的数据集是做出漂亮实验的必要条件&lt;/p&gt;
    
    </summary>
    
      <category term="计算机视觉" scheme="https://www.vincentqin.tech/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
    
      <category term="Light Field" scheme="https://www.vincentqin.tech/tags/Light-Field/"/>
    
      <category term="光场" scheme="https://www.vincentqin.tech/tags/%E5%85%89%E5%9C%BA/"/>
    
      <category term="计算成像" scheme="https://www.vincentqin.tech/tags/%E8%AE%A1%E7%AE%97%E6%88%90%E5%83%8F/"/>
    
      <category term="点云Point Cloud" scheme="https://www.vincentqin.tech/tags/%E7%82%B9%E4%BA%91Point-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>实习季到了，大家又浮躁了起来</title>
    <link href="https://www.vincentqin.tech/2017/04/16/%E5%AE%9E%E4%B9%A0/"/>
    <id>https://www.vincentqin.tech/2017/04/16/实习/</id>
    <published>2017-04-16T12:48:20.000Z</published>
    <updated>2017-10-30T16:22:16.507Z</updated>
    
    <content type="html"><![CDATA[<center><img src="/2017/04/16/实习/intern.jpg" alt="Intern" title="Intern"></center><p id="div-border-left-red">实习季堪比就业季，今年的形势尤其严峻。伴随着忐忑的心情，我迎来了这个不得不面对的时期。</p><a id="more"></a><h1 id="阿里巴巴视觉算法工程师"><a href="#阿里巴巴视觉算法工程师" class="headerlink" title="阿里巴巴视觉算法工程师"></a>阿里巴巴视觉算法工程师</h1><h2 id="算法与视觉部分"><a href="#算法与视觉部分" class="headerlink" title="算法与视觉部分"></a>算法与视觉部分</h2><ul><li>BF，NN的区别</li><li>激活函数的种类</li><li>怎么防止过拟合</li><li>CUDA的内存模型</li><li>HMM是什么</li><li>SVM的优缺点</li><li>SVD分解的过程</li><li>PCA过程</li><li>光流法</li><li>模版匹配SSD与NCC的优缺点</li><li>有哪些形态学操作</li><li>相机畸变的参数到底有哪些</li><li>交叉熵的概念</li><li>Sift与Surf的区别</li><li>由前序遍历与中序遍历求后序遍历</li><li>深度优先遍历可能的顺序</li></ul><p><br></p><h1 id="腾讯基础研究实习生"><a href="#腾讯基础研究实习生" class="headerlink" title="腾讯基础研究实习生"></a>腾讯基础研究实习生</h1><center><img src="/2017/04/16/实习/Tencent.png" alt="Tencent HomePage" title="Tencent HomePage"></center><p id="div-border-left-green"> 上机考试包括很多数学方面的知识，比考研数学简单多了，但是范围很广，我想过了这么久大家都忘记了吧。概率论部分占了不少题目，尤其要注意后验概率以及假设检验的题目。基础研究没有编程题目！</p><h2 id="数学部分"><a href="#数学部分" class="headerlink" title="数学部分"></a>数学部分</h2><ul><li>特征值与特征向量：Ax=λx</li><li>假设检验，第一类错误与第二类错误</li><li>求解偏导数</li><li>切比雪夫不等式</li><li>F分布的性质</li></ul><h2 id="简答部分"><a href="#简答部分" class="headerlink" title="简答部分"></a>简答部分</h2><ul><li>假设检验来确定零件是否符合标准（可以查看概率论的部分例题）</li><li>神经网络以及SVM的对比，优缺点介绍</li><li>根据某项调查研究，来确定某结论的正确性；</li></ul><h2 id="现场面试部分"><a href="#现场面试部分" class="headerlink" title="现场面试部分"></a>现场面试部分</h2><h3 id="一面"><a href="#一面" class="headerlink" title="一面"></a>一面</h3><p>主要包括以下部分：</p><ul><li>自我介绍（1分钟内）</li><li>项目经历（占了60%时间）</li><li>编程题目（反转链表，可参考<strong>《剑指offer》</strong>）</li><li>意向，做工程还是做算法<br>(ps: 被腾讯挂掉了，惨啊)</li></ul><h3 id="一面（数据挖掘）"><a href="#一面（数据挖掘）" class="headerlink" title="一面（数据挖掘）"></a>一面（数据挖掘）</h3><p>猝不及防地又来了一波电话面试，我一脸懵逼的节奏，完全没有准备。我是小白有没有，面试官主要问了以下几个问题：</p><ul><li>解释方差，协方差以及样本方差的概念</li><li>解释过拟合以及过拟合的概念以及预防措施</li><li>解释TCP滑动窗口的概念（这是啥？）</li><li>求超级长数组的中位数</li><li>析构函数是否可以为虚函数（我是C++小白）</li><li>项目介绍</li></ul><p><br></p><h1 id="商汤算法实习生"><a href="#商汤算法实习生" class="headerlink" title="商汤算法实习生"></a>商汤算法实习生</h1><center><img src="/2017/04/16/实习/sensetime.png" alt="sensetime.png" title=""></center><h2 id="在线笔试"><a href="#在线笔试" class="headerlink" title="在线笔试"></a>在线笔试</h2><p id="div-border-left-green"> 本人申请的岗位是见习算法研究员，笔试1个小时，20道选择填空题，3道编程题。时间略紧。涉及面也非常广，数学，智力，概率统计，线代矩阵，图形学，机器学习，神经网络，C++，均有涉及。</p><h3 id="一、选择填空题-部分-："><a href="#一、选择填空题-部分-：" class="headerlink" title="一、选择填空题(部分)："></a>一、选择填空题(部分)：</h3><ol><li><p>S市A，B共有两个区，人口比例为3：5，据历史统计A的犯罪率为0.01%，B区为0.015%，现有一起新案件发生在S市，那么案件发生在A区的可能性有多大?  (概率题，考查贝叶斯公式，牛客网有)</p></li><li><p>A = [1, 2 ; 2, 1]，求A的k次方。(线代，对A进行对角化，求特征值以及特征方程)</p></li><li><p><strong>git</strong>常用命令，克隆到本地是（），提交到仓库区（），取回远程仓库的变化，并与本地分支合并（）,  推送所有分支到远程仓库（），显示有变更的文件（）(答：clone, commit, pull, push, status)</p></li><li><p>表示矩阵需要多少个数字，表示矩阵的投影需要多少个数字?</p></li><li><p>给出先序序列，中序序列，求后序序列。</p></li><li><p>一个关于继承和虚函数问题。</p></li><li><p>掷两个骰子，得到两个数字A,B，设 C = A+B，那么设 C 除以4 的余数为0，1，2，3的概率分别为p0, p1, p2, p3，求它们的大小关系。</p></li><li><p>图片分辨率为512x512，pad = 2, stride = 3, kernel_size = 9, group = 4, 求卷积后输出分辨率大小。</p></li><li><p>一个关于图形自由度的问题。（本人完全没概念，所以题目具体记不清了）</p></li><li><p>以下哪个不能使用迭代器？a) map, b) set, c) queue, d) vector.  (c)</p></li><li><p>有两个样本点，第一个点为正样本,它的特征向量是(0,-1);第二个点为负样本,它的特征向量是(2,3),从这两个样本点组成的训练集构建一个线性SVM分类器的分类面方程是() （<a href="https://www.nowcoder.com/questionTerminal/104e95c6a13d464a86eb6b657cc545c0" target="_blank" rel="external">答案猛击这里</a>）</p></li><li><p>在一个无序数组中，求前k个最小数字，复杂度最小为？</p></li><li><p>根据以下程序：求func(500)的值。(经典问题，相当于求500的二进制中1的个数，《剑指offer》)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">(x)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> countx = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(x)</div><div class="line">    &#123;</div><div class="line">          countx ++;</div><div class="line">          x = x&amp;(x<span class="number">-1</span>);</div><div class="line">     &#125;</div><div class="line">    <span class="keyword">return</span> countx;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>在其他条件不变的前提下，以下哪种做法容易引起机器学习中的过拟合问题（）<br>a) 增加训练集量<br>b) 减少神经网络隐藏层节点数<br>c) 删除稀疏的特征<br>d) SVM算法中使用高斯核/RBF核代替线性核</p></li><li><p>关于vector初始化的一个问题。</p></li><li><p>有4个车站连通情况如下，每辆车每天都会等概率随机从一个车站出发，然后在某个车站呆一夜，第二天再出发。求稳定之后，每个车站的车辆比例。<br><center><img src="/2017/04/16/实习/question.png" alt="question.png" title=""></center><br>( 根据马尔科夫链 平稳分布，π=πP( P为转移概率矩阵)，和π1+π2+π3+π4=1，同时π1=π4, π2 = π3。可以求得2:3:3:2 ）</p></li></ol><h3 id="二、编程题"><a href="#二、编程题" class="headerlink" title="二、编程题:"></a>二、编程题:</h3><ol><li><p>连续子数组的最大和。（leetcode或剑指offer原题）</p></li><li><p>Minimum Window Substring .(leetcode 原题)</p></li></ol><p>特别鸣谢<a href="http://blog.csdn.net/smallplum123/article/details/69938232" target="_blank" rel="external">smallpum123</a>的商汤回忆版！</p><h2 id="现场面试"><a href="#现场面试" class="headerlink" title="现场面试"></a>现场面试</h2><blockquote><p>4月25日，从学校匆匆到了商汤科技进行面试，幸亏提前到了1个小时，要不然就被淋成落汤鸡了。</p></blockquote><p>一共有两个面试官依次面了我，这两名面试官的侧重点不同，第一位是大体了解面试对象，第二位面试官更加具体深入了解面试者。</p><ol><li>第一个面试官简单地聊了一段时间，首先是自我介绍，然后是项目经历，最常用的编程语言（我说的是Matlab），然后又问了我有没有用过Matlab的高级函数（bsxfun、ismember等），其他的没有很深入地讨论项目细节。（20 min）</li><li>接下来就是第二个面试官，还是重复前面的问题，自我介绍，项目经历，不过这次更加具体了。因为我的方向是做一些基于光场相机的深度图像估计研究的，面试官就问了我关于光场相机原理以及深度估计算法细节方面的东西；然后又问了我第二个基于GPU加速的项目，具体是如何加速代码的（该项目偏工程，没有具体展开）。项目的最后又问了我这些工程的代码量有多大，多少行的样子（我说最少得两、三千行吧）。</li><li>最后就是编程题目，面试官问我关于商汤在线评测代码书写的问题，我的回答是：对于<strong>连续子数组的最大和问题</strong>仅仅写了思路，没有写全代码。然后就是让我现场手写代码了，大概修改了4遍的样子，终于“调试”（所谓调试就是，现场测试代码一步一步写出结果）成功。（60 min）</li><li>当然，面试的最后通常面试官都会问面试者想要了解公司的事情，我就如实将我想要知道的事情想他请假了一下下，然后就没有然后了…</li></ol><p>经过大概一个半小时，面试结束。无论结果如何，我的心情瞬间轻松许多。还是静候佳音吧~</p><h2 id="电话面试"><a href="#电话面试" class="headerlink" title="电话面试"></a>电话面试</h2><p>由香港那边的负责人对我进行了远程电话面试，主要包括自我介绍以及项目介绍，重点在项目介绍上面。Ps：当时电话那头是两位面试官听着我的陈述，我竟然浑然不知。就这样过了40分钟，结束。等待的时间最为忐忑，我觉得自己表现平平，不知道给面试官留下了什么印象。</p><h2 id="顺利通过"><a href="#顺利通过" class="headerlink" title="顺利通过"></a>顺利通过</h2><p>经过一个漫长的劳动节并时逢校庆的假期，5月6号的下午收到了HR打来的电话，成功通过面试，现在心情还是特别激动。</p><p><br></p><h1 id="搜狐图像处理实习生"><a href="#搜狐图像处理实习生" class="headerlink" title="搜狐图像处理实习生"></a>搜狐图像处理实习生</h1><center><img src="/2017/04/16/实习/qf56.png" alt="千帆直播" title="千帆直播"></center><p>初选简历过关之后进行面试。</p><h2 id="笔试（60min）"><a href="#笔试（60min）" class="headerlink" title="笔试（60min）"></a>笔试（60min）</h2><p>根据应聘的实习岗做不同的题目，因为我面的是千帆直播下的图像处理岗位，所以我的题目中有很多关于这方面的相关知识。以下是我的会议版本：</p><ol><li>do while 和while do 的区别</li><li>char const *p 与char * const p 的区别(答：p都是指向const char类型的指针, 不可以赋值给*p, 就是不可通过这个指针改变它指向的值; 第二个: char * const p是指向char的常指针, 指针需在声明时就初始化, 之后不可以改变它的指向)</li><li>创建并且初始化一个双向链表</li><li>代码实现二分查找</li><li>对一个WAV格式的文件头用适当的数据结构进行表示</li><li>队列与栈的区别，分别以什么数据结构表示</li><li>常见的视频压缩方法，视频格式，音频格式</li><li>汇编语言和C/C++混合编程有哪些方法</li><li>如何引用一个已经定义好的全局变量，并比较异同</li><li>gdb如何调试线程，多线程呢（ps:我根本不会这个题目）</li><li>解释“熵”的概念（答：熵，热力学中表征物质状态的参量之一，用符号S表示，其物理意义是体系混乱程度的度量。信息熵表示信息的丰富程度，定义为E=-plog(p)）</li><li>请解释1080p的含义（答：1080指的是分辨率1920*1080，p为扫描方式：逐行扫描）</li><li>请解释FPS的全称以及含义（答：Frames Per Second，帧率的意思）</li><li>解释“码率”的概念（答：即比特率，一秒钟处理的数据量大小，影响到视频的质量以及帧率）</li><li>MPEG标准中有哪些帧类型</li><li>有以下数据结构，请问最后输出结果的是？（注意共用体的大小）<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">union</span>&#123;</div><div class="line">    <span class="keyword">long</span> i;</div><div class="line">    <span class="keyword">int</span> j[<span class="number">3</span>];</div><div class="line">    <span class="keyword">char</span> k;</div><div class="line">&#125;DATA;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> data&#123;</div><div class="line">    <span class="keyword">int</span> m;</div><div class="line">    DATA n;</div><div class="line">    <span class="keyword">double</span> q;</div><div class="line">&#125;;</div><div class="line">data max;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d/n"</span>,&amp;(<span class="keyword">sizeof</span>(DATA)+<span class="keyword">sizeof</span>(max));</div></pre></td></tr></table></figure></li></ol><p>还有其他的题目，记不太清了，但是主要就是以上的。难度适中，即有涉及到程序也有图像以及视频处理的相关知识。因为当时没有好好准备，猝不及防的给我了这些题目，感觉一脸懵逼。</p><h2 id="现场面试-1"><a href="#现场面试-1" class="headerlink" title="现场面试"></a>现场面试</h2><p>面试小哥很nice，人很好。首先是自我介绍，然后就是项目经历。基本上简历上的内容问了一遍，感觉还不错。问了我如果调试正在进行中的程序，如何用markdown语言引用代码，对Latex的了解等等。小哥面试结束后，以为女面试官姐姐再次对我的一些基本情况进行了询问，最后还送了一个可爱的小狐狸。<br>无论结果如何等结果吧，祝我好运！<br>ps：很幸运地被录为实习生，但是还是选择了商汤。</p><center><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="600" height="86" src="http://music.163.com/outchain/player?type=2&id=579954&auto=0&height=66"></iframe></center>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;&lt;img src=&quot;/2017/04/16/实习/intern.jpg&quot; alt=&quot;Intern&quot; title=&quot;Intern&quot;&gt;&lt;/center&gt;

&lt;p id=&quot;div-border-left-red&quot;&gt;实习季堪比就业季，今年的形势尤其严峻。伴随着忐忑的心情，我迎来了这个不得不面对的时期。&lt;/p&gt;
    
    </summary>
    
      <category term="实习" scheme="https://www.vincentqin.tech/categories/%E5%AE%9E%E4%B9%A0/"/>
    
    
      <category term="实习" scheme="https://www.vincentqin.tech/tags/%E5%AE%9E%E4%B9%A0/"/>
    
      <category term="腾讯基础研究" scheme="https://www.vincentqin.tech/tags/%E8%85%BE%E8%AE%AF%E5%9F%BA%E7%A1%80%E7%A0%94%E7%A9%B6/"/>
    
      <category term="阿里巴巴视觉算法" scheme="https://www.vincentqin.tech/tags/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4%E8%A7%86%E8%A7%89%E7%AE%97%E6%B3%95/"/>
    
      <category term="商汤科技" scheme="https://www.vincentqin.tech/tags/%E5%95%86%E6%B1%A4%E7%A7%91%E6%8A%80/"/>
    
  </entry>
  
  <entry>
    <title>中国计算机学会推荐国际会议及期刊目录</title>
    <link href="https://www.vincentqin.tech/2017/04/11/%E4%B8%AD%E5%9B%BD%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%A6%E4%BC%9A%E6%8E%A8%E8%8D%90%E5%9B%BD%E9%99%85%E4%BC%9A%E8%AE%AE%E5%8F%8A%E6%9C%9F%E5%88%8A%E7%9B%AE%E5%BD%95/"/>
    <id>https://www.vincentqin.tech/2017/04/11/中国计算机学会推荐国际会议及期刊目录/</id>
    <published>2017-04-11T12:26:12.000Z</published>
    <updated>2017-10-30T16:22:16.077Z</updated>
    
    <content type="html"><![CDATA[<img src="/2017/04/11/中国计算机学会推荐国际会议及期刊目录/1.jpg" alt="1.jpg" title=""><a id="more"></a><center><a href="/2017/04/11/中国计算机学会推荐国际会议及期刊目录/CCF会议列表.pdf" title="CCF会议列表">CCF会议列表</a></center><p>顺便听首歌吧嘿嘿~</p><center><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="500" height="86" src="http://music.163.com/outchain/player?type=2&id=29722263&auto=1&height=66"></iframe></center>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2017/04/11/中国计算机学会推荐国际会议及期刊目录/1.jpg&quot; alt=&quot;1.jpg&quot; title=&quot;&quot;&gt;
    
    </summary>
    
      <category term="会议" scheme="https://www.vincentqin.tech/categories/%E4%BC%9A%E8%AE%AE/"/>
    
    
      <category term="CCF国际会议" scheme="https://www.vincentqin.tech/tags/CCF%E5%9B%BD%E9%99%85%E4%BC%9A%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>日本与美国之行</title>
    <link href="https://www.vincentqin.tech/2017/03/19/%E6%97%A5%E6%9C%AC%E4%B8%8E%E7%BE%8E%E5%9B%BD%E4%B9%8B%E8%A1%8C/"/>
    <id>https://www.vincentqin.tech/2017/03/19/日本与美国之行/</id>
    <published>2017-03-18T16:15:16.000Z</published>
    <updated>2017-10-30T16:22:16.547Z</updated>
    
    <content type="html"><![CDATA[<center><img src="/2017/03/19/日本与美国之行/香港机场起飞.JPG" alt="HongKong Airport" title="HongKong Airport"></center><a id="more"></a><blockquote class="blockquote-center"> 日本国之行 </blockquote><br>小时候因为极其喜欢动漫的缘故，我喜欢上了日本，从那时起已经向往能够进行一次日本之行。2017年1月8日早上的闹钟比以往想得更加早些。迎着黎明前第一缕阳光的到来，我们来到了香港机场。即将开始人生第一次出国高校访问之旅，我心情相当激动。<center><img src="/2017/03/19/日本与美国之行/日本成田机场.JPG" alt="Narita Airport" title="Narita Airport"></center><p>飞机经历两个小时到达日本，偌大的东京比深圳多了一份凉意。拖着行李坐着日本地铁匆匆来到了池袋的旅馆，安顿下来，第一天就这样结束。接下来的几天我们团队依次到了东京、京都、奈良等地，参观日本几所具有代表性的大学，体验日本的文化以及感受日本的风土人情。</p><center><img src="/2017/03/19/日本与美国之行/明治神宫.jpg" alt="明治神宫一隅" title="明治神宫一隅"></center><p>初来乍到，凛冬已至，虽寒意袭来，但心中激动之情让我变得火热。日本之行我们团队参观了5所大学（早稻田大学，东京大学，法政大学，京都大学，秋田大学）以及1个科研院所（NHK科技研究实验室）。</p><center><img src="/2017/03/19/日本与美国之行/早稻田大学.jpg" alt="早稻田大学" title="早稻田大学"></center><center><img src="/2017/03/19/日本与美国之行/东京大学_2.jpg" alt="东京大学" title="东京大学"></center><center><img src="/2017/03/19/日本与美国之行/京都大学_1.jpg" alt="京都大学(雪后之貌)" title="京都大学(雪后之貌)"></center><center><img src="/2017/03/19/日本与美国之行/京都大学_3.jpg" alt="京都大学偶遇‘进击的巨人’" title="京都大学偶遇‘进击的巨人’"></center><center><img src="/2017/03/19/日本与美国之行/政法大学.jpg" alt="去往法政大学的路上" title="去往法政大学的路上"></center><center></center><center><img src="/2017/03/19/日本与美国之行/NHK.jpg" alt="NHK" title="NHK"></center><p>日本同学介绍的科研内容并非高大上的东西，有些只是利用现有的算法来解决现实问题；但是他们做出的东西都是系统化的，最终的结果是以实物或者可视化的形式作为展示。具体而言，对于早稻田大学3个机器人实验室，他们的研究方向更加贴近于实际生活，而并非空谈理论，关注于“人”本身，而并非突发奇想。一位早稻田大学的师兄提到，他们的研究成果必须最终以Demo的形式展示，相比之下，国内科研更加注重仿真，如若计算机仿真能够成功的实现预期目标算是大功告成，省去了硬件实现或者可视化展示这一步。这对于该领域内的科研人员而言是及其容易理解的，但是对于大众而言，大都不能够理解算法的原理以及实现细节，他们关注的是研究的目的以及能够解决的问题。因此如何以一种通俗易懂的方式向大众介绍自己的研究内容成为了一个问题，日本高校相比国内高校在科研成果展示方面具有一定的领先。</p><center><img src="/2017/03/19/日本与美国之行/秋田大学-1.jpg" alt="秋田大学" title="秋田大学"></center><center></center><p>值得注意的是，最后一站的秋田大学与以前的几个大学有着明显差异，它位于日本的北端，抵达时正值秋田几十年来最大的一场雪，这场大雪增加了参观秋田大学的乐趣。起初，我们对于这个农业科学见长的高校知之甚少。通过对其参观，我了解到了这个新兴高校的发展历史以及现有科研水平，秋田大学如何在这十几年时间内迅速成长必然值得我国高校学习。</p><center><img src="/2017/03/19/日本与美国之行/奈良的鹿.jpg" alt="奈良的鹿，我拍的这个可爱鹿是全场最佳~" title="奈良的鹿，我拍的这个可爱鹿是全场最佳~"></center><p>总结而言，东京大学与京都大学历史悠久，科研气氛浓厚且资源丰厚；早稻田大学注重实践，校企合作成为常态；政法大学兼容并包，面向世界；秋田大学后起之秀，努力吸收优秀资源。尽管参观时间有限，但是我们能够明显的感觉到日方高校对于我们来访的热情，同时也可以了解到日本最有代表性大学的科研水平。最大的收获在于，亲身感受到了跨文化交流。我们用英文与日本同学交流，语言不再是最大的障碍。保持好奇心一直是我的座右铭，尽管研究领域不尽一致，但我会努力的提出自己的疑问并聆听日本同学的讲解。起初时候会担心自己不能够很好的提出疑问或者不能够听懂他们的回答，但是主动尝试之后会发现，自己所担心的问题并不存在，同时我也逐渐喜欢上了与他们之间的交流的过程。</p><blockquote><p>京都游玩的地方很多，交流之余，游遍几个好玩的地方</p></blockquote><center><img src="/2017/03/19/日本与美国之行/京都街头.jpg" alt="京都街头" title="京都街头"></center><center><img src="/2017/03/19/日本与美国之行/稻荷大社.jpg" alt="京都伏见稻荷大社" title="京都伏见稻荷大社"></center><center><img src="/2017/03/19/日本与美国之行/京都_1.jpg" alt="京都清水寺求姻缘之地" title="京都清水寺求姻缘之地"></center><center><img src="/2017/03/19/日本与美国之行/京都_2.jpg" alt="京都清水寺远眺" title="京都清水寺远眺"></center><center><img src="/2017/03/19/日本与美国之行/京都_3.jpg" alt="京都清水寺一隅" title="京都清水寺一隅"></center><p>此外，很早就听说日本民众素质很高，这次真切的感受到了。值得注意的是，他们在日常生活中表现出的礼貌也值得人敬佩，这很符合日本人不愿给别人添麻烦的特点。他们时常把“すみませ”挂在嘴边，比如进电梯时，进入餐厅时或者超市付款时；无论多赶时间也会排队，另外在公共场合他们不会大声喧哗，具体而言在地铁上无论人再多再挤，车厢内也是安静的让人感觉不可思议；他们的房屋建设的很低，密密麻麻的挤在一起，电线在房屋之间穿梭，但是让人感觉并不杂乱，“规矩”一词用在他们身上并不为过。同时日本对于古老传统的保留非常重视，以前就听说日本是保留中国古文化最好的非华人国家。果然，“相扑，茶道，和服，空手道”等诸多优良文化在日本保留的相当好，在日剧以及日本民族产业动画中都有很好体现。改革开放以来，我国的经济实力突飞猛进，如今已经跃居世界第二大经济体，但是国际上的文化软实力远远不如日本。很多欧美人士所了解的很多“日本传统”实际是源于中国，日本在国际上的形象是优于中国的。“择其善者而从之”，我认为国内的道德建设以及文化建设必须同经济发展相协调，提高全民素质，打造真正属于中国的国际形象。</p><center><img src="/2017/03/19/日本与美国之行/雪_1.jpg" alt="大阪上空" title="大阪上空"></center><center><img src="/2017/03/19/日本与美国之行/东京远望富士山.jpg" alt="从东京远望富士山，似乎很近，但是有几个小时的车程" title="从东京远望富士山，似乎很近，但是有几个小时的车程"></center><p><blockquote class="blockquote-center"> 美利坚合众国之行 </blockquote><br><br><br>To be continued…<br>先上图，占个坑</p><center><img src="/2017/03/19/日本与美国之行/新奥尔良法国区一隅.jpg" alt="新奥尔良法国区一隅" title="新奥尔良法国区一隅"></center><center><img src="/2017/03/19/日本与美国之行/教堂一隅.jpg" alt="教堂" title="教堂"></center><center><img src="/2017/03/19/日本与美国之行/杜兰大学军事学院.jpg" alt="杜兰大学军事学院" title="杜兰大学军事学院"></center><center><img src="/2017/03/19/日本与美国之行/杜兰大学.jpg" alt="杜兰大学一隅" title="杜兰大学一隅"></center><center><img src="/2017/03/19/日本与美国之行/杰克逊广场一隅.jpg" alt="杰克逊广场一隅" title="杰克逊广场一隅"></center>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;&lt;img src=&quot;/2017/03/19/日本与美国之行/香港机场起飞.JPG&quot; alt=&quot;HongKong Airport&quot; title=&quot;HongKong Airport&quot;&gt;&lt;/center&gt;
    
    </summary>
    
      <category term="游行" scheme="https://www.vincentqin.tech/categories/%E6%B8%B8%E8%A1%8C/"/>
    
    
      <category term="美国" scheme="https://www.vincentqin.tech/tags/%E7%BE%8E%E5%9B%BD/"/>
    
      <category term="日本" scheme="https://www.vincentqin.tech/tags/%E6%97%A5%E6%9C%AC/"/>
    
      <category term="东京大学" scheme="https://www.vincentqin.tech/tags/%E4%B8%9C%E4%BA%AC%E5%A4%A7%E5%AD%A6/"/>
    
      <category term="早稻田大学" scheme="https://www.vincentqin.tech/tags/%E6%97%A9%E7%A8%BB%E7%94%B0%E5%A4%A7%E5%AD%A6/"/>
    
      <category term="法政大学" scheme="https://www.vincentqin.tech/tags/%E6%B3%95%E6%94%BF%E5%A4%A7%E5%AD%A6/"/>
    
      <category term="京都大学" scheme="https://www.vincentqin.tech/tags/%E4%BA%AC%E9%83%BD%E5%A4%A7%E5%AD%A6/"/>
    
      <category term="秋田大学" scheme="https://www.vincentqin.tech/tags/%E7%A7%8B%E7%94%B0%E5%A4%A7%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>Light Field 光场以及MATLAB光场工具包(LightField ToolBox)的使用说明</title>
    <link href="https://www.vincentqin.tech/2017/02/16/LightField%E5%85%89%E5%9C%BA/"/>
    <id>https://www.vincentqin.tech/2017/02/16/LightField光场/</id>
    <published>2017-02-16T02:45:54.000Z</published>
    <updated>2017-12-03T06:30:30.000Z</updated>
    
    <content type="html"><![CDATA[<center><img src="/2017/02/16/LightField光场/lf_cover.jpg" alt="Magic Leap" title="Magic Leap"></center><p><a href="https://www.vincentqin.tech/collections/">这里</a>我汇总了有关光场（Light Field）一些有用的链接以及光场数据的处理过程。目前还在整理中，随时更新。<br><span id="inline-red">声明</span>：<u><strong>一切理解都是本人观点，如有疑问，还望在</strong>评论<strong>中留言。如需转载请与本人联系，谢谢合作</strong></u>! 邮箱：<a href="www.vincentqin.tech/about">点我</a></p><a id="more"></a><h2 id="光场相机"><a href="#光场相机" class="headerlink" title="光场相机"></a>光场相机</h2><p>大家在刚刚入手光场领域的时候会用到现在的消费者用的手持光场相机Lytro或者ILLUM，如图（实验室的设备，我可买不起ILLUM）：</p><center><img src="/2017/02/16/LightField光场/LF-cameras.jpg" alt="(Left).Lytro;(Right).Illum" title="(Left).Lytro;(Right).Illum"></center><h2 id="获取-LFP-or-LFR-原文件"><a href="#获取-LFP-or-LFR-原文件" class="headerlink" title="获取.LFP(or .LFR)原文件"></a>获取.LFP(or .LFR)原文件</h2><p>由Lytro拍摄的图像的原格式是.lfp格式，我们要解码成我们需要的格式。<br>工具：<strong>Lytro Desktop</strong>，<strong>MATLAB光场工具包</strong>（很强大，推荐，本文介绍该方法）。<br>用数据线把设备连接到电脑，打开Lytro Desktop，点击想要导入的图片，选中点击右上角立即处理，然后打开我的电脑图片-&gt;Lytro Desktop\Libraries\Lytro 图库.lytrolibrary*，就可以发现有很多文件夹名字是一串很长数字字母啥的。点击去就可以发现好几个文件，以lytro为例，这几个文件如下形式：</p><center><img src="/2017/02/16/LightField光场/lfp_list.png" alt="Light field files" title="Light field files"></center><p><strong><font color="red">raw.lfp</font></strong>就是我们需要的原文件，之后我们就要利用Matlab光场工具包对其进行解码操作。</p><h2 id="Matlab-Light-Field-ToolBox-光场工具箱-的使用"><a href="#Matlab-Light-Field-ToolBox-光场工具箱-的使用" class="headerlink" title="Matlab Light Field ToolBox(光场工具箱)的使用"></a>Matlab Light Field ToolBox(光场工具箱)的使用</h2><h3 id="下载光场工具包（LFToolBox）"><a href="#下载光场工具包（LFToolBox）" class="headerlink" title="下载光场工具包（LFToolBox）"></a>下载光场工具包（LFToolBox）</h3><p>首先下载<a href="http://cn.mathworks.com/matlabcentral/fileexchange/49683-light-field-toolbox-v0-4" target="_blank" rel="external">光场工具箱</a>并仔细阅读说明文档，根据文档把相应的数据拷贝到工具箱的文件夹下(这一步很关键，要仔细配置)。如果不想在官网下载的话我上传到了度娘的云盘链接：<a href="http://pan.baidu.com/s/1hsDo0ks" target="_blank" rel="external">链接</a> 密码：yykc。这是我修改后的一个版本，可以直接运行，推荐下载这个版本。<strong><font color="red">另外我在Github上传了一个版本，大家可以git clone<a href="https://github.com/Vincentqyw/Light_Field_TB" target="_blank" rel="external">链接</a></font></strong>。下载下来的工具包是这样的：</p><center><img src="/2017/02/16/LightField光场/LF-TB-main.png" alt="工具包文件夹" title="工具包文件夹"></center> <p>LFToolbox0.4就是我们要的工具包，里面包含很多函数，如下图：</p><center><img src="/2017/02/16/LightField光场/LF-TB-files.png" alt="工具包函数" title="工具包函数"></center><p>我把一些比较常用的函数或者文档用红色的框标注出来，其中PDF文档是该工具包的说明书。这个说明书中详细的介绍了该工具包的使用方法，我们完全可以根据该文档的介绍来实现自己想要的功能。如下是该说明书的截图：</p><center><img src="/2017/02/16/LightField光场/LF-TB.png" alt="说明文档" title="说明文档"></center><p>同时该说明文档提供了各种函数用于从LFP文件中提取出自己需要的各种信息：白图像(white image)，Raw Image，对齐后的图像，以及颜色校正，频域滤波后的图像等。<br><del>因为时间不足没有整理的，感觉大家都对这个过程比较感兴趣，我觉得有必要写一下到底如何读取lfp、lfr、raw文件了。好了言归正传，开写。</del></p><h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><h4 id="step-1-创建自己的工作目录"><a href="#step-1-创建自己的工作目录" class="headerlink" title="step 1: 创建自己的工作目录"></a>step 1: 创建自己的工作目录</h4><p><u>如果是直接clone我在github上的<a href="https://github.com/Vincentqyw/Light_Field_TB" target="_blank" rel="external">工程</a>的话直接跳转<strong>step 2</strong></u>。如果没有，那就要建立自己的工作目录，便于文件的管理。这一步是必要的，如果建立的目录不一致，可能导致程序无法运行，这也是我当时初次用这个工具包时常常出错的地方。好了，建立这样的目录结构：</p><center><img src="/2017/02/16/LightField光场/folder-structure-raw.png" alt="文件目录" title="文件目录"></center><h4 id="step-2-根据相机序列号修改文件名"><a href="#step-2-根据相机序列号修改文件名" class="headerlink" title="step 2: 根据相机序列号修改文件名"></a>step 2: 根据相机序列号修改文件名</h4><p><strong><font color="red">Sample_test</font></strong>表示我们的测试目录，里面包含了相机信息以及自己拍摄照片的图像（lfp/lfr）。<br><strong><font color="red">Cameras</font></strong> 这个目录中又包含了几个文件夹，它们分别是以“A”或者“B”开头，在其后面有一长串数字。这其实就是光场相机的serial number，我们可以从默认目录<u> c:\Users\<username>\AppData\Local\Lytro\cameras\sn- serial_number</username></u>中找到，这个数字每个相机不一样，大家根据自己的相机序列号修改这个目录哈。”A”表示的是LYTRO系列相机，“B”表示ILLUM系列相机；以上图为例，”A303134427”就是我相机的序列号。</p><h4 id="step-3-把白图像文件拷贝到相应的文件夹下"><a href="#step-3-把白图像文件拷贝到相应的文件夹下" class="headerlink" title="step 3: 把白图像文件拷贝到相应的文件夹下"></a>step 3: 把白图像文件拷贝到相应的文件夹下</h4><p>在每个序列号文件夹下又有一个文件夹<font color="red">WhiteImages</font>，这里面放着由该相机拍摄的白图像。所谓白图像就是一张由光场相机拍摄的白色的图像，当然自己也可以拿着光场相机对着白色的墙面拍几张，但是效果并不一定很好。庆幸的是LYTRO官方提供了白图像，以Lytro为例，我们可以从以下目录找到:<u> c:\Users\ <strong>username</strong>\AppData\Local\Lytro\cameras\sn- serial_number</u>。如下图所示：</p><center><img src="/2017/02/16/LightField光场/white-image-files-folders.png" alt="白图像目录" title="白图像目录"></center><p>我们发现这里有以下4个文件：<strong>data.C.0/1/2/3</strong>，这是官方把图像压缩成了这种格式，我们需要用工具箱进行解码。我们需要的就是这四个文件，拷贝出这4个文件，放在<font color="red">WhiteImages</font>文件夹里。这一步相当关键，一定要确保拷贝对了目录。<font color="red"><u>注意，Illum相机的白图像与Lytro的白图像的存放位置不一样，在相机的SD卡里</u>。</font></p><h4 id="step-4-将测试文件放到Images目录"><a href="#step-4-将测试文件放到Images目录" class="headerlink" title="step 4: 将测试文件放到Images目录"></a>step 4: 将测试文件放到Images目录</h4><p><strong><font color="red">Images</font></strong>文件夹下包含我们需要处理的文件们，<font color="red">F01</font>下存放LYTRO系列拍摄的文件，<font color="red">B01</font>下存放ILLUM系列拍摄的文件。以Lytro为例，由于前面已经有了测试文件<strong><font color="red">raw.lfp</font></strong>，我们就把这个文件放在<font color="red">F01</font>下。经过我们上述的过程之后，最后我们的目录会变成这样（注意：<u>Sample_test与LFToolBox0.4为同级目录，各个文件夹的名字务必正确</u>）：</p><center><img src="/2017/02/16/LightField光场/folder-structure.png" alt="文件目录结构" title="文件目录结构"></center><h3 id="测试开始"><a href="#测试开始" class="headerlink" title="测试开始"></a>测试开始</h3><p>我用的是实验室的电脑，配置是：<strong>Intel(R) Core(TM) i7-4790 CPU  @3.60GHz  3.60GHz RAM 16GB</strong>。其中的Demo文件是本人编写的一小段测试代码，已经贴在了文末。接下来的过程就是RUN CODE了。程序大致可以分为以下几个测试：</p><ol><li>处理白图像</li><li>解码LFP文件</li><li>频域滤波</li><li>颜色校正</li></ol><h4 id="处理白图像"><a href="#处理白图像" class="headerlink" title="处理白图像"></a>处理白图像</h4><p>处理白图像的目的为了得到相机的某些参数，我当时是为了获得每幅光场的中心点坐标才进行的这一步。以为白图像拍摄的场景没有纹理，此时可以清楚的观察到微透镜成像的边界信息。如下图所示：</p><center><img src="/2017/02/16/LightField光场/white-image-macro-pixels.png" alt="白图像宏像素块" title="白图像宏像素块"></center><p>可以看到的是，微透镜下成像是这种正六边形的网格，类似于蜂窝的结构，感觉666。需要注意的是，该过程不是简单的提取出一张白图像来，而是提取几十张白图像对（image pairs），这个过程运行起来有点久，以下是运行的截图：</p><center> <img src="running-process.png" width="80%"></center><h4 id="解码LFP文件"><a href="#解码LFP文件" class="headerlink" title="解码LFP文件"></a>解码LFP文件</h4><p>如果只是单纯的读出LFP/LFR、RAW文件的数据的话可以分别用工具包提供的如下函数：LFReadLFP、LFReadRaw。注意两个函数的返回值不一样。LFReadLFP返回一个结构体类型的变量，它包含相机的各个信息，我们可以根据自己的需要保留数据。LFReadRaw返回的是一张uint16的灰度图，还没有经过demosaicing操作。去马赛克操作在malatb中有相应的函数，这点不用担心。我们在这里不是直接调用的LFReadLFP而是调用了工具箱提供的LFLytroDecodeImage函数。如果运行有问题（<u>若是直接clone我github上项目的话，不需要修改</u>），将LFLytroDecodeImage中的WhiteImageDatabase路径由以下：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">DecodeOptions = LFDefaultField( <span class="string">'DecodeOptions'</span>, <span class="string">'WhiteImageDatabasePath'</span>...</div><div class="line">,fullfile(<span class="string">'Cameras'</span>,<span class="string">'WhiteImageDatabase.mat'</span>));<span class="comment">% line 71</span></div></pre></td></tr></table></figure><p>改为：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">DecodeOptions = LFDefaultField( <span class="string">'DecodeOptions'</span>, <span class="string">'WhiteImageDatabasePath'</span>...</div><div class="line"> ,fullfile(<span class="string">'Cameras'</span>,LFMetadata.SerialData.camera.serialNumber,<span class="string">'WhiteImageDatabase.mat'</span>));</div><div class="line"><span class="comment">%== 注意，这条插在  ---Select appropriate white image---上行，而不是在原来的71行修改==。</span></div></pre></td></tr></table></figure><p>经过这样的修改之后，这下应该可以跑了。我们可以得到以下图像：</p><center><img src="deer.png" width="80%"></center><p>局部放大效果图：</p><center><img src="deer-zoom-in.png" width="80%"></center><p>所有视角的图像：</p><center><img src="all-views-raw.png" width="80%"></center><p>这时候可以看到在边界视角上的图像比较黑，所以我们接下来要进行频域滤波，以及颜色校正。</p><h4 id="频域滤波以及颜色校正"><a href="#频域滤波以及颜色校正" class="headerlink" title="频域滤波以及颜色校正"></a>频域滤波以及颜色校正</h4><p>这部分分别用到了LFFilt4DFFT以及LFColourCorrect函数。以LYTRO 1.0 为例子，我们得到的光场图像一种有11*11个视角，但是这个121个视角子孔径图像的质量真的不敢恭维，尤其是边角处的视角(u=1,v=1)时，这个图像时完全变成黑色的。所以嘛，LFFilt4DFFT这个函数是将这些变成黑色的图像或者质量不好的图像进行校正的，具体原理不作展开。LFColourCorrect这个函数是利用gamma变化对原始图像进行颜色校正的，这一点比较简单。总之利用这两个函数能够让我们得到的光场图像的质量更好，当然你也可以选择不用。</p><p>以下是经过滤波之后的所有子孔径图像，可以发现边界的视角相比于频域滤波之前有了很好的可视性。</p><center><img src="all-views-freq-correction.png" width="80%"></center><p>以下是经过颜色校正之后的所有所有子孔径图像。</p><center><img src="all-views-freq-color-correction.png" width="80%"></center><p>经过以上的步骤我们可以学习到白图像的处理，以及光场图像的处理等操作。当然我没有列出这个工具包所有的功能介绍，大家可以根据需要建立自己工程，对自己的数据进行测试，以上！</p><p><strong><font color="red">注意</font></strong>：</p><ul><li>务必在WhiteImagesPath处写明相机型号，确定好到底是Lytro还是Illum</li><li>注意Illum相机的白图像们在相机的SD卡中，那些白图像们拷贝出来放在路径<strong>Sample_test\Cameras\B5151500510\</strong>下即可</li><li>白图像的处理过程比较久，耐心等待就行即可</li><li>Lytro与Illum的频域滤波调用函数是不同的，我已经把代码添加在了相应位置；这个函数用时较久，耐心等待</li><li>结果存放在<strong>Results_saving</strong>文件夹下</li><li>再次提醒，由于Illum图像的分辨率比较大，所以当程序运行到LFLytroDecodeImage以及频域滤波时会造成内存以及磁盘的大量使用，慎重考虑。</li><li>如有Bug请及时联系我，请在评论区留言。</li></ul><p>以下是Demo文件的代码，仅供学习使用。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">clc;</div><div class="line">clear all;</div><div class="line">clc;</div><div class="line"></div><div class="line">addpath(genpath(<span class="string">'Sample_test'</span>));</div><div class="line">addpath(genpath(<span class="string">'LFToolbox0.4'</span>));</div><div class="line"></div><div class="line">LFMatlabPathSetup;</div><div class="line"></div><div class="line"><span class="comment">%% Step1: 解压data.C.0/1/2/3---&gt;white,结果存储在Cameras中</span></div><div class="line">fprintf(<span class="string">'===============Step1: Unpack Lytro Files===============\n\n '</span>);</div><div class="line">LFUtilUnpackLytroArchive(<span class="string">'Sample_test'</span>)</div><div class="line"></div><div class="line"><span class="comment">%% Step2: 包含刚刚解压出来的文件的目录</span></div><div class="line"></div><div class="line">fprintf(<span class="string">'===============Step2: Process WhiteImages===============\n\n'</span>);</div><div class="line"></div><div class="line">WhiteImagesPath=<span class="string">'Sample_test\Cameras\B5151500510'</span>; <span class="comment">% 务必要设置这个值 B5151500510   A303134427</span></div><div class="line">LFUtilProcessWhiteImages( WhiteImagesPath);</div><div class="line"></div><div class="line"><span class="comment">%% Step3: 解码光场图像.lfp</span></div><div class="line">fprintf(<span class="string">'=====================Step3: Decode LFP===================\n\n'</span>);</div><div class="line">cd(<span class="string">'Sample_test'</span>);  <span class="comment">% 进入Sample_test目录</span></div><div class="line"></div><div class="line">lfpname=<span class="string">'baby'</span>; <span class="comment">%测试图像名称，改成你自己的</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> WhiteImagesPath(<span class="number">21</span>)==<span class="string">'A'</span>    <span class="comment">%找到型号  exist('LYTRO','var')</span></div><div class="line">    version=<span class="string">'F01'</span>;</div><div class="line"><span class="keyword">elseif</span> WhiteImagesPath(<span class="number">21</span>)==<span class="string">'B'</span><span class="comment">%找到型号  exist('ILLUM','var')</span></div><div class="line">    version=<span class="string">'B01'</span>;</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">InputFname=[<span class="string">'Images\',version,'</span>\<span class="string">',lfpname,'</span>.lfp<span class="string">'];</span></div><div class="line"></div><div class="line">[LF, LFMetadata,WhiteImage,CorrectedLensletImage, ...</div><div class="line">WhiteImageMetadata, LensletGridModel, DecodeOptions]...</div><div class="line">                              =  LFLytroDecodeImage(InputFname);</div><div class="line">cd('..<span class="string">');</span></div><div class="line"></div><div class="line">imshow(CorrectedLensletImage) %Raw Image</div><div class="line">mkdir(['Results_saving\<span class="string">',lfpname]);</span></div><div class="line">imwrite(CorrectedLensletImage,['Results_saving\<span class="string">',lfpname,'</span>\<span class="string">',lfpname,'</span>.bmp<span class="string">']);</span></div><div class="line">save(['Results_saving\<span class="string">',lfpname,'</span>\<span class="string">',lfpname,'</span>.mat<span class="string">'],'</span>CorrectedLensletImage<span class="string">');</span></div><div class="line"></div><div class="line"></div><div class="line">%% =======================频域滤波================================</div><div class="line">%---Setup for linear filters---</div><div class="line">tic</div><div class="line">% lytro</div><div class="line">if strcmp(version,'F01<span class="string">')==1</span></div><div class="line">    LFPaddedSize = [16, 16, 400, 400];</div><div class="line">    BW = 0.03;</div><div class="line">    FiltOptions = [];</div><div class="line">    FiltOptions.Rolloff = 'Butter<span class="string">';</span></div><div class="line">    Slope1 = -3/9; % Lorikeet</div><div class="line">    Slope2 = 4/9;  % Building</div><div class="line">    fprintf('Building <span class="number">4</span>D frequency hyperfan... <span class="string">');</span></div><div class="line">    [H, FiltOptionsOut] = LFBuild4DFreqHyperfan( LFPaddedSize, Slope1, Slope2, BW, FiltOptions );</div><div class="line">    fprintf('Applying filter<span class="string">');</span></div><div class="line">    [LFFilt, FiltOptionsOut] = LFFilt4DFFT( LF, H, FiltOptionsOut );</div><div class="line"></div><div class="line">% illum</div><div class="line">elseif strcmp(version,'B01<span class="string">')==1</span></div><div class="line"></div><div class="line">    LFSize = size(LF);</div><div class="line">    LFPaddedSize = LFSize;</div><div class="line">    BW = 0.04;</div><div class="line">    FiltOptions = [];</div><div class="line">    %---Demonstrate 4D Hyperfan filter---</div><div class="line">    Slope1 = -4/15; % Lorikeet</div><div class="line">    Slope2 = 15/15; % Far background</div><div class="line">    fprintf('Building <span class="number">4</span>D frequency hyperfan... <span class="string">');</span></div><div class="line">    [H, FiltOptionsOut] = LFBuild4DFreqHyperfan( LFPaddedSize, Slope1, Slope2, BW, FiltOptions );</div><div class="line">    fprintf('Applying filter<span class="string">');</span></div><div class="line">    [LFFilt, FiltOptionsOut] = LFFilt4DFFT( LF, H, FiltOptionsOut );</div><div class="line">    title(sprintf('Frequency hyperfan filter, slopes %<span class="number">.3</span>g, %<span class="number">.3</span>g, BW %<span class="number">.3</span>g<span class="string">', Slope1, Slope2, BW));</span></div><div class="line">    drawnow</div><div class="line">    save(['Results_saving\<span class="string">',lfpname,'</span>\<span class="string">',lfpname,'</span><span class="number">5</span>D.mat<span class="string">'],'</span>LFFilt<span class="string">');</span></div><div class="line">end</div><div class="line"></div><div class="line">%% =======================颜色校正参数设置==========================                               </div><div class="line"></div><div class="line">ColMatrix = DecodeOptions.ColourMatrix;</div><div class="line">Gamma=DecodeOptions.Gamma;</div><div class="line">ColBalance=DecodeOptions.ColourBalance;</div><div class="line"></div><div class="line">% 对3280*3280的原始彩色图像进行颜色校正</div><div class="line">ColorCorrectedImage=LFColourCorrect(CorrectedLensletImage, ColMatrix, ColBalance, Gamma);</div><div class="line">imwrite(ColorCorrectedImage,['Results_saving\<span class="string">',lfpname,'</span>\<span class="string">',lfpname,'</span>ColorCorrectedImage.bmp<span class="string">']);</span></div><div class="line">save(['Results_saving\<span class="string">',lfpname,'</span>\<span class="string">',lfpname,'</span>ColorCorrectedImage.mat<span class="string">'],'</span>ColorCorrectedImage<span class="string">')</span></div><div class="line">imshow(ColorCorrectedImage);title('Corrected Lenslet Image<span class="string">');</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">%% 同样是颜色矫正， 为了得到光场数据。得到5-D LFColorCorrectedImage数据</div><div class="line">LFColorCorrectedImage=zeros(size(LF,1),size(LF,2),size(LF,3),size(LF,4),size(LF,5));</div><div class="line">for i=1:size(LF,1)</div><div class="line">    for j=1:size(LF,2)</div><div class="line">        temp =squeeze(LFFilt(i,j,:,:,1:3));</div><div class="line">        temp = LFColourCorrect(temp, ColMatrix, ColBalance, Gamma);</div><div class="line">        LFColorCorrectedImage(i,j,:,:,1:3)=temp;</div><div class="line">        imshow(temp);</div><div class="line">        pause(0.1)</div><div class="line">    end</div><div class="line">end</div><div class="line">LFColorCorrectedImage(:,:,:,:,4)=LF(:,:,:,:,4);</div><div class="line">save(['Results_saving\<span class="string">',lfpname,'</span>\<span class="string">',lfpname,'</span>RawLFColorCorrectedImage.mat<span class="string">'],'</span>LFColorCorrectedImage<span class="string">');% very important</span></div><div class="line"></div><div class="line">toc</div><div class="line">%--------------------------------------------------------------------------------</div></pre></td></tr></table></figure><hr><p><del>## Lytro官网可视化工具</del></p><p><del>谁让人家Lytro不开源呢，人家自己做的Demo还不错。通过鼠标就可以对以下图像进行<strong>重聚焦，变化视角，以及缩放</strong>等操作。话不多说，上图！</del> 呵，人家公司在2017年11月30号之后停止了对lytro live photo的线上支持，所以以下啥都没有了。<br><!--<center><iframe width='600' height='434' src='https://pictures.lytro.com/89268543555/pictures/1083179/embed' frameborder='0' allowfullscreen scrolling='no'></iframe></center> <center><iframe width='600' height='434' src='https://pictures.lytro.com/michaelsternoffphoto/pictures/1030057/embed' frameborder='0' allowfullscreen scrolling='no'></iframe></center> <center><iframe width='600' height='434' src='https://pictures.lytro.com/karinaguillenphoto/pictures/926574/embed' frameborder='0' allowfullscreen scrolling='no'></iframe></center> <center><iframe width='600' height='434' src='https://pictures.lytro.com/karinaguillenphoto/pictures/1004450/embed' frameborder='0' allowfullscreen scrolling='no'></iframe></center>更多图像在[这里](https://pictures.lytro.com/)。--></p><p>日常来首歌曲：</p><center><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="600" height="86" src="http://music.163.com/outchain/player?type=2&id=33538955&auto=0&height=66"></iframe></center>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;&lt;img src=&quot;/2017/02/16/LightField光场/lf_cover.jpg&quot; alt=&quot;Magic Leap&quot; title=&quot;Magic Leap&quot;&gt;&lt;/center&gt;

&lt;p&gt;&lt;a href=&quot;https://www.vincentqin.tech/collections/&quot;&gt;这里&lt;/a&gt;我汇总了有关光场（Light Field）一些有用的链接以及光场数据的处理过程。目前还在整理中，随时更新。&lt;br&gt;&lt;span id=&quot;inline-red&quot;&gt;声明&lt;/span&gt;：&lt;u&gt;&lt;strong&gt;一切理解都是本人观点，如有疑问，还望在&lt;/strong&gt;评论&lt;strong&gt;中留言。如需转载请与本人联系，谢谢合作&lt;/strong&gt;&lt;/u&gt;! 邮箱：&lt;a href=&quot;www.vincentqin.tech/about&quot;&gt;点我&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="计算机视觉" scheme="https://www.vincentqin.tech/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
    
      <category term="Light Field" scheme="https://www.vincentqin.tech/tags/Light-Field/"/>
    
      <category term="Matlab光场工具包" scheme="https://www.vincentqin.tech/tags/Matlab%E5%85%89%E5%9C%BA%E5%B7%A5%E5%85%B7%E5%8C%85/"/>
    
      <category term="光场" scheme="https://www.vincentqin.tech/tags/%E5%85%89%E5%9C%BA/"/>
    
      <category term="计算成像" scheme="https://www.vincentqin.tech/tags/%E8%AE%A1%E7%AE%97%E6%88%90%E5%83%8F/"/>
    
  </entry>
  
  <entry>
    <title>Matlab相关问题汇总</title>
    <link href="https://www.vincentqin.tech/2017/01/16/Matlab%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
    <id>https://www.vincentqin.tech/2017/01/16/Matlab相关问题汇总/</id>
    <published>2017-01-16T02:43:01.000Z</published>
    <updated>2017-10-30T16:22:15.858Z</updated>
    
    <content type="html"><![CDATA[<center><img src="http://www.vincentqin.tech/2017/01/16/Matlab%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/matlab.jpg" width="100%"></center><p>以下是我在使用Matlab编程时遇到的问题以及解决方法，最后彩蛋随时补充。</p><a id="more"></a><h2 id="Matlab-写入Excel错误"><a href="#Matlab-写入Excel错误" class="headerlink" title="Matlab 写入Excel错误"></a>Matlab 写入Excel错误</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><blockquote><p>Matlab 在创建EXCEL文件的时候总是出错，即使使用MATLAB自带的程序。 问题描述：在Matlab中使用xlswrite函数时，如果excel文件存在时，则程序能够正常运行；当excel文件不存在时，则会出现错误：</p></blockquote><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Error using xlswrite (line <span class="number">220</span>) Error: 服务器出现意外情况。</div></pre></td></tr></table></figure><p>问题解决：xlswrite函数在调用时会占用Excel的com端口，所以要保证在调用时这个端口是开放的，也就是没有被其他程序占用。打开任意一个Excel（我的是16版）文档，点击<strong>文件</strong>—<strong>选项</strong>，弹出Excel选项卡，在<strong>加载项</strong>中可以看到，活动应用程序加载项，以及非活动应用程序加载项；<br>由于我的系统中装了一个福昕阅读器，该程序占用了Excel的com端口，所以当Matlab再去调用这个端口时就会出现异常。具体解决方法：点击管理旁边的下拉菜单，选择COM加载项，点击转到，把福昕阅读器的前面的勾去掉，然后确定。<center>![这里写图片描述](http://img.blog.csdn.net/20160628202102846)![这里写图片描述](http://img.blog.csdn.net/20160628202117268)</center></p><h2 id="Matlab设置绘图坐标轴信息"><a href="#Matlab设置绘图坐标轴信息" class="headerlink" title="Matlab设置绘图坐标轴信息"></a>Matlab设置绘图坐标轴信息</h2><h3 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h3><blockquote><p>Matlab 作图时更改纵轴刻度为科学计数法，指数放在框左上方</p></blockquote><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">plot([<span class="number">0</span> <span class="number">1</span>],[<span class="number">0</span> <span class="number">.02</span>]) <span class="comment">% 作图，换成自己的图像就可以~</span></div><div class="line">oldLabels = str2num(get(gca,<span class="string">'YTickLabel'</span>));</div><div class="line">scale = <span class="number">10</span>^<span class="number">2</span>;newLabels = num2str(oldLabels*scale);</div><div class="line">set(gca,<span class="string">'YTickLabel'</span>,newLabels,<span class="string">'units'</span>,<span class="string">'normalized'</span>);</div><div class="line">posAxes = get(gca,<span class="string">'position'</span>);</div><div class="line">textBox = annotation(<span class="string">'textbox'</span>,<span class="string">'linestyle'</span>,<span class="string">'none'</span>,<span class="string">'string'</span>,[<span class="string">'x 10\it^&#123;'</span> sprintf(<span class="string">'%d'</span>,log10(<span class="number">1.</span>/scale)) <span class="string">'&#125;'</span>]);</div><div class="line">posAn = get(textBox,<span class="string">'position'</span>);</div><div class="line">set(textBox,<span class="string">'position'</span>,[posAxes(<span class="number">1</span>) posAxes(<span class="number">2</span>)+posAxes(<span class="number">4</span>) posAn(<span class="number">3</span>) posAn(<span class="number">4</span>)],<span class="string">'VerticalAlignment'</span>,<span class="string">'cap'</span>);</div></pre></td></tr></table></figure><ul><li>今天学到一个特别简单的语句，删除元胞数组中空元素： <strong>a(cellfun(@isempty,a))=[]</strong>；（2016.05.19）</li></ul><h2 id="Matlab显示图片错误"><a href="#Matlab显示图片错误" class="headerlink" title="Matlab显示图片错误"></a>Matlab显示图片错误</h2><h3 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述"></a>问题描述</h3><blockquote><p>MATLAB图像显示总是白色</p></blockquote><p>  imshow是一个很强大的”武器”，显示图像简直无所不能，但这其中往往会出现问题。在处理图像时，我们的图像经常是经过了某种运算，为了保证其精度，系统会自动的将uint8型数据类型转化成double型。</p><p>   “如果直接运行imshow(I)，我们会发现显示的是一个白色的图像。这是因为imshow()显示图像时对double型是认为在0~1范围内，即大于1时都是显示为白色，而imshow显示uint8型时是0~255范围。而经过运算的范围在0-255之间的double型数据就被不正常得显示为白色图像了。<br>   ”</p><h3 id="解决之道"><a href="#解决之道" class="headerlink" title="解决之道"></a>解决之道</h3><ul><li>可以利用mat2gray()函数，这个函数是归一化函数，可以把数据归一化到0-1之间，再用imshow()就可以了；</li><li>或者对于一个处理后的黑白图像Img，若为double型可以这样写：imshow(Img/max(Img(:)))；</li><li>还有一种就是：imshow(Img,[]);就是加一个[]，即可以自动调整显示；</li></ul><h2 id="彩蛋"><a href="#彩蛋" class="headerlink" title="彩蛋"></a>彩蛋</h2><ul><li>大神教我们怎么画图，#MATLAB无所不能#，<a href="http://blogs.mathworks.com/graphics/" target="_blank" rel="external">戳戳这里</a>~</li><li>Matlab 字体困扰了我很长时间，终于在网上找到了一个比较好的组合，<a href="http://pan.baidu.com/s/1geIRi2R" target="_blank" rel="external">猛戳这里</a>！<a href="http://blog.csdn.net/whoispo/article/details/50383362" target="_blank" rel="external">原文地址</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;&lt;img src=&quot;http://www.vincentqin.tech/2017/01/16/Matlab%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/matlab.jpg&quot; width=&quot;100%&quot;&gt;&lt;/center&gt;

&lt;p&gt;以下是我在使用Matlab编程时遇到的问题以及解决方法，最后彩蛋随时补充。&lt;/p&gt;
    
    </summary>
    
      <category term="Matlab大法好" scheme="https://www.vincentqin.tech/categories/Matlab%E5%A4%A7%E6%B3%95%E5%A5%BD/"/>
    
    
      <category term="Matlab" scheme="https://www.vincentqin.tech/tags/Matlab/"/>
    
  </entry>
  
  <entry>
    <title>AR形势与应用</title>
    <link href="https://www.vincentqin.tech/2016/08/09/AR%E5%BD%A2%E5%8A%BF%E4%B8%8E%E5%BA%94%E7%94%A8/"/>
    <id>https://www.vincentqin.tech/2016/08/09/AR形势与应用/</id>
    <published>2016-08-09T04:37:42.000Z</published>
    <updated>2017-10-30T16:22:15.728Z</updated>
    
    <content type="html"><![CDATA[<center><img src="/2016/08/09/AR形势与应用/AR.jpg" alt="AR.jpg" title=""></center><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p id="div-border-left-red">当前，微软、谷歌、苹果、Facebook 等 IT 巨头都在布局虚拟现实Virtual Reality简称 VR）虚拟现实也许是下一个颠覆人类生活的新技术之一。增强现实Augmented Reality简称 AR）是虚拟现实技术的延伸它可以用来模拟对象让学习者在现实环境背景中看到虚拟生成的模型对象 而且这一模型可以快速生成、操纵和旋转。</p><a id="more"></a><h2 id="1．增强现实公司分类"><a href="#1．增强现实公司分类" class="headerlink" title="1．增强现实公司分类"></a>1．增强现实公司分类</h2><p>Augmented reality增强现实创业的公司大致可以分成如下几种公司类型[1]。（以下是翻译的国外网站的内容）</p><ul><li>AR平台公司（AR platform companies）。<br>这些公司为开发者提供底层的开发工具，以便于开发者能够创造更多更加高级的AR解决方案。这样的公司有：Qualcomm Vuforia, METAIO’s SDK, TotalImmersion。</li><li>AR产品和游戏公司。<br>这些公司主营自己独家AR零售产品例如：书籍、游戏。包括如下公司：Sphero, POPAR, Sony, Microsoft 以及 Nintendo。</li><li>自助DIY AR公司以及通用AR查看器。<br>这些公司专为快速简单的AR体验或活动而设计，提供内容管理工具和基本AR效果菜单。借助自助AR工具，精通技术的个人可以创建简单的体验，例如发布单个视频或简单的动画。AR自助服务公司非常适合发布商，教育工作者，学生和其他想要测试或创建简单的增强现实体验的用户，而无需投资于完全定制的品牌应用体验。一些DIY公司还提供AR查看器，定制服务和白标签选项。这个领域的公司包括Layar，Aurasma，DAQRI和Zappar。</li><li>定制品牌应用开发公司。<br>这些公司直接与品牌营销人员和机构合作，主要为的广告活动、贸易展览和现场活动构建定制的增强现实解决方案。自定义品牌应用程序允许营销人员结合独一无二的定制增强现实体验与个性化服务和项目管理。自定义功能通常包括品牌规格，导航，用户界面，动画，复杂或大规模的AR效果等。服务可以包括3D建模，与其他软件服务或电子商务平台的集成，游戏开发，基于位置的安装，通知，复杂动画，微位置或其他高级AR效果。这个领域的公司包括Appshaker，GravityJack和Marxent。</li><li>行业特定的垂直AR解决方案（Industry-specific vertical AR solutions）。<br>最新出现的AR公司类别是那些提供AR解决方案的专业服务公司，专为服务于专业领域。如奢侈品零售，医疗服务，工业应用，制药公司和化妆品公司。这个领域的公司包括用于广告的Blippar，用于豪华珠宝零售的Holition，用于家具布置的Adornably以及用于消费零售，工业和企业销售工具的Marxent的VisualCommerce®。</li></ul><p>做个不恰当的比喻，我觉得AR是VR的一个延伸，只是把VR的场景换成了现实场景，眼镜换成了透明的。</p><h2 id="2．可行性分析"><a href="#2．可行性分析" class="headerlink" title="2．可行性分析"></a>2．可行性分析</h2><p>一个良好的AR体验，大致可以分成一下几个方面：</p><ul><li>1．    3D眼镜；这应该是VR或者AR最为重要的一部分；</li><li>2．    手柄；可以代替人手去操纵，在一定程度上增加了使用的灵活性。（但我觉得未来手柄一定会被淘汰，因为这只是人手不能被充分利用的代替手段）。</li><li>3．    3D显示屏幕，它可以跟踪用户的头的转动和手的动作，实时调整所看到的3D图像，并允许用户操控一些虚拟物体，就好比他们真正存在。</li><li>4．    待补充</li></ul><h3 id="技术难点"><a href="#技术难点" class="headerlink" title="技术难点"></a>技术难点</h3><p>VR得益于三维游戏的发展，而AR收益于影视领域的跟踪技术（video tracking）的发展。从技术门槛的角度来说，VR、AR和移动端重合的技术有：显示器、运动传感器、处理器、储存、记忆、无线连接等。在硬件上，这些都不是技术难点。<br>VR、AR的难点都在感知和显示，感知是一种映射，VR 映射的是一个lighthouse的空间或者PS camera mapping的一个交叉；在显示上，VR如何精准地匹配用户的头部产生相应的画面，AR则在这基础上算出光照、遮挡等情况并让图像通透不干扰现实中的视线。<br>而VR硬件的难点在于光学的镜片技术和位置追踪技术（SLAM），因为以前的移动端不涉及这些技术。AR的软件难点在于：1、定位相机；2、恢复场景的三维结构。通常情况下，这一技术被称作SLAM（Simultaneous Localization And Mapping）。当然还有一些其他的技术诸如：图像追踪、云端视觉搜索、人脸和表情追踪等。</p><p>目前国内外已经有多家技术公司提供了软件开发方面的AR解决方案和工具，使得全球众多开发者参与到AR应用开发中来。开发者不需要自己搭建系统架构，也不用理解底层SDK复杂的实现方式，只需要将AR模块嵌入到已有的业务逻辑中，就可以通过现成的开源代码或者平台工具，设计并开发属于自己的AR软件产品。就这个层面来讲技术是可以实现的，但就某一个特殊领域的实现方式可能有所差别。</p><h3 id="技术支持"><a href="#技术支持" class="headerlink" title="技术支持"></a>技术支持</h3><p>Metaio 是由德国大众的一个项目衍生出来的一家虚拟现实初创公司，现已被苹果公司收购。 专门从事增强现实和机器视觉解决方案，产品主要包括Metaio SDK 和 Metaio Creator。 Metaio SDK 支持移动设备的AR应用开发，它在内部提供增强现实显示组件ARView，该组件将摄像机层、3D 空间计算以及POI信息的叠加等功能全部封装在一起，用户在使用增强现实功能时，只需要关注用户操作的监听器即可，摄像机层、3D 空间计算、图形识别以及空间信息叠加等逻辑，完全由ARView组件自己处理 。Metaio Creator相对Metaio SDK 来说，使用门槛更低，用户无需掌握移动开发技术，就可以通过 Metaio Creator 用户图形接口中简单的点击、拖拽、拉伸等方式，控制软件中组件的功能，以构建出自己的增强现实结果。（但是被苹果收购了，目前不提供服务）<br>Wikitude 是由美国 Mobilizy 公司于 2008 年秋推出的一款移动增强现实开发平台， 支持 Android、 iOS、Black Berry 以及 Windows Phone 多个手机智能操作系统Wikitude SDK 是一款优秀的增强现实开发工具包， 它能够帮助开发人员减小增强现实应用程序开发的复杂性。 目前，Wikitude SDK 支持载入真实的物理环境向 AR 环境中添加虚拟物体、支持用户与虚拟物体的交互、响应用户的位置变化、AR 环境中信息提示、从本地或网络加载资源等功能。<br><img src="http://www.wikitude.com/wp-content/uploads/2016/04/160405_WT_HomeSlider_Image_3D-Tracking.png" alt="图一Wikitude 官网界面"><br>图一Wikitude 官网界面</p><p>ENTiTi Creator是由以色列一家创业公司 Waking App 开发的一款 AR 作品制作工具，易学易用是它的最大特色。用户可以使用ENTiTi平台上传图片和视频以及相应的动作指令， 并通过简单的逻辑串联，就可以轻松创建出包含3D图像、动画或者游戏的AR/VR 内容。该平台不需要任何编程、完全依靠鼠标拖放就能完成整个创建过程。EN-TiTi是基于云计算的平台，可以在线 3D 视角查看内容，并自动适配各种终端，比如，手机或平台电脑、三星 Gear VR 盒子、Vuzix 智能眼镜等。开发者通过它所发布出来的AR内容，只需要通过一个叫作 EN-TiTi View 软件的入口，就可以轻松访问。 这意味着全球所有开发者所开发出的成千上万的 AR 内容，只需要一个软件即可全部浏览。<br><img src="http://i1.piimg.com/567571/4738bb1d449bd227.jpg" alt=""></p><center><embed src=".././images/realmax.jpg"></center><p>图二ENTiTi Creator 官网介绍</p><p>Realmax公司是一个国际化AR生态级企业，在上海、香港、纽约、慕尼黑都设立了分公司，并建立了5个全球实验室，完成了硬件量产、软件算法、应用开发和内容制作的AR技术储备，AR操作系统“Realcast”也有可观的用户量，在工业、幼教、电商、旅游等领域积累了大量客户，是AR领域唯一的一家完成“平台+内容+终端+应用”生态链布局的企业。<br><img src="http://i1.piimg.com/567571/f4e18a5fdef099fb.jpg" alt=""><br>图三 Realmax公司官网主页</p><p>根据以上分析，如果想完成某一个特定的AR或者VR应用，可以使用上述公司提供的SDK，在一定程度上会加快开发速度。</p><hr><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>1．    增强现实公司类型：<a href="http://www.marxentlabs.com/augmented-reality-company-primer-5-types-augmented-reality-companies/" target="_blank" rel="external">http://www.marxentlabs.com/augmented-reality-company-primer-5-types-augmented-reality-companies/</a><br>2．    Metaio公司主页：<a href="http://www.metaio.eu/" target="_blank" rel="external">http://www.metaio.eu/</a><br>3．    AR技术举例以及现有公司介绍：<a href="http://www.marxentlabs.com/what-is-virtual-reality-definition-and-examples/。" target="_blank" rel="external">http://www.marxentlabs.com/what-is-virtual-reality-definition-and-examples/。</a><br>4．    Layer公司AR开发SDK：<a href="https://www.layar.com/solutions/#sdk" target="_blank" rel="external">https://www.layar.com/solutions/#sdk</a><br>5．    Wikitude官网：<a href="http://www.metaio.eu/index.html" target="_blank" rel="external">http://www.metaio.eu/index.html</a><br>6．    ENTiTi Creator 官网：<a href="http://www.wakingapp.com/" target="_blank" rel="external">http://www.wakingapp.com/</a><br>7．    Realmax公司官网：<a href="http://www.realmax.com/或者http://www.realmax.com.hk/" target="_blank" rel="external">http://www.realmax.com/或者http://www.realmax.com.hk/</a></p><!-- more -->]]></content>
    
    <summary type="html">
    
      &lt;center&gt;&lt;img src=&quot;/2016/08/09/AR形势与应用/AR.jpg&quot; alt=&quot;AR.jpg&quot; title=&quot;&quot;&gt;&lt;/center&gt;

&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p ID=&quot;div-border-left-red&quot;&gt;当前，微软、谷歌、苹果、Facebook 等 IT 巨头都在布局虚拟现实Virtual Reality简称 VR）虚拟现实也许是下一个颠覆人类生活的新技术之一。增强现实Augmented Reality简称 AR）是虚拟现实技术的延伸它可以用来模拟对象让学习者在现实环境背景中看到虚拟生成的模型对象 而且这一模型可以快速生成、操纵和旋转。&lt;/p&gt;
    
    </summary>
    
      <category term="AR" scheme="https://www.vincentqin.tech/categories/AR/"/>
    
    
      <category term="AR" scheme="https://www.vincentqin.tech/tags/AR/"/>
    
  </entry>
  
  <entry>
    <title>HEXO建站备忘录</title>
    <link href="https://www.vincentqin.tech/2016/08/09/HEXO%E5%BB%BA%E7%AB%99%E5%A4%87%E5%BF%98%E5%BD%95/"/>
    <id>https://www.vincentqin.tech/2016/08/09/HEXO建站备忘录/</id>
    <published>2016-08-09T04:37:42.000Z</published>
    <updated>2017-12-08T16:20:27.087Z</updated>
    
    <content type="html"><![CDATA[<center><img src="/2016/08/09/HEXO建站备忘录/hexo.png" alt="hexo.png" title=""></center><div class="note success"><p><strong>Hexo</strong>作为建立Blog利器，为我们没有JS基础的小白们提供了建立专属自己博客的机会！经常使用的语法很简单，我们完全可以在10min分钟之内建立自己的Blog，后期的优化才是最耗费时间的。好了，直接进入正文。</p></div><a id="more"></a><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">hexo clean    # 清除缓存，简写 hexo c</div><div class="line">hexo generate # 作用：建立静态页面， 简写 hexo g </div><div class="line">hexo deploy   # 部署自己的blog，本人部署在了Git上，简写 hexo d</div><div class="line">hexo server   # 以启动本地服务， 可预览，简写 hexo s</div><div class="line">hexo new blog_name #　新建以blog_name为名的blog</div><div class="line">在.md文档中加入 &lt;!-- more --&gt; 可以显示“阅读全文”</div></pre></td></tr></table></figure><h2 id="显示文章阅读数量"><a href="#显示文章阅读数量" class="headerlink" title="显示文章阅读数量"></a>显示文章阅读数量</h2><p>另外：<a href="https://notes.wanghao.work/2015-10-21-%E4%B8%BANexT%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD.html#%E9%85%8D%E7%BD%AELeanCloud" target="_blank" rel="external">显示文章阅读量</a>， 服务主要用了<a href="https://leancloud.cn/" target="_blank" rel="external">LeanCloud</a>服务提供商</p><h2 id="主题设置"><a href="#主题设置" class="headerlink" title="主题设置"></a>主题设置</h2><p><a href="http://www.arao.me/" target="_blank" rel="external">Make the theme more beautiful, recommended</a></p><p>Plus: 我使用的是<a href="http://theme-next.iissnan.com/" target="_blank" rel="external">Next</a>主题</p><h2 id="关于多说"><a href="#关于多说" class="headerlink" title="关于多说"></a>关于多说</h2><p>多说已死，<del>评论系统转到了Disqus，但是被墙的事实让人感觉不爽</del>。几经周折，从多说转到Disqus，然后在gitment和gitalk之间徘徊，最后还是选择了<a href="https://valine.js.org/#/" target="_blank" rel="external">valine</a>，不过它只能在中国区进行评论，于是我还是保留了gitalk。于是我总结出来我属于爱折腾的那种人。</p><h2 id="关于旋转头像"><a href="#关于旋转头像" class="headerlink" title="关于旋转头像"></a>关于旋转头像</h2><p>把侧边栏头像变成圆形&amp;鼠标停留在上面出现旋转效果，具体修改文件的位置是<code>next\source\css\_common\components\sidebar\sidebar-author.styl</code>。更为具体的修改过程见<a href="https://ehlxr.me/2016/08/30/%E4%BD%BF%E7%94%A8Hexo%E5%9F%BA%E4%BA%8EGitHub-Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%89%EF%BC%89/" target="_blank" rel="external">Ehlxr</a>写的这篇博客。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.site-author-image</span> &#123;</div><div class="line">  <span class="attribute">display</span>: block;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</div><div class="line">  <span class="attribute">padding</span>: $site-author-image-padding;</div><div class="line">  <span class="attribute">max-width</span>: $site-author-image-width;</div><div class="line">  <span class="attribute">height</span>: $site-author-image-height;</div><div class="line">  <span class="attribute">border</span>: $site-author-image-border-width solid $site-author-image-border-color;</div><div class="line"></div><div class="line">  <span class="comment">/* 头像圆形 */</span></div><div class="line">  <span class="attribute">border-radius</span>: <span class="number">80px</span>;</div><div class="line">  <span class="attribute">-webkit-border-radius</span>: <span class="number">80px</span>;</div><div class="line">  <span class="attribute">-moz-border-radius</span>: <span class="number">80px</span>;</div><div class="line">  <span class="attribute">box-shadow</span>: inset <span class="number">0</span> -<span class="number">1px</span> <span class="number">0</span> <span class="number">#333</span>sf;</div><div class="line">  <span class="comment">/* 设置循环动画 [animation: (play)动画名称 (2s)动画播放时长单位秒或微秒 (ase-out)动画播放的速度曲线为以低速结束 </span></div><div class="line">    (1s)等待1秒然后开始动画 (1)动画播放次数(infinite为循环播放) ]*/</div><div class="line">  <span class="attribute">-webkit-animation</span>: play <span class="number">2s</span> ease-out <span class="number">1s</span> <span class="number">1</span>;</div><div class="line">  <span class="attribute">-moz-animation</span>: play <span class="number">2s</span> ease-out <span class="number">1s</span> <span class="number">1</span>;</div><div class="line">  <span class="attribute">animation</span>: play <span class="number">2s</span> ease-out <span class="number">1s</span> <span class="number">1</span>; </div><div class="line"></div><div class="line">  <span class="comment">/* 鼠标经过头像旋转360度 */</span></div><div class="line">  <span class="attribute">-webkit-transition</span>: -webkit-transform <span class="number">1.5s</span> ease-out;</div><div class="line">  <span class="attribute">-moz-transition</span>: -moz-transform <span class="number">1.5s</span> ease-out;</div><div class="line">  <span class="attribute">transition</span>: transform <span class="number">1.5s</span> ease-out;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">img</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">  <span class="comment">/* 鼠标经过头像旋转360度 */</span></div><div class="line">  <span class="attribute">-webkit-transform</span>: <span class="built_in">rotateZ</span>(360deg);</div><div class="line">  <span class="attribute">-moz-transform</span>: <span class="built_in">rotateZ</span>(360deg);</div><div class="line">  <span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(360deg);</div><div class="line">&#125;</div><div class="line">```<span class="selector-tag">language</span></div></pre></td></tr></table></figure></p><h2 id="背景颜色设置"><a href="#背景颜色设置" class="headerlink" title="背景颜色设置"></a>背景颜色设置</h2><p>其实NEXT主题已经自带了几种动画了，我用的是three_waves；但是呢，存在一个问题就是因为Blog背景是透明的，这样文字和背景动画就有重叠效果了，很不方便阅读，这时把背景色设置为白色即可。添加<strong>background: white</strong>到如下路径<code>next\source\css\_schemes\Muse\_layout.styl</code><br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.header-inner, .container .main-inner, .footer-inner &#123;</div><div class="line">  background: white;</div><div class="line">  +mobile() &#123; width: auto; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="页面宽度设置"><a href="#页面宽度设置" class="headerlink" title="页面宽度设置"></a>页面宽度设置</h2><p>有时候我们可能会嫌弃博客的页面太小，留白过大。这时候可以对页面宽度进行设置，可以参考Hexo Next主题 <a href="https://github.com/iissnan/hexo-theme-next/issues/759" target="_blank" rel="external">Issue #759</a>。对于 Pisces Scheme，需要同时修改 <code>header</code> 的宽度、<code>.main-inner</code> 的宽度以及 <code>.content-wrap</code> 的宽度。例如，使用百分比（Pisces 的布局定义在 <code>source/css/_schemes/Picses/_layout.styl</code> 中）：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.header</span>&#123; <span class="attribute">width</span>: <span class="number">80%</span>; &#125; <span class="comment">/* 80% */</span></div><div class="line"><span class="selector-class">.container</span> <span class="selector-class">.main-inner</span> &#123; <span class="attribute">width</span>: <span class="number">80%</span>; &#125; <span class="comment">/* 80% */</span></div><div class="line"><span class="selector-class">.content-wrap</span> &#123; <span class="attribute">width</span>: <span class="built_in">calc</span>(100% - 260px); &#125;</div></pre></td></tr></table></figure><h2 id="优化友情链接"><a href="#优化友情链接" class="headerlink" title="优化友情链接"></a>优化友情链接</h2><p>新建一个<code>Friends</code>页面：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new page Friends</div></pre></td></tr></table></figure></p><p>新建样式，进入<code>E:\Blog-new-gitment-new-theme\themes\next\source\css\_custom\custom.styl</code>，在最后新加上几行代码:</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">$shadowColor  = #333;</div><div class="line">$themeColor       = #222;</div><div class="line">$link-image-size  = 180px;</div><div class="line"></div><div class="line">.link-body&#123;</div><div class="line">ul&#123;</div><div class="line">display: flex;</div><div class="line">justify-content: space-between;</div><div class="line">align-items: center;</div><div class="line">flex-wrap: wrap;</div><div class="line">margin: 0;</div><div class="line">padding: 0;</div><div class="line">.link&#123;</div><div class="line">max-width: $link-image-size;</div><div class="line">min-width: $link-image-size;</div><div class="line">max-height: $link-image-size;</div><div class="line">min-height: $link-image-size;</div><div class="line"></div><div class="line">position: relative;</div><div class="line">box-shadow: 0 0 1px $shadowColor;</div><div class="line">magin: 6px;</div><div class="line">width: 20%;</div><div class="line">list-style: none!important;</div><div class="line">overflow: hidden;</div><div class="line">border-radius: 6px;</div><div class="line">img&#123;</div><div class="line">object-fit: cover;</div><div class="line">transition: transform .6s ease-out;</div><div class="line">vertical-align: middle;</div><div class="line">border-bottom: 4px solid #eee;//#e5642b;</div><div class="line">transition: 0.4s ;</div><div class="line">width: 100%;</div><div class="line">border-radius: 90px 90px 90px 90px;</div><div class="line"></div><div class="line">display: inline-block;</div><div class="line">float: none;</div><div class="line">vertical-align: middle;</div><div class="line">&#125;</div><div class="line">.link-name&#123;</div><div class="line">position: absolute;</div><div class="line">bottom: 0;</div><div class="line">width: 100%;</div><div class="line">color: #666;</div><div class="line">text-align: center;</div><div class="line">text-shadow: 0 0 1px rgba(0,0,0,.4);</div><div class="line">background: rgba(255,255,255,.7);</div><div class="line">&#125;</div><div class="line">&amp;:hover&#123;</div><div class="line">img&#123;</div><div class="line">overflow: hidden;</div><div class="line">//transition: 0.4s;</div><div class="line">border-radius: 0 0 0 0;</div><div class="line">&#125;</div><div class="line">.link-name&#123;</div><div class="line">color: $themeColor;</div><div class="line">text-shadow: 0 0 1px $themeColor;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>然后编辑站点的<code>source\Friends</code>下的<code>index.md</code>文件，内容如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"link-body"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--your friend begin--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"link"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"your_friends_link"</span> <span class="attr">title</span>=<span class="string">"balabala"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> &gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>= <span class="string">"image_path"</span> <span class="attr">alt</span>=<span class="string">"balabala"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"link-name"</span>&gt;</span> balabala<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--your friend end--&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--your another friend begin--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"link"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"your_friends_link"</span> <span class="attr">title</span>=<span class="string">"balabala"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> &gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>= <span class="string">"image_path"</span> <span class="attr">alt</span>=<span class="string">"balabala"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"link-name"</span>&gt;</span> balabala<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--your another friend end--&gt;</span></div><div class="line">...</div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><h2 id="增加gitter即时聊天到sidebar"><a href="#增加gitter即时聊天到sidebar" class="headerlink" title="增加gitter即时聊天到sidebar"></a>增加gitter即时聊天到sidebar</h2><p>在<code>themes\next\layout\_layout.swig</code>的<code>&lt;/body&gt;</code>前增加如下代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- add gitter on sidebar --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">  ((<span class="built_in">window</span>.gitter = &#123;&#125;).chat = &#123;&#125;).options = &#123;</div><div class="line">    room: <span class="string">'vincentqin-blog-chat/Lobby'</span></div><div class="line">  &#125;;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://sidecar.gitter.im/dist/sidecar.v1.js"</span> <span class="attr">async</span> <span class="attr">defer</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p><p>然后在<code>themes\next\source\css\_custom\custom.styl</code>里增加如下设置：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// adjust the position</div><div class="line">.gitter-open-chat-button &#123;</div><div class="line">      right: 20px;</div><div class="line">  padding: 10px;</div><div class="line">  background-color: #555;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="MarkDown编辑器"><a href="#MarkDown编辑器" class="headerlink" title="MarkDown编辑器"></a>MarkDown编辑器</h2><p>推荐<strong>Haroopad</strong></p><center><img src="/2016/08/09/HEXO建站备忘录/100.png" alt="Haroopad" title="Haroopad"></center><h2 id="插入PDF文档以及图片"><a href="#插入PDF文档以及图片" class="headerlink" title="插入PDF文档以及图片"></a>插入PDF文档以及图片</h2><ol><li><p>插入PDF文档：<br>将相应的PDF文档放在与博客标题同名的文件夹内，然后再按照如下方式进行插入。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[点我，这里是PDF文档](latex入门教程.pdf)</div></pre></td></tr></table></figure><p> <a href="latex入门教程.pdf">点我，这里是PDF文档</a></p></li><li><p>利用js嵌入图片</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;img src= image_path alt=<span class="string">"Lytro相机"</span> width=<span class="string">"100%"</span>&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">center</span>&gt;</span>Lytro<span class="tag">&lt;/<span class="name">center</span>&gt;</span></span></div></pre></td></tr></table></figure><p> 注意以上的<code>image_path</code>既可以是图床中的路径，亦可以把图片放在<code>source/images/</code>文件下，然后<code>image_path=/images/logo.png</code>，当然也可以如下插入图片，更加方便。</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">![](<span class="regexp">/images/</span>logo.png)</div></pre></td></tr></table></figure></li><li><p>利用插件，以下我在Github上找到的别人已经做好的一个小工具。</p></li></ol><ul><li><p>安装 <a href="https://github.com/timnew/hexo-tag-asset-res" target="_blank" rel="external">hexo-tag-asset-res</a></p><p>  打开Git Shell, 在Hexo根目录下, 输入如下代码</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-tag-asset-res --save</div></pre></td></tr></table></figure></li><li><p>修改Hexo根目录下_config.yml文件</p><p>  打开Hexo根目录, 找到_config.yml文件, 用任何一个文本编辑器打开, 找到如下代码</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">post_asset_folder: <span class="literal">false</span></div></pre></td></tr></table></figure></li><li><p>测试插入</p><center><img src="/2016/08/09/HEXO建站备忘录/1.jpg" alt="林青霞" title="林青霞"></center></li></ul><h2 id="配置个性化的字体"><a href="#配置个性化的字体" class="headerlink" title="配置个性化的字体"></a>配置个性化的字体</h2><p>在<code>next\source\css\_variables\custom.styl</code>文件中添加如下内容。</p><figure class="highlight styl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 修改成你期望的字体族</span></div><div class="line"><span class="variable">$font</span>-family-base= <span class="string">"Monda"</span>,<span class="string">"Microsoft YaHei"</span>, Verdana, sans-serif</div><div class="line"><span class="comment">// 标题，修改成你期望的字体族</span></div><div class="line"><span class="variable">$font</span>-family-headings= <span class="string">"Roboto Slab"</span>, Georgia, sans</div><div class="line"><span class="comment">// 代码字体</span></div><div class="line"><span class="variable">$code</span>-<span class="attribute">font-family</span>= <span class="string">"PT Mono"</span>, <span class="string">"Input Mono"</span>, Consolas, Monaco, Menlo, monospace</div><div class="line"><span class="comment">// 博客字体</span></div><div class="line"><span class="variable">$font</span>-family-posts= <span class="string">"Monda"</span></div><div class="line"><span class="comment">// logo字体</span></div><div class="line"><span class="variable">$font</span>-family-logo= <span class="string">"Lobster Two"</span></div></pre></td></tr></table></figure><h2 id="在博客中插入网易云音乐"><a href="#在博客中插入网易云音乐" class="headerlink" title="在博客中插入网易云音乐"></a>在博客中插入网易云音乐</h2><p>我们可以利用网易云提供的代码直接在markdown文档里面插入。</p><ul><li>在网页上找到你想要播放的音乐，如下图：<img src="/2016/08/09/HEXO建站备忘录/wangyiMusic.png" alt="wangyiMusic.png" title=""></li></ul><ul><li>点击<strong>生成外链播放器</strong><img src="/2016/08/09/HEXO建站备忘录/wangyiMusicCode.png" alt="wangyiMusicCode.png" title=""></li></ul><p>注意自动播放，以及音乐播放器的大小可调。</p><ul><li>在Markdown文档里插入如下代码</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;center&gt;<span class="xml"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">frameborder</span>=<span class="string">"no"</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">marginwidth</span>=<span class="string">"0"</span> <span class="attr">marginheight</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">500</span> <span class="attr">height</span>=<span class="string">86</span> <span class="attr">src</span></span></span></div><div class="line">=<span class="string">"http://music.163.com/outchain/player?type=2&amp;id=29722263&amp;auto=0&amp;height=66"</span>&gt;<span class="tag">&lt;/<span class="name">iframe</span>&gt;</span><span class="xml"><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span></div></pre></td></tr></table></figure><center><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="500" height="86" src="http://music.163.com/outchain/player?type=2&id=29722263&auto=0&height=66"></iframe></center><h2 id="同时部署"><a href="#同时部署" class="headerlink" title="同时部署"></a>同时部署</h2><p>接下来主要涉及到以hexo框架搭建博客的版本管理。同时部署其实很简单，仅仅修改<strong>站点配置文件</strong>的<code>_config.yml</code>即可。在最后的deploy底下新增一项：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attr">repo:</span> </div><div class="line"><span class="attr">github:</span> https://github.com/Your_Github_ID/Github_ID.github.io.git </div><div class="line"><span class="attr">coding:</span> https://git.coding.net/Your_Coding_ID/Your_Repo_Name.coding.me.git</div></pre></td></tr></table></figure><p>以后<code>hexo d</code>时，就会同时部署到github和coding。</p><h2 id="版本管理"><a href="#版本管理" class="headerlink" title="版本管理"></a>版本管理</h2><h3 id="方案-1（推荐）"><a href="#方案-1（推荐）" class="headerlink" title="方案 1（推荐）"></a>方案 1（推荐）</h3><p>下载第三方插件，more information refers to this link <a href="https://github.com/coneycode/hexo-git-backup" target="_blank" rel="external">hexo-git-backup</a>. When you are well configured, you can just run the following command.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo backup#或 hexo b</div></pre></td></tr></table></figure></p><h3 id="方案-2"><a href="#方案-2" class="headerlink" title="方案 2"></a>方案 2</h3><p>这里涉及到<code>git</code>的部分知识。</p><blockquote><p>目的：实现整个blog源码级别的代码管理，包括<strong>站点配置</strong>&amp;<strong>主题配置</strong>。</p></blockquote><p>首先明确一点，在每次<code>hexo d</code>时，都会自动产生一个名为<code>.deploy_git</code>的文件夹，这个文件夹下包含有<code>hexo g</code>渲染出的各种文件，这些文件就是构成github page或者coding page的重要源码；同时会自动的将这个<code>.deploy_git</code>设置成本地仓库，即产生一个<code>.git</code>的隐藏文件。我们做的事情和以上过程不尽一致，总结起来主要是以下几个命令。<br>首先建立一个名为<code>.gitignore</code>的文件，表示我们并不上传这些文件，原因后续介绍。其内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">.DS_Store</div><div class="line">Thumbs.db</div><div class="line">db.json</div><div class="line">*.log</div><div class="line">node_modules/</div><div class="line">public/</div><div class="line">.deploy*/</div><div class="line">themes/</div></pre></td></tr></table></figure><p>接下来就是把blog的源文件夹搞成一个本地仓库，如下命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 创建仓库</span></div><div class="line">git init    </div><div class="line"><span class="comment"># 为本地仓库添加文件</span></div><div class="line">git add -A</div><div class="line"><span class="comment"># 提交到本地仓库</span></div><div class="line">git commit -m <span class="string">"your message"</span></div><div class="line"><span class="comment"># 添加一个名为 origin 的远程，这个名字随便起</span></div><div class="line">git remote add origin https://github.com/Your_Github_ID/Your_Repo_Name.git</div><div class="line"><span class="comment"># 为其添加 push 到 Github 的地址</span></div><div class="line">git remote <span class="built_in">set</span>-url --add --push origin https://github.com/Your_Github_ID/Your_Repo_Name.git</div><div class="line"><span class="comment"># 为其添加 push 到 Coding 的地址</span></div><div class="line">git remote <span class="built_in">set</span>-url --add --push origin https://git.coding.net/Your_Coding_ID/Your_Repo_Name.git</div><div class="line"><span class="comment"># push到远端的master分支</span></div><div class="line">git push --set-upstream origin master</div><div class="line"><span class="comment"># 新建并切换分支</span></div><div class="line">git checkout -b <span class="string">"another-branch"</span></div><div class="line"><span class="comment"># 各种更改文件......推送到远程</span></div><div class="line">git push --set-upstream origin another-branch</div><div class="line"><span class="comment"># 以后可以直接 git push，不用set了。</span></div></pre></td></tr></table></figure><p>通过以上命令，我们就可以同时部署在github仓库<code>https://github.com/Your_Github_ID/Your_Repo_Name.git</code>和coding仓库<code>https://git.coding.net/Your_Coding_ID/Your_Repo_Name.git</code>了。</p><h4 id="设置主题远程仓库"><a href="#设置主题远程仓库" class="headerlink" title="设置主题远程仓库"></a>设置主题远程仓库</h4><p>这时你会发现<code>themes</code>这个文件夹并没有同时被上传到远程仓库，同上操作，将<code>theme/next</code>设置成本地仓库并部署。之所以将这个仓库单独上传，是为了方便切换主题，以及主题升级。</p><h4 id="设置node-modules远程仓库"><a href="#设置node-modules远程仓库" class="headerlink" title="设置node_modules远程仓库"></a>设置node_modules远程仓库</h4><p>之所以将这个模块单独拎出来处理，是因为这个文件夹虽然容量不大，但是其中文件个数特别多。当和blog源文件一同被<code>git add</code>到暂存区之后，git shell的运行速度就会超慢。我的解决思路就是将其创建成一个仓库，这样git shell的速度就会快一些。具体步骤不再赘述，同上。</p><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>经过建立以上的3个仓库，实现了blog源码级别的版本管理。当然，如果你不想暴露自己的源码，那么你只需要在coding申请一个私有仓库并部署就ok了。虽然看起来有些麻烦，但是一旦配置完毕之后，我们就只需要以下几个步骤就可以实现管理。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">hexo clean  <span class="comment"># 不是必要步骤</span></div><div class="line">hexo d -g   <span class="comment"># 渲染+部署到github page以及coding page</span></div><div class="line">git add .   <span class="comment"># 添加到暂存区</span></div><div class="line">git commit -m <span class="string">"your message"</span> <span class="comment"># push到本地仓库</span></div><div class="line">git push    <span class="comment"># 上传到远程仓库（站点目录、next主题目录、node_modules目录）</span></div></pre></td></tr></table></figure></p><p>Good luck:)</p>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;&lt;img src=&quot;/2016/08/09/HEXO建站备忘录/hexo.png&quot; alt=&quot;hexo.png&quot; title=&quot;&quot;&gt;&lt;/center&gt;

&lt;div class=&quot;note success&quot;&gt;&lt;p&gt;&lt;strong&gt;Hexo&lt;/strong&gt;作为建立Blog利器，为我们没有JS基础的小白们提供了建立专属自己博客的机会！经常使用的语法很简单，我们完全可以在10min分钟之内建立自己的Blog，后期的优化才是最耗费时间的。好了，直接进入正文。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="建站" scheme="https://www.vincentqin.tech/categories/%E5%BB%BA%E7%AB%99/"/>
    
    
      <category term="github" scheme="https://www.vincentqin.tech/tags/github/"/>
    
      <category term="coding" scheme="https://www.vincentqin.tech/tags/coding/"/>
    
      <category term="hexo" scheme="https://www.vincentqin.tech/tags/hexo/"/>
    
      <category term="博客" scheme="https://www.vincentqin.tech/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>Markdown 学习</title>
    <link href="https://www.vincentqin.tech/2016/08/08/Markdown%E5%AD%A6%E4%B9%A0/"/>
    <id>https://www.vincentqin.tech/2016/08/08/Markdown学习/</id>
    <published>2016-08-08T14:10:22.000Z</published>
    <updated>2017-12-01T02:46:15.492Z</updated>
    
    <content type="html"><![CDATA[<center><img src="/2016/08/08/Markdown学习/i-love-markdown.png" alt="i-love-markdown.png" title=""></center><!--<a href="https://www.vincentqin.tech"><img border="0" src="i-love-markdown.png" /></a>--><p>本文涉及学习Markdown文本标记语言的一些练习笔记。</p><a id="more"></a><h2 id="Note-Tag-测试"><a href="#Note-Tag-测试" class="headerlink" title="Note Tag 测试"></a>Note Tag 测试</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * note.js | global hexo script.</div><div class="line"> *</div><div class="line"> * ATTENTION! No need to write this tag in 1 line if u don't want see probally bugs.</div><div class="line"> *</div><div class="line"> * Usage:</div><div class="line"> *</div><div class="line"> * &#123;% note [class] %&#125;</div><div class="line"> * Any content (support inline tags too).</div><div class="line"> * &#123;% endnote %&#125;</div><div class="line"> *</div><div class="line"> * [class] : default | primary | success | info | warning | danger.</div><div class="line"> *           May be not defined.</div><div class="line"> */</div></pre></td></tr></table></figure><div class="note default"><h3 id="Test-note-default"><a href="#Test-note-default" class="headerlink" title="Test note default"></a>Test note default</h3><p>昏鴉盡，小立恨因誰 ?急雪乍翻香閣絮，輕風吹到膽瓶梅，心字已成灰。</p></div><div class="note primary"><h3 id="Test-note-primary"><a href="#Test-note-primary" class="headerlink" title="Test note primary"></a>Test note primary</h3><p>昏鴉盡，小立恨因誰 ?急雪乍翻香閣絮，輕風吹到膽瓶梅，心字已成灰。</p></div><div class="note success"><h3 id="Test-note-success"><a href="#Test-note-success" class="headerlink" title="Test note success"></a>Test note success</h3><p>昏鴉盡，小立恨因誰 ?急雪乍翻香閣絮，輕風吹到膽瓶梅，心字已成灰。</p></div><div class="note info"><h3 id="Test-note-info"><a href="#Test-note-info" class="headerlink" title="Test note info"></a>Test note info</h3><p>昏鴉盡，小立恨因誰 ?急雪乍翻香閣絮，輕風吹到膽瓶梅，心字已成灰。</p></div><div class="note warning"><h3 id="Test-note-warning"><a href="#Test-note-warning" class="headerlink" title="Test note warning"></a>Test note warning</h3><p>昏鴉盡，小立恨因誰 ?急雪乍翻香閣絮，輕風吹到膽瓶梅，心字已成灰。</p></div><div class="note danger"><h3 id="Test-note-danger"><a href="#Test-note-danger" class="headerlink" title="Test note danger"></a>Test note danger</h3><p>昏鴉盡，小立恨因誰 ?急雪乍翻香閣絮，輕風吹到膽瓶梅，心字已成灰。</p></div><h2 id="Button-标签测试"><a href="#Button-标签测试" class="headerlink" title="Button 标签测试"></a>Button 标签测试</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Usage: &#123;% button /path/to/url/, text, icon [class], title %&#125;</div><div class="line">Alias: &#123;% btn /path/to/url/, text, icon [class], title %&#125;</div></pre></td></tr></table></figure><h3 id="Button内嵌文字"><a href="#Button内嵌文字" class="headerlink" title="Button内嵌文字"></a>Button内嵌文字</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% button #, Text %&#125;&#123;% button #插入不同颜色的字体, 插入不同颜色的字体,heart %&#125;</div></pre></td></tr></table></figure><a class="btn" href="#">Text</a><a class="btn" href="#插入不同颜色的字体"><i class="fa fa-heart"></i>插入不同颜色的字体</a><h3 id="Button内嵌logo"><a href="#Button内嵌logo" class="headerlink" title="Button内嵌logo"></a>Button内嵌logo</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"text-center"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;% btn ##插入不同颜色的字体,, header %&#125;&#123;% btn #,, edge %&#125;&#123;% btn #,, times %&#125;&#123;% btn #,, circle-o %&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;% btn #,, italic %&#125;&#123;% btn #,, scribd %&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;% btn #,, google %&#125;&#123;% btn #,, chrome %&#125;&#123;% btn #,, opera %&#125;&#123;% btn #,, diamond fa-rotate-270 %&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><div class="text-center"><span><a class="btn" href="#插入不同颜色的字体"><i class="fa fa-header"></i>插入不同颜色的字体</a><a class="btn" href="#"><i class="fa fa-edge"></i></a><a class="btn" href="#"><i class="fa fa-times"></i></a><a class="btn" href="#"><i class="fa fa-circle-o"></i></a></span><span><a class="btn" href="#"><i class="fa fa-italic"></i></a><a class="btn" href="#"><i class="fa fa-scribd"></i></a></span><span><a class="btn" href="#"><i class="fa fa-google"></i></a><a class="btn" href="#"><i class="fa fa-chrome"></i></a><a class="btn" href="#"><i class="fa fa-opera"></i></a><a class="btn" href="#"><i class="fa fa-diamond fa-rotate-270"></i></a></span></div><h3 id="Button-Margin"><a href="#Button-Margin" class="headerlink" title="Button Margin"></a>Button Margin</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"text-center"</span>&gt;</span>&#123;% btn #, Almost, adn fa-fw fa-lg %&#125; &#123;% btn #, Over, terminal fa-fw fa-lg %&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><div class="text-center"><a class="btn" href="#"><i class="fa fa-adn fa-fw fa-lg"></i>Almost</a> <a class="btn" href="#"><i class="fa fa-terminal fa-fw fa-lg"></i>Over</a></div><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"text-right"</span>&gt;</span></div><div class="line">&#123;% btn #, Test is finished., check fa-fw fa-lg, Button tag test is finished. %&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><div class="text-right"><a class="btn" href="#" title="Button tag test is finished."><i class="fa fa-check fa-fw fa-lg"></i>Test is finished.</a></div><h2 id="Label-Tag测试文中字体颜色"><a href="#Label-Tag测试文中字体颜色" class="headerlink" title="Label Tag测试文中字体颜色"></a>Label Tag测试文中字体颜色</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">From &#123;% label @fairest creatures %&#125; we desire increase,</div><div class="line">That thereby &#123;% label primary@beauty's rose %&#125; might never die,</div><div class="line">But as the &#123;% label success@riper %&#125; should by time decease,</div><div class="line">His tender heir might &#123;% label info@bear his memory %&#125;:</div><div class="line">But thou contracted to thine own bright eyes,</div><div class="line">Feed'st thy light's flame with *&#123;% label warning @self-substantial fuel%&#125;*,</div><div class="line">Making a famine where ~~&#123;% label default @abundance lies %&#125;~~,</div><div class="line">Thy self thy foe, to thy <span class="tag">&lt;<span class="name">mark</span>&gt;</span>sweet self too cruel<span class="tag">&lt;/<span class="name">mark</span>&gt;</span>:</div><div class="line">Thou that art now the world's fresh ornament,</div><div class="line">And only herald to the gaudy spring,</div><div class="line">Within thine own bud buriest thy content,</div><div class="line">And &#123;% label danger@tender churl mak'st waste in niggarding %&#125;:</div><div class="line">Pity the world, or else this glutton be,</div><div class="line">&#123;% label warning@To eat the world's due, by the grave and thee %&#125;.</div></pre></td></tr></table></figure><p>From <span class="label default">fairest creatures</span> we desire increase,<br>That thereby <span class="label primary">beauty's rose</span> might never die,<br>But as the <span class="label success">riper</span> should by time decease,<br>His tender heir might <span class="label info">bear his memory</span>:<br>But thou contracted to thine own bright eyes,<br>Feed’st thy light’s flame with <em><span class="label warning">self-substantial fuel</span></em>,<br>Making a famine where <del><span class="label default">abundance lies</span></del>,<br>Thy self thy foe, to thy <mark>sweet self too cruel</mark>:<br>Thou that art now the world’s fresh ornament,<br>And only herald to the gaudy spring,<br>Within thine own bud buriest thy content,<br>And <span class="label danger">tender churl mak'st waste in niggarding</span>:<br>Pity the world, or else this glutton be,<br><span class="label warning">To eat the world's due, by the grave and thee</span>.</p><h2 id="表格Tag测试"><a href="#表格Tag测试" class="headerlink" title="表格Tag测试"></a>表格Tag测试</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&#123;% tabs First unique name %&#125;</div><div class="line"><span class="comment">&lt;!-- tab --&gt;</span></div><div class="line">**This is Tab 1.**</div><div class="line"><span class="comment">&lt;!-- endtab --&gt;</span></div><div class="line"><span class="comment">&lt;!-- tab --&gt;</span></div><div class="line">**This is Tab 2.**</div><div class="line"><span class="comment">&lt;!-- endtab --&gt;</span></div><div class="line"><span class="comment">&lt;!-- tab --&gt;</span></div><div class="line">**This is Tab 3.**</div><div class="line"><span class="comment">&lt;!-- endtab --&gt;</span></div><div class="line">&#123;% endtabs %&#125;</div></pre></td></tr></table></figure><div class="tabs" id="first-unique-name"><ul class="nav-tabs"><li class="tab active"><a href="#first-unique-name-1">First unique name 1</a></li><li class="tab"><a href="#first-unique-name-2">First unique name 2</a></li><li class="tab"><a href="#first-unique-name-3">First unique name 3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="first-unique-name-1"><p><strong>This is Tab 1.</strong></p></div><div class="tab-pane" id="first-unique-name-2"><p><strong>This is Tab 2.</strong></p></div><div class="tab-pane" id="first-unique-name-3"><p><strong>This is Tab 3.</strong></p></div></div></div><h3 id="插入不同颜色的字体"><a href="#插入不同颜色的字体" class="headerlink" title="插入不同颜色的字体"></a>插入不同颜色的字体</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">LimeGreen</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">white</span> <span class="attr">size</span>=<span class="string">3</span>&gt;</span>我是白色的字体，背景是色的~<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div></pre></td></tr></table></figure><table><tr><td bgcolor="LimeGreen"><font color="white" size="3">我是白色的字体，背景是色的~</font></td></tr></table><table><tr><td bgcolor="SpringGreen"><font color="white" size="3">我是白色的字体，背景是深灰色的~</font></td></tr></table><table><tr><td bgcolor="LightSeaGreen"><font color="white" size="3">我是白色的字体，背景是浅海绿的~</font></td></tr></table><table><tr><td bgcolor="#0099ff"><font color="white" size="3">我是白色的字体，背景是蓝色的~</font></td></tr></table><table><tr><td bgcolor="Silver"><font color="white" size="3">我是白色的字体，背景是银色的~</font></td></tr></table><table><tr><td bgcolor="DarkGray"><font color="white" size="3">我是白色的字体，背景是淡灰色的~</font></td></tr></table><table><tr><td bgcolor="DimGray"><font color="white" size="3">我是白色的字体，背景是深灰色的~</font></td></tr></table> <h2 id="插入代码"><a href="#插入代码" class="headerlink" title="插入代码"></a>插入代码</h2><p>这里是代码区域</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">% The following is the Matlab Code</span></div><div class="line"></div><div class="line"><span class="comment">% I want to see the result</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo</span><span class="params">()</span></span></div><div class="line"></div><div class="line">temp=<span class="built_in">zeros</span>(<span class="number">5</span>,<span class="number">6</span>);</div><div class="line"></div><div class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="built_in">size</span>(temp,<span class="number">1</span>)</div><div class="line"></div><div class="line">    <span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">1</span>:<span class="built_in">size</span>(temp,<span class="number">2</span>)</div><div class="line"></div><div class="line">        temp(<span class="built_in">i</span>,<span class="built_in">j</span>)=<span class="built_in">rand</span>(<span class="number">1</span>);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> temp(<span class="built_in">i</span>,<span class="built_in">j</span>)&gt;<span class="number">0.5</span></div><div class="line"></div><div class="line">            temp(<span class="built_in">i</span>,<span class="built_in">j</span>)=<span class="number">1</span>;</div><div class="line"></div><div class="line">        <span class="keyword">end</span></div><div class="line"></div><div class="line">    <span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="keyword">return</span> temp</div></pre></td></tr></table></figure><h2 id="插入标题"><a href="#插入标题" class="headerlink" title="插入标题"></a>插入标题</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="section"># 一级标题</span></div><div class="line"></div><div class="line"><span class="section">## 二级标题</span></div><div class="line"></div><div class="line"><span class="section">### 三级标题</span></div><div class="line"></div><div class="line"><span class="section">#### 四级标题</span></div><div class="line"></div><div class="line"><span class="section">##### 五级标题</span></div><div class="line"></div><div class="line"><span class="section">###### 六级标题</span></div></pre></td></tr></table></figure><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">- </span>文本1</div><div class="line"><span class="bullet">- </span>文本2</div><div class="line"><span class="bullet">- </span>文本3</div><div class="line"><span class="bullet">1. </span>文本一</div><div class="line"><span class="bullet">2. </span>文本二</div><div class="line"><span class="bullet">3. </span>文本三</div></pre></td></tr></table></figure><ul><li>文本1</li><li>文本2</li><li>文本3</li></ul><ol><li>文本一</li><li>文本二</li><li>文本三</li></ol><h2 id="插入图像"><a href="#插入图像" class="headerlink" title="插入图像"></a>插入图像</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">![](http://pic1.win4000.com/wallpaper/0/54cae8e69ac8b.jpg)</div></pre></td></tr></table></figure><center><img src="http://pic1.win4000.com/wallpaper/0/54cae8e69ac8b.jpg" width="100%"></center><p>或者：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://i2.wp.com/posturemag.com/online/wp-content/uploads/2015/07/Kaz7.jpg"</span> <span class="attr">width</span>=<span class="string">"100%"</span> &gt;</span><span class="tag">&lt;/<span class="name">center</span>&gt;</span></div></pre></td></tr></table></figure></p><center><img src="http://i2.wp.com/posturemag.com/online/wp-content/uploads/2015/07/Kaz7.jpg" width="100%"></center><h2 id="插入链接"><a href="#插入链接" class="headerlink" title="插入链接"></a>插入链接</h2><ul><li>segmentfault上的一个<a href="https://segmentfault.com/markdown" target="_blank" rel="external">Markdown学习手册</a></li><li>有道云笔记的Markdown<a href="http://note.youdao.com/iyoudao/?p=2411" target="_blank" rel="external">学习指南-基础篇</a></li><li><a href="http://iissnan.com/progit/" target="_blank" rel="external">Git学习手册</a></li></ul><h2 id="插入公式"><a href="#插入公式" class="headerlink" title="插入公式"></a>插入公式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$$E=mc^2$$</div></pre></td></tr></table></figure><script type="math/tex; mode=display">E=mc^2</script><p>Hexo文档使用Markdown语言对文档进行编辑，Hexo自身对公式可以进行渲染但是效果不佳，我们采用的是mathjax对Markdown中的公式进行渲染。<br>首先<a href="http://2wildkids.com/2016/10/06/%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86Hexo%E5%92%8CMathJax%E7%9A%84%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98/#小结" target="_blank" rel="external">修复Hexo与mathjax之间的渲染冲突</a>，然后可以参考mathjax的<a href="http://mlworks.cn/posts/introduction-to-mathjax-and-latex-expression/" target="_blank" rel="external">说明文档</a>编辑公式。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://almostover.ru/2016-01/hexo-theme-next-test/#" target="_blank" rel="external">Hexo Theme Next Test</a></li><li><a href="http://blog.csdn.net/testcs_dn/article/details/45719357/" target="_blank" rel="external">Color map</a></li><li><a href="http://www.mohu.org/info/lshort-cn.pdf" target="_blank" rel="external">一个关于Latex不短的介绍</a></li><li><a href="http://www.mohu.org/info/symbols/symbols.htm" target="_blank" rel="external">Latex常用命令摘录</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;&lt;img src=&quot;/2016/08/08/Markdown学习/i-love-markdown.png&quot; alt=&quot;i-love-markdown.png&quot; title=&quot;&quot;&gt;&lt;/center&gt;

&lt;!--&lt;a href=&quot;https://www.vincentqin.tech&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;i-love-markdown.png&quot; /&gt;&lt;/a&gt;--&gt;
&lt;p&gt;本文涉及学习Markdown文本标记语言的一些练习笔记。&lt;/p&gt;
    
    </summary>
    
      <category term="建站" scheme="https://www.vincentqin.tech/categories/%E5%BB%BA%E7%AB%99/"/>
    
    
      <category term="Markdown" scheme="https://www.vincentqin.tech/tags/Markdown/"/>
    
      <category term="资料" scheme="https://www.vincentqin.tech/tags/%E8%B5%84%E6%96%99/"/>
    
  </entry>
  
</feed>
